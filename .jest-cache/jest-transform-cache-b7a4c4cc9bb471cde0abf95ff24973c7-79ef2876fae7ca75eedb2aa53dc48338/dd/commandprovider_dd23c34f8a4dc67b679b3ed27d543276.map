{"version":3,"names":["cov_t2mrfjj9q","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","context_assembler_1","require","context_memory_1","global_1","phase_1","task_1","context_types_1","CommandContextProvider","constructor","config","commandHistory","Map","enableMemoryLearning","enableCaching","enableValidation","maxContextTokens","fallbackStrategy","debugMode","assembler","ContextAssembler","tokenBudget","total","reserved","Math","floor","available","used","allocation","phase","task","memory","buffer","ContextMemoryManager","globalManager","GlobalContextManager","phaseManager","PhaseContextManager","taskManager","TaskContextManager","initialize","loadExistingPhaseContext","console","log","getCommandContext","commandName","parameters","startTime","Date","now","initializeCommandTask","assemblyResult","assembleForCommand","recommendations","getRecommendations","fragments","validation","validateCommandContext","passed","errors","warnings","result","context","buildContextString","tokens","totalTokens","executionTime","timestamp","recordCommandExecution","error","getFallbackContext","recordCommandResult","output","execution","get","recordDecision","contextId","reasoning","updatePhaseContext","phaseNumber","phaseName","completedTasks","currentTier","existingPhase","getCurrentPhase","initializePhase","id","description","priority","ContextPriority","HIGH","satisfied","updateProgress","getContextSummary","getContext","getCurrentTask","getLearningMetrics","enabled","rulesCount","rules","filter","r","length","lastModified","metadata","progress","data","completionPercentage","status","phaseState","taskId","taskType","objective","patternsLearned","accuracyRate","lastUpdated","performance","averageAssemblyTime","calculateAverageAssemblyTime","cacheHitRate","totalCommands","size","exportContextState","exportContext","exportPhaseContext","exportTaskContext","exportMemory","importContextState","importContext","importPhaseContext","importTaskContext","importMemory","vibeStatusPath","currentBranch","process","env","GIT_BRANCH","phaseMatch","match","parseInt","replace","warn","getTaskTypeForCommand","instructions","taskParameters","Object","entries","map","value","required","initializeTask","commandTypeMap","sections","groupedFragments","forEach","fragment","has","set","push","CRITICAL","MEDIUM","getPriorityLabel","content","budgetUsed","budgetRemaining","fallbacksApplied","join","LOW","MINIMAL","hasGlobal","some","startsWith","commandRequirements","getCommandRequirements","req","hasRequired","fragmentType","includes","keyword","requirements","fallbackContext","buildFallbackContext","message","essential","oldest","Array","from","sort","a","delete","executions","values","exports","commandContextProvider"],"sources":["/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/integration/command-provider.ts"],"sourcesContent":["/**\n * Command Provider Integration\n * Integrates context system with existing Vibe commands using composable provider architecture\n */\n\nimport { ContextAssembler, ContextAssemblyResult } from '../assembly/context-assembler';\nimport { ContextMemoryManager } from '../memory/context-memory';\nimport { GlobalContextManager } from '../layers/global';\nimport { PhaseContextManager } from '../layers/phase';\nimport { TaskContextManager } from '../layers/task';\nimport {\n  ContextFragment,\n  ContextPriority,\n  BaseContext,\n  ValidationRule,\n  TaskType\n} from '../types/context.types';\n\n/**\n * Command Context Provider Configuration\n */\nexport interface CommandProviderConfig {\n  enableMemoryLearning: boolean;\n  enableCaching: boolean;\n  enableValidation: boolean;\n  maxContextTokens: number;\n  fallbackStrategy: 'minimal' | 'essential' | 'degraded';\n  debugMode: boolean;\n}\n\n/**\n * Command Context Provider\n * Main integration point for context-aware commands\n */\nexport class CommandContextProvider {\n  private assembler: ContextAssembler;\n  private memory: ContextMemoryManager;\n  private globalManager: GlobalContextManager;\n  private phaseManager: PhaseContextManager;\n  private taskManager: TaskContextManager;\n  private config: CommandProviderConfig;\n  private commandHistory: Map<string, CommandExecution> = new Map();\n\n  constructor(config: Partial<CommandProviderConfig> = {}) {\n    this.config = {\n      enableMemoryLearning: config.enableMemoryLearning ?? true,\n      enableCaching: config.enableCaching ?? true,\n      enableValidation: config.enableValidation ?? true,\n      maxContextTokens: config.maxContextTokens ?? 8000,\n      fallbackStrategy: config.fallbackStrategy ?? 'essential',\n      debugMode: config.debugMode ?? false\n    };\n\n    this.assembler = new ContextAssembler({\n      tokenBudget: {\n        total: this.config.maxContextTokens,\n        reserved: Math.floor(this.config.maxContextTokens * 0.1),\n        available: Math.floor(this.config.maxContextTokens * 0.9),\n        used: 0,\n        allocation: {\n          global: Math.floor(this.config.maxContextTokens * 0.25),\n          phase: Math.floor(this.config.maxContextTokens * 0.25),\n          task: Math.floor(this.config.maxContextTokens * 0.25),\n          memory: Math.floor(this.config.maxContextTokens * 0.15),\n          buffer: Math.floor(this.config.maxContextTokens * 0.1)\n        }\n      }\n    });\n\n    this.memory = new ContextMemoryManager();\n    this.globalManager = new GlobalContextManager();\n    this.phaseManager = new PhaseContextManager();\n    this.taskManager = new TaskContextManager();\n  }\n\n  /**\n   * Initialize context provider\n   */\n  public async initialize(): Promise<void> {\n    // Initialize global context with project defaults\n    await this.globalManager.initialize();\n    \n    // Load existing phase context if available\n    await this.loadExistingPhaseContext();\n    \n    if (this.config.debugMode) {\n      console.log('CommandContextProvider initialized successfully');\n    }\n  }\n\n  /**\n   * Get context for command execution\n   */\n  public async getCommandContext(\n    commandName: string,\n    parameters: Record<string, unknown> = {}\n  ): Promise<CommandContextResult> {\n    const startTime = Date.now();\n    \n    try {\n      // Initialize task context for this command\n      await this.initializeCommandTask(commandName, parameters);\n\n      // Assemble context for command\n      const assemblyResult = await this.assembler.assembleForCommand(commandName);\n\n      // Get memory recommendations\n      const recommendations = this.config.enableMemoryLearning \n        ? this.memory.getRecommendations(assemblyResult.fragments)\n        : [];\n\n      // Validate context if enabled\n      const validation = this.config.enableValidation\n        ? this.validateCommandContext(commandName, assemblyResult)\n        : { passed: true, errors: [], warnings: [] };\n\n      const result: CommandContextResult = {\n        commandName,\n        context: this.buildContextString(assemblyResult),\n        fragments: assemblyResult.fragments,\n        tokens: assemblyResult.totalTokens,\n        recommendations,\n        validation,\n        executionTime: Date.now() - startTime,\n        timestamp: Date.now()\n      };\n\n      // Store execution for learning\n      this.recordCommandExecution(commandName, result, parameters);\n\n      return result;\n\n    } catch (error) {\n      // Fallback context\n      return this.getFallbackContext(commandName, error as Error);\n    }\n  }\n\n  /**\n   * Record command execution result for learning\n   */\n  public recordCommandResult(\n    commandName: string,\n    result: 'success' | 'failure' | 'partial',\n    output?: string\n  ): void {\n    const execution = this.commandHistory.get(`${commandName}-${Date.now()}`);\n    \n    if (execution && this.config.enableMemoryLearning) {\n      this.memory.recordDecision(\n        execution.contextId,\n        `execute-${commandName}`,\n        execution.reasoning,\n        result,\n        execution.fragments\n      );\n    }\n  }\n\n  /**\n   * Update phase context\n   */\n  public async updatePhaseContext(\n    phaseNumber: number,\n    phaseName: string,\n    completedTasks: string[] = [],\n    currentTier?: number\n  ): Promise<void> {\n    // Initialize phase if not exists\n    const existingPhase = this.phaseManager.getCurrentPhase();\n    \n    if (!existingPhase || existingPhase.phaseNumber !== phaseNumber) {\n      await this.phaseManager.initializePhase(\n        phaseNumber,\n        phaseName,\n        [`Complete ${phaseName} objectives`],\n        [\n          {\n            id: `phase-${phaseNumber}-req-1`,\n            description: `Implement ${phaseName} functionality`,\n            type: 'functional',\n            priority: ContextPriority.HIGH,\n            satisfied: false\n          }\n        ]\n      );\n    }\n\n    // Update progress\n    this.phaseManager.updateProgress(completedTasks, currentTier);\n  }\n\n  /**\n   * Get current context summary\n   */\n  public getContextSummary(): ContextSummary {\n    const global = this.globalManager.getContext();\n    const phase = this.phaseManager.getCurrentPhase();\n    const task = this.taskManager.getCurrentTask();\n    const memory = this.memory.getLearningMetrics();\n\n    return {\n      global: global ? {\n        enabled: true,\n        rulesCount: global.rules.filter(r => r.enabled).length,\n        lastModified: global.metadata.lastModified\n      } : { enabled: false, rulesCount: 0, lastModified: 0 },\n      \n      phase: phase ? {\n        phaseNumber: phase.phaseNumber,\n        phaseName: phase.phaseName,\n        progress: phase.data.progress.completionPercentage,\n        status: phase.phaseState.status\n      } : null,\n      \n      task: task ? {\n        taskId: task.taskId,\n        taskType: task.taskType,\n        objective: task.data.objective\n      } : null,\n      \n      memory: {\n        patternsLearned: memory.patternsLearned,\n        accuracyRate: memory.accuracyRate,\n        lastUpdated: memory.lastUpdated\n      },\n\n      performance: {\n        averageAssemblyTime: this.calculateAverageAssemblyTime(),\n        cacheHitRate: this.assembler['fragmentFactory'] ? 95 : 0, // Placeholder\n        totalCommands: this.commandHistory.size\n      }\n    };\n  }\n\n  /**\n   * Export context state\n   */\n  public exportContextState(): ContextExport {\n    return {\n      global: this.globalManager.exportContext(),\n      phase: this.phaseManager.exportPhaseContext(),\n      task: this.taskManager.exportTaskContext(),\n      memory: this.memory.exportMemory(),\n      config: this.config,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Import context state\n   */\n  public importContextState(data: ContextExport): void {\n    if (data.global) this.globalManager.importContext(data.global);\n    if (data.phase) this.phaseManager.importPhaseContext(data.phase);\n    if (data.task) this.taskManager.importTaskContext(data.task);\n    if (data.memory) this.memory.importMemory(data.memory);\n    \n    this.config = { ...this.config, ...data.config };\n  }\n\n  // Private implementation methods\n\n  private async loadExistingPhaseContext(): Promise<void> {\n    try {\n      // Check for existing .vibe-status.md file\n      const vibeStatusPath = '.vibe-status.md';\n      // This would normally use Read tool, but keeping implementation simple\n      \n      // For now, we'll detect current phase from git branch name\n      const currentBranch = process.env.GIT_BRANCH || 'main';\n      const phaseMatch = currentBranch.match(/phase-(\\d+)-(.+)/);\n      \n      if (phaseMatch) {\n        const phaseNumber = parseInt(phaseMatch[1]);\n        const phaseName = phaseMatch[2].replace(/-/g, ' ');\n        await this.updatePhaseContext(phaseNumber, phaseName);\n      }\n    } catch (error) {\n      if (this.config.debugMode) {\n        console.warn('Could not load existing phase context:', error);\n      }\n    }\n  }\n\n  private async initializeCommandTask(\n    commandName: string,\n    parameters: Record<string, unknown>\n  ): Promise<void> {\n    const taskId = `cmd-${commandName}-${Date.now()}`;\n    const taskType = this.getTaskTypeForCommand(commandName);\n    \n    const instructions = [\n      `Execute ${commandName} command`,\n      'Maintain context preservation',\n      'Follow quality standards'\n    ];\n\n    const taskParameters = Object.entries(parameters).map(([name, value]) => ({\n      name,\n      type: typeof value,\n      value,\n      required: true,\n      description: `Parameter for ${commandName}`\n    }));\n\n    await this.taskManager.initializeTask(\n      taskId,\n      taskType,\n      `Execute ${commandName} with context awareness`,\n      instructions,\n      taskParameters\n    );\n  }\n\n  private getTaskTypeForCommand(commandName: string): TaskType {\n    const commandTypeMap: Record<string, TaskType> = {\n      'Read': 'research',\n      'Write': 'implementation',\n      'Edit': 'implementation',\n      'Bash': 'implementation',\n      'TodoWrite': 'documentation',\n      'WebFetch': 'research',\n      'WebSearch': 'research',\n      'Grep': 'research',\n      'Glob': 'research'\n    };\n\n    return commandTypeMap[commandName] || 'implementation';\n  }\n\n  private buildContextString(assemblyResult: ContextAssemblyResult): string {\n    const sections: string[] = [\n      '# Context Information\\n'\n    ];\n\n    // Group fragments by priority\n    const groupedFragments = new Map<ContextPriority, ContextFragment[]>();\n    \n    assemblyResult.fragments.forEach(fragment => {\n      if (!groupedFragments.has(fragment.priority)) {\n        groupedFragments.set(fragment.priority, []);\n      }\n      groupedFragments.get(fragment.priority)!.push(fragment);\n    });\n\n    // Add sections by priority\n    for (const priority of [ContextPriority.CRITICAL, ContextPriority.HIGH, ContextPriority.MEDIUM]) {\n      const fragments = groupedFragments.get(priority);\n      if (fragments && fragments.length > 0) {\n        sections.push(`## ${this.getPriorityLabel(priority)} Priority\\n`);\n        \n        fragments.forEach(fragment => {\n          sections.push(`### ${fragment.type}\\n${fragment.content}\\n`);\n        });\n      }\n    }\n\n    // Add token usage info\n    sections.push(`\\n## Context Statistics\\n`);\n    sections.push(`- Total Tokens: ${assemblyResult.totalTokens}`);\n    sections.push(`- Budget Used: ${assemblyResult.budgetUsed}/${assemblyResult.budgetUsed + assemblyResult.budgetRemaining}`);\n    sections.push(`- Fragments: ${assemblyResult.fragments.length}`);\n    \n    if (assemblyResult.fallbacksApplied.length > 0) {\n      sections.push(`- Fallbacks Applied: ${assemblyResult.fallbacksApplied.length}`);\n    }\n\n    return sections.join('\\n');\n  }\n\n  private getPriorityLabel(priority: ContextPriority): string {\n    switch (priority) {\n      case ContextPriority.CRITICAL: return 'Critical';\n      case ContextPriority.HIGH: return 'High';\n      case ContextPriority.MEDIUM: return 'Medium';\n      case ContextPriority.LOW: return 'Low';\n      case ContextPriority.MINIMAL: return 'Minimal';\n      default: return 'Unknown';\n    }\n  }\n\n  private validateCommandContext(\n    commandName: string,\n    assemblyResult: ContextAssemblyResult\n  ): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Check token budget\n    if (assemblyResult.totalTokens > this.config.maxContextTokens * 0.9) {\n      warnings.push('Context approaching token limit');\n    }\n\n    // Check for required context types\n    const hasGlobal = assemblyResult.fragments.some(f => f.type.startsWith('global'));\n    if (!hasGlobal) {\n      errors.push('Missing global context');\n    }\n\n    // Check command-specific requirements\n    const commandRequirements = this.getCommandRequirements(commandName);\n    commandRequirements.forEach(req => {\n      const hasRequired = assemblyResult.fragments.some(f => \n        f.type === req.fragmentType || f.content.includes(req.keyword)\n      );\n      \n      if (req.required && !hasRequired) {\n        errors.push(`Missing required context: ${req.description}`);\n      }\n    });\n\n    return {\n      passed: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  private getCommandRequirements(commandName: string): ContextRequirement[] {\n    const requirements: Record<string, ContextRequirement[]> = {\n      'Read': [\n        { fragmentType: 'global-rules', keyword: 'file', required: true, description: 'Global file handling rules' }\n      ],\n      'Write': [\n        { fragmentType: 'global-rules', keyword: 'quality', required: true, description: 'Quality standards' },\n        { fragmentType: 'task-context', keyword: 'write', required: false, description: 'Write task context' }\n      ],\n      'Bash': [\n        { fragmentType: 'global-rules', keyword: 'safety', required: true, description: 'Safety guidelines' }\n      ]\n    };\n\n    return requirements[commandName] || [];\n  }\n\n  private getFallbackContext(commandName: string, error: Error): CommandContextResult {\n    const fallbackContext = this.buildFallbackContext(commandName);\n    \n    return {\n      commandName,\n      context: fallbackContext,\n      fragments: [],\n      tokens: fallbackContext.length / 4, // Rough estimate\n      recommendations: [],\n      validation: { passed: false, errors: [error.message], warnings: ['Using fallback context'] },\n      executionTime: 0,\n      timestamp: Date.now()\n    };\n  }\n\n  private buildFallbackContext(commandName: string): string {\n    const essential = [\n      '# Fallback Context\\n',\n      '## Essential Rules',\n      '- Follow systematic development patterns',\n      '- Maintain 95%+ test coverage',\n      '- Preserve context between operations\\n',\n      `## Command: ${commandName}`,\n      `Executing ${commandName} with minimal context due to system fallback.`\n    ];\n\n    return essential.join('\\n');\n  }\n\n  private recordCommandExecution(\n    commandName: string,\n    result: CommandContextResult,\n    parameters: Record<string, unknown>\n  ): void {\n    const execution: CommandExecution = {\n      contextId: `exec-${commandName}-${Date.now()}`,\n      commandName,\n      parameters,\n      fragments: result.fragments,\n      tokens: result.tokens,\n      reasoning: `Context assembly for ${commandName}`,\n      timestamp: Date.now()\n    };\n\n    this.commandHistory.set(execution.contextId, execution);\n\n    // Cleanup old executions\n    if (this.commandHistory.size > 100) {\n      const oldest = Array.from(this.commandHistory.entries())\n        .sort(([,a], [,b]) => a.timestamp - b.timestamp)[0];\n      this.commandHistory.delete(oldest[0]);\n    }\n  }\n\n  private calculateAverageAssemblyTime(): number {\n    const executions = Array.from(this.commandHistory.values());\n    if (executions.length === 0) return 0;\n    \n    // This would normally track assembly times\n    return 50; // Placeholder: 50ms average\n  }\n}\n\n// Supporting interfaces\n\ninterface CommandContextResult {\n  commandName: string;\n  context: string;\n  fragments: ContextFragment[];\n  tokens: number;\n  recommendations: any[];\n  validation: ValidationResult;\n  executionTime: number;\n  timestamp: number;\n}\n\ninterface ValidationResult {\n  passed: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\ninterface ContextRequirement {\n  fragmentType?: string;\n  keyword: string;\n  required: boolean;\n  description: string;\n}\n\ninterface CommandExecution {\n  contextId: string;\n  commandName: string;\n  parameters: Record<string, unknown>;\n  fragments: ContextFragment[];\n  tokens: number;\n  reasoning: string;\n  timestamp: number;\n}\n\ninterface ContextSummary {\n  global: {\n    enabled: boolean;\n    rulesCount: number;\n    lastModified: number;\n  };\n  phase: {\n    phaseNumber: number;\n    phaseName: string;\n    progress: number;\n    status: string;\n  } | null;\n  task: {\n    taskId: string;\n    taskType: string;\n    objective: string;\n  } | null;\n  memory: {\n    patternsLearned: number;\n    accuracyRate: number;\n    lastUpdated: number;\n  };\n  performance: {\n    averageAssemblyTime: number;\n    cacheHitRate: number;\n    totalCommands: number;\n  };\n}\n\ninterface ContextExport {\n  global: any;\n  phase: any;\n  task: any;\n  memory: any;\n  config: CommandProviderConfig;\n  timestamp: number;\n}\n\n/**\n * Singleton instance for command integration\n */\nexport const commandContextProvider = new CommandContextProvider();"],"mappings":"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","ignoreList":[]}