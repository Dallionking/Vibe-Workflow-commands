{"file":"/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/__tests__/context-assembler.test.ts","mappings":"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","names":[],"sources":["/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/__tests__/context-assembler.test.ts"],"sourcesContent":["/**\n * Context Assembler Test Suite\n * Tests for intelligent context assembly with budget management\n */\n\nimport { describe, test, expect, beforeEach, jest, afterEach } from '@jest/globals';\nimport { ContextPriority } from '../types/context.types';\n\n// Use module factories to prevent circular dependencies\njest.mock('../layers/global', () => {\n  const mockGlobalContextManager = {\n    getContext: jest.fn()\n  };\n  return { globalContextManager: mockGlobalContextManager };\n});\n\njest.mock('../layers/phase', () => {\n  const mockPhaseContextManager = {\n    getCurrentPhase: jest.fn(),\n    getPhaseSummary: jest.fn()\n  };\n  return { phaseContextManager: mockPhaseContextManager };\n});\n\njest.mock('../layers/task', () => {\n  const mockTaskContextManager = {\n    getCurrentTask: jest.fn(),\n    getTaskSummary: jest.fn(),\n    getContextForCommand: jest.fn()\n  };\n  return { taskContextManager: mockTaskContextManager };\n});\n\n// Import after mocking to avoid circular dependencies\nimport { ContextAssembler } from '../assembly/context-assembler';\nimport { globalContextManager } from '../layers/global';\nimport { phaseContextManager } from '../layers/phase';\nimport { taskContextManager } from '../layers/task';\n\ndescribe('ContextAssembler', () => {\n  let assembler: ContextAssembler;\n\n  beforeEach(() => {\n    // Setup mock return values before creating assembler\n    (globalContextManager.getContext as jest.Mock).mockReturnValue({\n      rules: [\n        { id: 'rule-1', name: 'Rule 1', rule: 'Test rule content', enabled: true },\n        { id: 'rule-2', name: 'Rule 2', rule: 'Another rule', enabled: false }\n      ],\n      configuration: {\n        mcpTools: [\n          { name: 'Context7', enabled: true, priority: ContextPriority.CRITICAL },\n          { name: 'Perplexity', enabled: true, priority: ContextPriority.HIGH }\n        ],\n        qualityStandards: [\n          { name: 'Test Coverage', threshold: 95 },\n          { name: 'Code Quality', threshold: 80 }\n        ]\n      }\n    });\n\n    (phaseContextManager.getCurrentPhase as jest.Mock).mockReturnValue({\n      phaseNumber: 1,\n      phaseName: 'Context Engineering',\n      data: {\n        progress: { completionPercentage: 75 }\n      },\n      phaseState: {\n        completedTasks: ['task-1', 'task-2'],\n        blockers: []\n      }\n    });\n\n    (phaseContextManager.getPhaseSummary as jest.Mock).mockReturnValue('Phase 1: Context Engineering - 75% complete');\n\n    (taskContextManager.getCurrentTask as jest.Mock).mockReturnValue({\n      taskId: 'test-task',\n      taskType: 'implementation',\n      data: {\n        objective: 'Test objective',\n        instructions: ['Do this', 'Do that'],\n        parameters: [\n          { name: 'file_path', value: '/test/path', required: true }\n        ]\n      }\n    });\n\n    (taskContextManager.getTaskSummary as jest.Mock).mockReturnValue('Task: test-task (implementation)');\n\n    (taskContextManager.getContextForCommand as jest.Mock).mockReturnValue({\n      commandName: 'Read',\n      taskId: 'test-task',\n      taskType: 'implementation',\n      relevantParameters: [\n        { name: 'file_path', value: '/test/path' }\n      ]\n    });\n\n    assembler = new ContextAssembler({\n      tokenBudget: {\n        total: 1000,\n        reserved: 100,\n        available: 900,\n        used: 0,\n        allocation: {\n          global: 300,\n          phase: 300,\n          task: 200,\n          memory: 100,\n          buffer: 100\n        }\n      },\n      fallbackStrategy: 'truncate-lowest-priority'\n    });\n  });\n\n  afterEach(() => {\n    // Clean up mocks to prevent memory leaks\n    jest.clearAllMocks();\n  });\n\n  describe('Context Assembly', () => {\n    test('should assemble context successfully', async () => {\n      const result = await assembler.assembleContext();\n      \n      expect(result).toBeDefined();\n      expect(result.fragments).toBeDefined();\n      expect(result.totalTokens).toBeGreaterThan(0);\n      expect(result.budgetUsed).toBeGreaterThan(0);\n      expect(result.budgetRemaining).toBeGreaterThanOrEqual(0);\n      expect(result.priorityBreakdown).toBeDefined();\n      expect(result.fallbacksApplied).toBeDefined();\n      expect(result.warnings).toBeDefined();\n    });\n\n    test('should assemble context for specific command', async () => {\n      const result = await assembler.assembleForCommand('Read');\n      \n      expect(result).toBeDefined();\n      expect(result.fragments.length).toBeGreaterThan(0);\n      \n      // Should include command-specific fragment\n      const hasCommandFragment = result.fragments.some(f => \n        f.type === 'command-context' || f.content.includes('Read')\n      );\n      expect(hasCommandFragment).toBe(true);\n    });\n\n    test('should handle empty context gracefully', async () => {\n      // Mock empty context managers using proper Jest mocks\n      (globalContextManager.getContext as jest.Mock).mockReturnValueOnce(null);\n      (phaseContextManager.getCurrentPhase as jest.Mock).mockReturnValueOnce(null);\n      (taskContextManager.getCurrentTask as jest.Mock).mockReturnValueOnce(null);\n\n      const result = await assembler.assembleContext();\n      \n      expect(result).toBeDefined();\n      expect(result.fragments).toEqual([]);\n      expect(result.totalTokens).toBe(0);\n      \n      // Mocks will be automatically restored by afterEach\n    });\n  });\n\n  describe('Token Budget Management', () => {\n    test('should respect token budget limits', async () => {\n      // Create assembler with very small budget\n      const smallBudgetAssembler = new ContextAssembler({\n        tokenBudget: {\n          total: 100,\n          reserved: 10,\n          available: 90,\n          used: 0,\n          allocation: {\n            global: 30,\n            phase: 30,\n            task: 20,\n            memory: 5,\n            buffer: 5\n          }\n        }\n      });\n\n      const result = await smallBudgetAssembler.assembleContext();\n      \n      expect(result.totalTokens).toBeLessThanOrEqual(90);\n      expect(result.budgetUsed).toBeLessThanOrEqual(90);\n    });\n\n    test('should apply fallback strategies when over budget', async () => {\n      // Create assembler with tiny budget to force fallbacks\n      const tinyBudgetAssembler = new ContextAssembler({\n        tokenBudget: {\n          total: 50,\n          reserved: 5,\n          available: 45,\n          used: 0,\n          allocation: {\n            global: 15,\n            phase: 15,\n            task: 10,\n            memory: 3,\n            buffer: 2\n          }\n        },\n        fallbackStrategy: 'truncate-lowest-priority'\n      });\n\n      const result = await tinyBudgetAssembler.assembleContext();\n      \n      expect(result.totalTokens).toBeLessThanOrEqual(45);\n      // Should have applied fallbacks due to small budget\n      expect(result.fallbacksApplied.length).toBeGreaterThan(0);\n    });\n\n    test('should handle different fallback strategies', async () => {\n      const strategies = ['truncate-lowest-priority', 'compress-content', 'truncate-oldest'];\n      \n      for (const strategy of strategies) {\n        const strategyAssembler = new ContextAssembler({\n          tokenBudget: {\n            total: 50,\n            reserved: 5,\n            available: 45,\n            used: 0,\n            allocation: {\n              global: 15,\n              phase: 15,\n              task: 10,\n              memory: 3,\n              buffer: 2\n            }\n          },\n          fallbackStrategy: strategy as any\n        });\n\n        const result = await strategyAssembler.assembleContext();\n        expect(result.totalTokens).toBeLessThanOrEqual(45);\n      }\n    });\n  });\n\n  describe('Priority Management', () => {\n    test('should prioritize critical fragments', async () => {\n      const result = await assembler.assembleContext();\n      \n      // Check that critical priority fragments are included\n      const criticalFragments = result.fragments.filter(f => \n        f.priority === ContextPriority.CRITICAL\n      );\n      \n      const totalCriticalTokens = criticalFragments.reduce((sum, f) => \n        sum + f.tokenEstimate, 0\n      );\n      \n      expect(result.priorityBreakdown[ContextPriority.CRITICAL]).toBe(totalCriticalTokens);\n    });\n\n    test('should maintain priority ordering', async () => {\n      const result = await assembler.assembleContext();\n      \n      // Check that fragments are generally ordered by priority\n      for (let i = 0; i < result.fragments.length - 1; i++) {\n        const currentPriority = result.fragments[i].priority;\n        const nextPriority = result.fragments[i + 1].priority;\n        \n        // Current should be >= next (higher priority numbers come first)\n        expect(currentPriority).toBeGreaterThanOrEqual(nextPriority);\n      }\n    });\n\n    test('should handle priority breakdown correctly', async () => {\n      const result = await assembler.assembleContext();\n      \n      // Sum of all priority breakdown values should equal total tokens\n      const breakdownSum = Object.values(result.priorityBreakdown)\n        .reduce((sum, tokens) => sum + tokens, 0);\n      \n      expect(breakdownSum).toBe(result.totalTokens);\n    });\n  });\n\n  describe('Configuration Management', () => {\n    test('should update configuration', () => {\n      const newConfig = {\n        tokenBudget: {\n          total: 2000,\n          reserved: 200,\n          available: 1800,\n          used: 0,\n          allocation: {\n            global: 600,\n            phase: 600,\n            task: 400,\n            memory: 200,\n            buffer: 200\n          }\n        }\n      };\n\n      assembler.updateConfig(newConfig);\n      const config = assembler.getConfig();\n      \n      expect(config.tokenBudget.total).toBe(2000);\n      expect(config.tokenBudget.available).toBe(1800);\n    });\n\n    test('should get current configuration', () => {\n      const config = assembler.getConfig();\n      \n      expect(config).toBeDefined();\n      expect(config.tokenBudget).toBeDefined();\n      expect(config.priorityWeights).toBeDefined();\n      expect(config.fallbackStrategy).toBeDefined();\n      expect(config.cacheConfig).toBeDefined();\n    });\n\n    test('should maintain configuration immutability', () => {\n      const config = assembler.getConfig();\n      const originalTotal = config.tokenBudget.total;\n      \n      // Attempt to modify returned config\n      config.tokenBudget.total = 9999;\n      \n      // Should not affect internal configuration\n      const newConfig = assembler.getConfig();\n      expect(newConfig.tokenBudget.total).toBe(originalTotal);\n    });\n  });\n\n  describe('Fragment Processing', () => {\n    test('should remove expired fragments', async () => {\n      // This test would require mocking fragments with expired TTL\n      // For now, just ensure the assembler handles the expiration check\n      const result = await assembler.assembleContext();\n      \n      // Should complete without errors even if some fragments are expired\n      expect(result).toBeDefined();\n    });\n\n    test('should validate fragment content', async () => {\n      const result = await assembler.assembleContext();\n      \n      // All fragments should have valid content\n      result.fragments.forEach(fragment => {\n        expect(fragment.content).toBeDefined();\n        expect(fragment.content.length).toBeGreaterThan(0);\n        expect(fragment.tokenEstimate).toBeGreaterThan(0);\n      });\n    });\n  });\n\n  describe('Command Context Integration', () => {\n    test('should generate appropriate context for different commands', async () => {\n      const commands = ['Read', 'Write', 'Edit', 'Bash', 'TodoWrite'];\n      \n      for (const command of commands) {\n        const result = await assembler.assembleForCommand(command);\n        \n        expect(result).toBeDefined();\n        expect(result.fragments.length).toBeGreaterThan(0);\n        \n        // Should include command-specific information\n        const hasCommandInfo = result.fragments.some(f => \n          f.content.includes(command) || f.type === 'command-context'\n        );\n        expect(hasCommandInfo).toBe(true);\n      }\n    });\n\n    test('should handle unknown commands gracefully', async () => {\n      const result = await assembler.assembleForCommand('UnknownCommand');\n      \n      expect(result).toBeDefined();\n      expect(result.warnings).toBeDefined();\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle assembly errors gracefully', async () => {\n      // Mock an error in fragment collection using proper Jest mock\n      (globalContextManager.getContext as jest.Mock).mockImplementationOnce(() => {\n        throw new Error('Mock assembly error');\n      });\n\n      // Should not throw, but handle gracefully\n      const result = await assembler.assembleContext();\n      \n      expect(result).toBeDefined();\n      expect(result.warnings.length).toBeGreaterThan(0);\n      \n      // Mock will be automatically restored by afterEach\n    });\n\n    test('should validate required context components', async () => {\n      const result = await assembler.assembleContext();\n      \n      expect(result.fragments).toBeDefined();\n      expect(Array.isArray(result.fragments)).toBe(true);\n      expect(typeof result.totalTokens).toBe('number');\n      expect(typeof result.budgetUsed).toBe('number');\n      expect(typeof result.budgetRemaining).toBe('number');\n      expect(Array.isArray(result.fallbacksApplied)).toBe(true);\n      expect(Array.isArray(result.warnings)).toBe(true);\n    });\n  });\n\n  describe('Performance Metrics', () => {\n    test('should complete assembly within reasonable time', async () => {\n      const startTime = Date.now();\n      \n      await assembler.assembleContext();\n      \n      const endTime = Date.now();\n      const assemblyTime = endTime - startTime;\n      \n      // Should complete within 1 second for test data\n      expect(assemblyTime).toBeLessThan(1000);\n    });\n\n    test('should handle multiple concurrent assemblies', async () => {\n      const promises = [];\n      \n      // Start multiple assemblies concurrently\n      for (let i = 0; i < 5; i++) {\n        promises.push(assembler.assembleContext());\n      }\n      \n      const results = await Promise.all(promises);\n      \n      // All should complete successfully\n      expect(results).toHaveLength(5);\n      results.forEach(result => {\n        expect(result).toBeDefined();\n        expect(result.fragments).toBeDefined();\n      });\n    });\n  });\n\n  describe('Memory Management', () => {\n    test('should not leak memory with repeated assemblies', async () => {\n      // Perform many assemblies to check for memory leaks\n      for (let i = 0; i < 50; i++) {\n        const result = await assembler.assembleContext();\n        expect(result).toBeDefined();\n      }\n      \n      // If we get here without running out of memory, test passes\n      expect(true).toBe(true);\n    });\n\n    test('should handle large context assemblies', async () => {\n      // Create assembler with large budget\n      const largeAssembler = new ContextAssembler({\n        tokenBudget: {\n          total: 50000,\n          reserved: 5000,\n          available: 45000,\n          used: 0,\n          allocation: {\n            global: 15000,\n            phase: 15000,\n            task: 10000,\n            memory: 2500,\n            buffer: 2500\n          }\n        }\n      });\n\n      const result = await largeAssembler.assembleContext();\n      \n      expect(result).toBeDefined();\n      expect(result.totalTokens).toBeGreaterThan(0);\n    });\n  });\n});"],"version":3}