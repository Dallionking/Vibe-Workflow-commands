93b3979da63d28334c1839be6202b5a3
"use strict";
/**
 * Context Assembler Test Suite
 * Tests for intelligent context assembly with budget management
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Use module factories to prevent circular dependencies
globals_1.jest.mock('../layers/global', () => {
    const mockGlobalContextManager = {
        getContext: globals_1.jest.fn()
    };
    return { globalContextManager: mockGlobalContextManager };
});
globals_1.jest.mock('../layers/phase', () => {
    const mockPhaseContextManager = {
        getCurrentPhase: globals_1.jest.fn(),
        getPhaseSummary: globals_1.jest.fn()
    };
    return { phaseContextManager: mockPhaseContextManager };
});
globals_1.jest.mock('../layers/task', () => {
    const mockTaskContextManager = {
        getCurrentTask: globals_1.jest.fn(),
        getTaskSummary: globals_1.jest.fn(),
        getContextForCommand: globals_1.jest.fn()
    };
    return { taskContextManager: mockTaskContextManager };
});
const context_types_1 = require("../types/context.types");
// Import after mocking to avoid circular dependencies
const context_assembler_1 = require("../assembly/context-assembler");
const global_1 = require("../layers/global");
const phase_1 = require("../layers/phase");
const task_1 = require("../layers/task");
(0, globals_1.describe)('ContextAssembler', () => {
    let assembler;
    (0, globals_1.beforeEach)(() => {
        // Setup mock return values before creating assembler
        global_1.globalContextManager.getContext.mockReturnValue({
            rules: [
                { id: 'rule-1', name: 'Rule 1', rule: 'Test rule content', enabled: true },
                { id: 'rule-2', name: 'Rule 2', rule: 'Another rule', enabled: false }
            ],
            configuration: {
                mcpTools: [
                    { name: 'Context7', enabled: true, priority: context_types_1.ContextPriority.CRITICAL },
                    { name: 'Perplexity', enabled: true, priority: context_types_1.ContextPriority.HIGH }
                ],
                qualityStandards: [
                    { name: 'Test Coverage', threshold: 95 },
                    { name: 'Code Quality', threshold: 80 }
                ]
            }
        });
        phase_1.phaseContextManager.getCurrentPhase.mockReturnValue({
            phaseNumber: 1,
            phaseName: 'Context Engineering',
            data: {
                progress: { completionPercentage: 75 }
            },
            phaseState: {
                completedTasks: ['task-1', 'task-2'],
                blockers: []
            }
        });
        phase_1.phaseContextManager.getPhaseSummary.mockReturnValue('Phase 1: Context Engineering - 75% complete');
        task_1.taskContextManager.getCurrentTask.mockReturnValue({
            taskId: 'test-task',
            taskType: 'implementation',
            data: {
                objective: 'Test objective',
                instructions: ['Do this', 'Do that'],
                parameters: [
                    { name: 'file_path', value: '/test/path', required: true }
                ]
            }
        });
        task_1.taskContextManager.getTaskSummary.mockReturnValue('Task: test-task (implementation)');
        task_1.taskContextManager.getContextForCommand.mockReturnValue({
            commandName: 'Read',
            taskId: 'test-task',
            taskType: 'implementation',
            relevantParameters: [
                { name: 'file_path', value: '/test/path' }
            ]
        });
        assembler = new context_assembler_1.ContextAssembler({
            tokenBudget: {
                total: 1000,
                reserved: 100,
                available: 900,
                used: 0,
                allocation: {
                    global: 300,
                    phase: 300,
                    task: 200,
                    memory: 100,
                    buffer: 100
                }
            },
            fallbackStrategy: 'truncate-lowest-priority'
        });
    });
    (0, globals_1.afterEach)(() => {
        // Clean up mocks to prevent memory leaks
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('Context Assembly', () => {
        (0, globals_1.test)('should assemble context successfully', async () => {
            const result = await assembler.assembleContext();
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(result.fragments).toBeDefined();
            (0, globals_1.expect)(result.totalTokens).toBeGreaterThan(0);
            (0, globals_1.expect)(result.budgetUsed).toBeGreaterThan(0);
            (0, globals_1.expect)(result.budgetRemaining).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(result.priorityBreakdown).toBeDefined();
            (0, globals_1.expect)(result.fallbacksApplied).toBeDefined();
            (0, globals_1.expect)(result.warnings).toBeDefined();
        });
        (0, globals_1.test)('should assemble context for specific command', async () => {
            const result = await assembler.assembleForCommand('Read');
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(result.fragments.length).toBeGreaterThan(0);
            // Should include command-specific fragment
            const hasCommandFragment = result.fragments.some(f => f.type === 'command-context' || f.content.includes('Read'));
            (0, globals_1.expect)(hasCommandFragment).toBe(true);
        });
        (0, globals_1.test)('should handle empty context gracefully', async () => {
            // Mock empty context managers using proper Jest mocks
            global_1.globalContextManager.getContext.mockReturnValueOnce(null);
            phase_1.phaseContextManager.getCurrentPhase.mockReturnValueOnce(null);
            task_1.taskContextManager.getCurrentTask.mockReturnValueOnce(null);
            const result = await assembler.assembleContext();
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(result.fragments).toEqual([]);
            (0, globals_1.expect)(result.totalTokens).toBe(0);
            // Mocks will be automatically restored by afterEach
        });
    });
    (0, globals_1.describe)('Token Budget Management', () => {
        (0, globals_1.test)('should respect token budget limits', async () => {
            // Create assembler with very small budget
            const smallBudgetAssembler = new context_assembler_1.ContextAssembler({
                tokenBudget: {
                    total: 100,
                    reserved: 10,
                    available: 90,
                    used: 0,
                    allocation: {
                        global: 30,
                        phase: 30,
                        task: 20,
                        memory: 5,
                        buffer: 5
                    }
                }
            });
            const result = await smallBudgetAssembler.assembleContext();
            (0, globals_1.expect)(result.totalTokens).toBeLessThanOrEqual(90);
            (0, globals_1.expect)(result.budgetUsed).toBeLessThanOrEqual(90);
        });
        (0, globals_1.test)('should apply fallback strategies when over budget', async () => {
            // Create assembler with tiny budget to force fallbacks
            const tinyBudgetAssembler = new context_assembler_1.ContextAssembler({
                tokenBudget: {
                    total: 50,
                    reserved: 5,
                    available: 45,
                    used: 0,
                    allocation: {
                        global: 15,
                        phase: 15,
                        task: 10,
                        memory: 3,
                        buffer: 2
                    }
                },
                fallbackStrategy: 'truncate-lowest-priority'
            });
            const result = await tinyBudgetAssembler.assembleContext();
            (0, globals_1.expect)(result.totalTokens).toBeLessThanOrEqual(45);
            // Should have applied fallbacks due to small budget
            (0, globals_1.expect)(result.fallbacksApplied.length).toBeGreaterThan(0);
        });
        (0, globals_1.test)('should handle different fallback strategies', async () => {
            const strategies = ['truncate-lowest-priority', 'compress-content', 'truncate-oldest'];
            for (const strategy of strategies) {
                const strategyAssembler = new context_assembler_1.ContextAssembler({
                    tokenBudget: {
                        total: 50,
                        reserved: 5,
                        available: 45,
                        used: 0,
                        allocation: {
                            global: 15,
                            phase: 15,
                            task: 10,
                            memory: 3,
                            buffer: 2
                        }
                    },
                    fallbackStrategy: strategy
                });
                const result = await strategyAssembler.assembleContext();
                (0, globals_1.expect)(result.totalTokens).toBeLessThanOrEqual(45);
            }
        });
    });
    (0, globals_1.describe)('Priority Management', () => {
        (0, globals_1.test)('should prioritize critical fragments', async () => {
            const result = await assembler.assembleContext();
            // Check that critical priority fragments are included
            const criticalFragments = result.fragments.filter(f => f.priority === context_types_1.ContextPriority.CRITICAL);
            const totalCriticalTokens = criticalFragments.reduce((sum, f) => sum + f.tokenEstimate, 0);
            (0, globals_1.expect)(result.priorityBreakdown[context_types_1.ContextPriority.CRITICAL]).toBe(totalCriticalTokens);
        });
        (0, globals_1.test)('should maintain priority ordering', async () => {
            const result = await assembler.assembleContext();
            // Check that fragments are generally ordered by priority
            for (let i = 0; i < result.fragments.length - 1; i++) {
                const currentPriority = result.fragments[i].priority;
                const nextPriority = result.fragments[i + 1].priority;
                // Current should be >= next (higher priority numbers come first)
                (0, globals_1.expect)(currentPriority).toBeGreaterThanOrEqual(nextPriority);
            }
        });
        (0, globals_1.test)('should handle priority breakdown correctly', async () => {
            const result = await assembler.assembleContext();
            // Sum of all priority breakdown values should equal total tokens
            const breakdownSum = Object.values(result.priorityBreakdown)
                .reduce((sum, tokens) => sum + tokens, 0);
            (0, globals_1.expect)(breakdownSum).toBe(result.totalTokens);
        });
    });
    (0, globals_1.describe)('Configuration Management', () => {
        (0, globals_1.test)('should update configuration', () => {
            const newConfig = {
                tokenBudget: {
                    total: 2000,
                    reserved: 200,
                    available: 1800,
                    used: 0,
                    allocation: {
                        global: 600,
                        phase: 600,
                        task: 400,
                        memory: 200,
                        buffer: 200
                    }
                }
            };
            assembler.updateConfig(newConfig);
            const config = assembler.getConfig();
            (0, globals_1.expect)(config.tokenBudget.total).toBe(2000);
            (0, globals_1.expect)(config.tokenBudget.available).toBe(1800);
        });
        (0, globals_1.test)('should get current configuration', () => {
            const config = assembler.getConfig();
            (0, globals_1.expect)(config).toBeDefined();
            (0, globals_1.expect)(config.tokenBudget).toBeDefined();
            (0, globals_1.expect)(config.priorityWeights).toBeDefined();
            (0, globals_1.expect)(config.fallbackStrategy).toBeDefined();
            (0, globals_1.expect)(config.cacheConfig).toBeDefined();
        });
        (0, globals_1.test)('should maintain configuration immutability', () => {
            const config = assembler.getConfig();
            const originalTotal = config.tokenBudget.total;
            // Attempt to modify returned config
            config.tokenBudget.total = 9999;
            // Should not affect internal configuration
            const newConfig = assembler.getConfig();
            (0, globals_1.expect)(newConfig.tokenBudget.total).toBe(originalTotal);
        });
    });
    (0, globals_1.describe)('Fragment Processing', () => {
        (0, globals_1.test)('should remove expired fragments', async () => {
            // This test would require mocking fragments with expired TTL
            // For now, just ensure the assembler handles the expiration check
            const result = await assembler.assembleContext();
            // Should complete without errors even if some fragments are expired
            (0, globals_1.expect)(result).toBeDefined();
        });
        (0, globals_1.test)('should validate fragment content', async () => {
            const result = await assembler.assembleContext();
            // All fragments should have valid content
            result.fragments.forEach(fragment => {
                (0, globals_1.expect)(fragment.content).toBeDefined();
                (0, globals_1.expect)(fragment.content.length).toBeGreaterThan(0);
                (0, globals_1.expect)(fragment.tokenEstimate).toBeGreaterThan(0);
            });
        });
    });
    (0, globals_1.describe)('Command Context Integration', () => {
        (0, globals_1.test)('should generate appropriate context for different commands', async () => {
            const commands = ['Read', 'Write', 'Edit', 'Bash', 'TodoWrite'];
            for (const command of commands) {
                const result = await assembler.assembleForCommand(command);
                (0, globals_1.expect)(result).toBeDefined();
                (0, globals_1.expect)(result.fragments.length).toBeGreaterThan(0);
                // Should include command-specific information
                const hasCommandInfo = result.fragments.some(f => f.content.includes(command) || f.type === 'command-context');
                (0, globals_1.expect)(hasCommandInfo).toBe(true);
            }
        });
        (0, globals_1.test)('should handle unknown commands gracefully', async () => {
            const result = await assembler.assembleForCommand('UnknownCommand');
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(result.warnings).toBeDefined();
        });
    });
    (0, globals_1.describe)('Error Handling', () => {
        (0, globals_1.test)('should handle assembly errors gracefully', async () => {
            // Mock an error in fragment collection using proper Jest mock
            global_1.globalContextManager.getContext.mockImplementationOnce(() => {
                throw new Error('Mock assembly error');
            });
            // Should not throw, but handle gracefully
            const result = await assembler.assembleContext();
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(result.warnings.length).toBeGreaterThan(0);
            // Mock will be automatically restored by afterEach
        });
        (0, globals_1.test)('should validate required context components', async () => {
            const result = await assembler.assembleContext();
            (0, globals_1.expect)(result.fragments).toBeDefined();
            (0, globals_1.expect)(Array.isArray(result.fragments)).toBe(true);
            (0, globals_1.expect)(typeof result.totalTokens).toBe('number');
            (0, globals_1.expect)(typeof result.budgetUsed).toBe('number');
            (0, globals_1.expect)(typeof result.budgetRemaining).toBe('number');
            (0, globals_1.expect)(Array.isArray(result.fallbacksApplied)).toBe(true);
            (0, globals_1.expect)(Array.isArray(result.warnings)).toBe(true);
        });
    });
    (0, globals_1.describe)('Performance Metrics', () => {
        (0, globals_1.test)('should complete assembly within reasonable time', async () => {
            const startTime = Date.now();
            await assembler.assembleContext();
            const endTime = Date.now();
            const assemblyTime = endTime - startTime;
            // Should complete within 1 second for test data
            (0, globals_1.expect)(assemblyTime).toBeLessThan(1000);
        });
        (0, globals_1.test)('should handle multiple concurrent assemblies', async () => {
            const promises = [];
            // Start multiple assemblies concurrently
            for (let i = 0; i < 5; i++) {
                promises.push(assembler.assembleContext());
            }
            const results = await Promise.all(promises);
            // All should complete successfully
            (0, globals_1.expect)(results).toHaveLength(5);
            results.forEach(result => {
                (0, globals_1.expect)(result).toBeDefined();
                (0, globals_1.expect)(result.fragments).toBeDefined();
            });
        });
    });
    (0, globals_1.describe)('Memory Management', () => {
        (0, globals_1.test)('should not leak memory with repeated assemblies', async () => {
            // Perform many assemblies to check for memory leaks
            for (let i = 0; i < 50; i++) {
                const result = await assembler.assembleContext();
                (0, globals_1.expect)(result).toBeDefined();
            }
            // If we get here without running out of memory, test passes
            (0, globals_1.expect)(true).toBe(true);
        });
        (0, globals_1.test)('should handle large context assemblies', async () => {
            // Create assembler with large budget
            const largeAssembler = new context_assembler_1.ContextAssembler({
                tokenBudget: {
                    total: 50000,
                    reserved: 5000,
                    available: 45000,
                    used: 0,
                    allocation: {
                        global: 15000,
                        phase: 15000,
                        task: 10000,
                        memory: 2500,
                        buffer: 2500
                    }
                }
            });
            const result = await largeAssembler.assembleContext();
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(result.totalTokens).toBeGreaterThan(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,