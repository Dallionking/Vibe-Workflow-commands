{"file":"/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/__tests__/context-fragment.test.ts","mappings":"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","names":[],"sources":["/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/__tests__/context-fragment.test.ts"],"sourcesContent":["/**\n * Context Fragment Test Suite\n * Tests for ContextFragmentFactory, TokenEstimator, and FragmentCollection\n */\n\nimport { describe, test, expect, beforeEach } from '@jest/globals';\nimport { \n  ContextFragmentFactory, \n  TokenEstimator, \n  FragmentCollection \n} from '../assembly/context-fragment';\nimport { ContextPriority, ContextFragmentType } from '../types/context.types';\n\ndescribe('ContextFragmentFactory', () => {\n  let factory: ContextFragmentFactory;\n\n  beforeEach(() => {\n    factory = new ContextFragmentFactory();\n  });\n\n  describe('Fragment Creation', () => {\n    test('should create basic fragment', () => {\n      const fragment = factory.createFragment(\n        'global-rules',\n        'Test rule content',\n        ContextPriority.HIGH,\n        { source: { type: 'global', scope: 'system' } }\n      );\n\n      expect(fragment.id).toMatch(/global-rules-\\d+-[a-z0-9]{6}/);\n      expect(fragment.type).toBe('global-rules');\n      expect(fragment.content).toBe('Test rule content');\n      expect(fragment.priority).toBe(ContextPriority.HIGH);\n      expect(fragment.tokenEstimate).toBeGreaterThan(0);\n      expect(fragment.validation.isValid).toBe(true);\n    });\n\n    test('should create global fragment', () => {\n      const fragment = factory.createGlobalFragment(\n        'rules',\n        'Global rules content',\n        ContextPriority.CRITICAL\n      );\n\n      expect(fragment.type).toBe('global-rules');\n      expect(fragment.metadata.source.type).toBe('global');\n      expect(fragment.metadata.tags).toContain('global');\n      expect(fragment.metadata.tags).toContain('rules');\n      expect(fragment.metadata.ttl).toBeUndefined(); // Global doesn't expire\n    });\n\n    test('should create phase fragment', () => {\n      const fragment = factory.createPhaseFragment(\n        1,\n        'Context Engineering',\n        'context',\n        'Phase context content',\n        ContextPriority.HIGH\n      );\n\n      expect(fragment.type).toBe('phase-context');\n      expect(fragment.metadata.source.type).toBe('phase');\n      expect(fragment.metadata.tags).toContain('phase');\n      expect(fragment.metadata.tags).toContain('phase-1');\n      expect(fragment.metadata.ttl).toBe(24 * 60 * 60 * 1000); // 24 hours\n    });\n\n    test('should create task fragment', () => {\n      const fragment = factory.createTaskFragment(\n        'task-123',\n        'implementation',\n        'context',\n        'Task context content',\n        ContextPriority.MEDIUM\n      );\n\n      expect(fragment.type).toBe('task-context');\n      expect(fragment.metadata.source.type).toBe('task');\n      expect(fragment.metadata.tags).toContain('task');\n      expect(fragment.metadata.tags).toContain('implementation');\n      expect(fragment.metadata.ttl).toBe(60 * 60 * 1000); // 1 hour\n    });\n\n    test('should create memory fragment', () => {\n      const fragment = factory.createMemoryFragment(\n        'pattern',\n        'Memory pattern content',\n        ContextPriority.LOW\n      );\n\n      expect(fragment.type).toBe('memory-pattern');\n      expect(fragment.metadata.source.type).toBe('memory');\n      expect(fragment.metadata.tags).toContain('memory');\n      expect(fragment.metadata.tags).toContain('pattern');\n      expect(fragment.metadata.ttl).toBe(7 * 24 * 60 * 60 * 1000); // 7 days\n    });\n\n    test('should create command fragment', () => {\n      const fragment = factory.createCommandFragment(\n        'Read',\n        'file-operation',\n        'Command context content',\n        ContextPriority.MEDIUM\n      );\n\n      expect(fragment.type).toBe('command-context');\n      expect(fragment.metadata.source.type).toBe('command');\n      expect(fragment.metadata.tags).toContain('command');\n      expect(fragment.metadata.tags).toContain('Read');\n      expect(fragment.metadata.ttl).toBe(30 * 60 * 1000); // 30 minutes\n    });\n  });\n\n  describe('Fragment Updates', () => {\n    test('should update fragment content', () => {\n      const fragment = factory.createFragment(\n        'task-context',\n        'Original content',\n        ContextPriority.MEDIUM,\n        { source: { type: 'task', taskId: 'test', taskType: 'implementation' } }\n      );\n\n      const originalModified = fragment.metadata.lastModified;\n      const originalTokens = fragment.tokenEstimate;\n\n      // Wait a bit to ensure timestamp difference\n      setTimeout(() => {\n        const updated = factory.updateFragment(fragment, 'Updated content with more text');\n\n        expect(updated.content).toBe('Updated content with more text');\n        expect(updated.metadata.lastModified).toBeGreaterThan(originalModified);\n        expect(updated.tokenEstimate).toBeGreaterThan(originalTokens);\n        expect(updated.validation.isValid).toBe(true);\n      }, 10);\n    });\n  });\n\n  describe('Fragment Expiration', () => {\n    test('should detect expired fragments', () => {\n      const fragment = factory.createFragment(\n        'task-context',\n        'Test content',\n        ContextPriority.MEDIUM,\n        { \n          source: { type: 'task', taskId: 'test', taskType: 'implementation' },\n          ttl: 100 // 100ms TTL\n        }\n      );\n\n      expect(factory.isExpired(fragment)).toBe(false);\n\n      // Wait for expiration\n      setTimeout(() => {\n        expect(factory.isExpired(fragment)).toBe(true);\n      }, 150);\n    });\n\n    test('should not expire fragments without TTL', () => {\n      const fragment = factory.createGlobalFragment(\n        'rules',\n        'Global rules never expire',\n        ContextPriority.CRITICAL\n      );\n\n      expect(factory.isExpired(fragment)).toBe(false);\n    });\n  });\n\n  describe('Fragment Compression', () => {\n    test('should compress large fragments', () => {\n      const largeContent = 'This is a very long content string. '.repeat(100);\n      const fragment = factory.createFragment(\n        'task-context',\n        largeContent,\n        ContextPriority.MEDIUM,\n        { source: { type: 'task', taskId: 'test', taskType: 'implementation' } }\n      );\n\n      const originalTokens = fragment.tokenEstimate;\n      const targetTokens = Math.floor(originalTokens / 2);\n\n      const compressed = factory.compressFragment(fragment, targetTokens);\n\n      expect(compressed.tokenEstimate).toBeLessThanOrEqual(targetTokens);\n      expect(compressed.content).toContain('[content compressed]');\n      expect(compressed.content.length).toBeLessThan(largeContent.length);\n    });\n\n    test('should not compress fragments already within target', () => {\n      const smallContent = 'Small content';\n      const fragment = factory.createFragment(\n        'task-context',\n        smallContent,\n        ContextPriority.MEDIUM,\n        { source: { type: 'task', taskId: 'test', taskType: 'implementation' } }\n      );\n\n      const targetTokens = fragment.tokenEstimate + 100;\n      const result = factory.compressFragment(fragment, targetTokens);\n\n      expect(result.content).toBe(smallContent);\n      expect(result.tokenEstimate).toBe(fragment.tokenEstimate);\n    });\n  });\n\n  describe('Fragment Validation', () => {\n    test('should validate global rules format', () => {\n      const validRules = 'systematic: Always follow systematic patterns\\nquality: Maintain high standards';\n      const fragment = factory.createGlobalFragment('rules', validRules);\n\n      expect(fragment.validation.isValid).toBe(true);\n      expect(fragment.validation.errors).toHaveLength(0);\n    });\n\n    test('should warn about missing rule patterns', () => {\n      const incompleteRules = 'some rule: Just a rule without key patterns';\n      const fragment = factory.createGlobalFragment('rules', incompleteRules);\n\n      expect(fragment.validation.isValid).toBe(true);\n      expect(fragment.validation.warnings.length).toBeGreaterThan(0);\n      expect(fragment.validation.warnings[0].code).toBe('MISSING_RULE_PATTERNS');\n    });\n\n    test('should validate empty content', () => {\n      const fragment = factory.createFragment(\n        'task-context',\n        '',\n        ContextPriority.MEDIUM,\n        { source: { type: 'task', taskId: 'test', taskType: 'implementation' } }\n      );\n\n      expect(fragment.validation.isValid).toBe(false);\n      expect(fragment.validation.errors).toHaveLength(1);\n      expect(fragment.validation.errors[0].code).toBe('EMPTY_CONTENT');\n    });\n\n    test('should warn about high token count', () => {\n      const largeContent = 'Large content. '.repeat(500); // Should exceed 1000 tokens\n      const fragment = factory.createFragment(\n        'task-context',\n        largeContent,\n        ContextPriority.MEDIUM,\n        { source: { type: 'task', taskId: 'test', taskType: 'implementation' } }\n      );\n\n      expect(fragment.validation.warnings.some(w => w.code === 'HIGH_TOKEN_COUNT')).toBe(true);\n    });\n  });\n});\n\ndescribe('TokenEstimator', () => {\n  let estimator: TokenEstimator;\n\n  beforeEach(() => {\n    estimator = new TokenEstimator();\n  });\n\n  describe('Token Estimation', () => {\n    test('should estimate tokens for simple text', () => {\n      const text = 'This is a simple test';\n      const estimate = estimator.estimate(text);\n      \n      expect(estimate).toBeGreaterThan(0);\n      expect(estimate).toBe(Math.ceil(text.length / 3.5));\n    });\n\n    test('should cache token estimates', () => {\n      const text = 'Cached estimation test';\n      \n      const estimate1 = estimator.estimate(text);\n      const estimate2 = estimator.estimate(text);\n      \n      expect(estimate1).toBe(estimate2);\n    });\n\n    test('should estimate total tokens for fragments', () => {\n      const fragments = [\n        { tokenEstimate: 100 },\n        { tokenEstimate: 150 },\n        { tokenEstimate: 75 }\n      ] as any[];\n\n      const total = estimator.estimateTotal(fragments);\n      expect(total).toBe(325);\n    });\n\n    test('should handle empty fragment array', () => {\n      const total = estimator.estimateTotal([]);\n      expect(total).toBe(0);\n    });\n\n    test('should manage cache size', () => {\n      estimator.clearCache();\n      \n      // Add many items to test cache management\n      for (let i = 0; i < 1100; i++) {\n        estimator.estimate(`test content ${i}`);\n      }\n      \n      // Cache should be managed and not grow infinitely\n      expect(true).toBe(true); // Just ensure no errors thrown\n    });\n\n    test('should clear cache', () => {\n      estimator.estimate('test content');\n      estimator.clearCache();\n      \n      // After clearing, estimation should still work\n      const estimate = estimator.estimate('new test content');\n      expect(estimate).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Edge Cases', () => {\n    test('should handle empty string', () => {\n      const estimate = estimator.estimate('');\n      expect(estimate).toBe(0);\n    });\n\n    test('should handle very long text', () => {\n      const longText = 'Very long text content. '.repeat(1000);\n      const estimate = estimator.estimate(longText);\n      \n      expect(estimate).toBeGreaterThan(1000);\n      expect(estimate).toBe(Math.ceil(longText.length / 3.5));\n    });\n\n    test('should handle special characters', () => {\n      const specialText = '!@#$%^&*()_+-={}[]|\\\\:\";\\'<>?,./';\n      const estimate = estimator.estimate(specialText);\n      \n      expect(estimate).toBeGreaterThan(0);\n    });\n  });\n});\n\ndescribe('FragmentCollection', () => {\n  let collection: FragmentCollection;\n  let factory: ContextFragmentFactory;\n\n  beforeEach(() => {\n    collection = new FragmentCollection();\n    factory = new ContextFragmentFactory();\n  });\n\n  describe('Collection Operations', () => {\n    test('should add and retrieve fragments', () => {\n      const fragment = factory.createFragment(\n        'global-rules',\n        'Test content',\n        ContextPriority.HIGH,\n        { source: { type: 'global', scope: 'system' } }\n      );\n\n      collection.add(fragment);\n      \n      expect(collection.get(fragment.id)).toBe(fragment);\n      expect(collection.size()).toBe(1);\n    });\n\n    test('should remove fragments', () => {\n      const fragment = factory.createFragment(\n        'global-rules',\n        'Test content',\n        ContextPriority.HIGH,\n        { source: { type: 'global', scope: 'system' } }\n      );\n\n      collection.add(fragment);\n      expect(collection.size()).toBe(1);\n\n      const removed = collection.remove(fragment.id);\n      expect(removed).toBe(true);\n      expect(collection.size()).toBe(0);\n      expect(collection.get(fragment.id)).toBeUndefined();\n    });\n\n    test('should return false when removing non-existent fragment', () => {\n      const removed = collection.remove('non-existent-id');\n      expect(removed).toBe(false);\n    });\n\n    test('should get all fragments', () => {\n      const fragment1 = factory.createGlobalFragment('rules', 'Content 1');\n      const fragment2 = factory.createGlobalFragment('config', 'Content 2');\n\n      collection.add(fragment1);\n      collection.add(fragment2);\n\n      const allFragments = collection.getAll();\n      expect(allFragments).toHaveLength(2);\n      expect(allFragments).toContain(fragment1);\n      expect(allFragments).toContain(fragment2);\n    });\n  });\n\n  describe('Fragment Filtering', () => {\n    test('should get fragments by type', () => {\n      const globalFragment = factory.createGlobalFragment('rules', 'Global content');\n      const phaseFragment = factory.createPhaseFragment(1, 'Phase 1', 'context', 'Phase content');\n\n      collection.add(globalFragment);\n      collection.add(phaseFragment);\n\n      const globalFragments = collection.getByType('global-rules');\n      expect(globalFragments).toHaveLength(1);\n      expect(globalFragments[0]).toBe(globalFragment);\n\n      const phaseFragments = collection.getByType('phase-context');\n      expect(phaseFragments).toHaveLength(1);\n      expect(phaseFragments[0]).toBe(phaseFragment);\n    });\n\n    test('should get fragments by priority', () => {\n      const criticalFragment = factory.createGlobalFragment('rules', 'Critical', ContextPriority.CRITICAL);\n      const highFragment = factory.createGlobalFragment('config', 'High', ContextPriority.HIGH);\n      const mediumFragment = factory.createTaskFragment('task-1', 'implementation', 'context', 'Medium', ContextPriority.MEDIUM);\n\n      collection.add(criticalFragment);\n      collection.add(highFragment);\n      collection.add(mediumFragment);\n\n      const highPriorityFragments = collection.getByPriority(ContextPriority.HIGH);\n      expect(highPriorityFragments).toHaveLength(2); // Critical and High\n      expect(highPriorityFragments).toContain(criticalFragment);\n      expect(highPriorityFragments).toContain(highFragment);\n      expect(highPriorityFragments).not.toContain(mediumFragment);\n    });\n\n    test('should get fragments sorted by priority', () => {\n      const mediumFragment = factory.createTaskFragment('task-1', 'implementation', 'context', 'Medium', ContextPriority.MEDIUM);\n      const criticalFragment = factory.createGlobalFragment('rules', 'Critical', ContextPriority.CRITICAL);\n      const highFragment = factory.createGlobalFragment('config', 'High', ContextPriority.HIGH);\n\n      collection.add(mediumFragment);\n      collection.add(criticalFragment);\n      collection.add(highFragment);\n\n      const sortedFragments = collection.getSortedByPriority();\n      expect(sortedFragments).toHaveLength(3);\n      expect(sortedFragments[0]).toBe(criticalFragment);\n      expect(sortedFragments[1]).toBe(highFragment);\n      expect(sortedFragments[2]).toBe(mediumFragment);\n    });\n  });\n\n  describe('Collection Maintenance', () => {\n    test('should remove expired fragments', () => {\n      const expiredFragment = factory.createTaskFragment(\n        'task-1', \n        'implementation', \n        'context', \n        'Expired content', \n        ContextPriority.MEDIUM\n      );\n      \n      // Manually set created time to make it expired\n      expiredFragment.metadata.created = Date.now() - (2 * 60 * 60 * 1000); // 2 hours ago\n      expiredFragment.metadata.ttl = 60 * 60 * 1000; // 1 hour TTL\n\n      const validFragment = factory.createGlobalFragment('rules', 'Valid content');\n\n      collection.add(expiredFragment);\n      collection.add(validFragment);\n\n      expect(collection.size()).toBe(2);\n\n      const removedCount = collection.removeExpired(factory);\n      expect(removedCount).toBe(1);\n      expect(collection.size()).toBe(1);\n      expect(collection.get(validFragment.id)).toBe(validFragment);\n      expect(collection.get(expiredFragment.id)).toBeUndefined();\n    });\n\n    test('should calculate total tokens', () => {\n      const fragment1 = factory.createGlobalFragment('rules', 'Content 1');\n      const fragment2 = factory.createGlobalFragment('config', 'Content 2');\n\n      collection.add(fragment1);\n      collection.add(fragment2);\n\n      const totalTokens = collection.getTotalTokens();\n      const expectedTokens = fragment1.tokenEstimate + fragment2.tokenEstimate;\n      expect(totalTokens).toBe(expectedTokens);\n    });\n\n    test('should clear all fragments', () => {\n      const fragment1 = factory.createGlobalFragment('rules', 'Content 1');\n      const fragment2 = factory.createGlobalFragment('config', 'Content 2');\n\n      collection.add(fragment1);\n      collection.add(fragment2);\n      expect(collection.size()).toBe(2);\n\n      collection.clear();\n      expect(collection.size()).toBe(0);\n      expect(collection.getAll()).toHaveLength(0);\n    });\n  });\n\n  describe('Edge Cases', () => {\n    test('should handle empty collection operations', () => {\n      expect(collection.size()).toBe(0);\n      expect(collection.getAll()).toHaveLength(0);\n      expect(collection.getByType('global-rules')).toHaveLength(0);\n      expect(collection.getByPriority(ContextPriority.HIGH)).toHaveLength(0);\n      expect(collection.getTotalTokens()).toBe(0);\n      expect(collection.removeExpired(factory)).toBe(0);\n    });\n\n    test('should handle duplicate additions', () => {\n      const fragment = factory.createGlobalFragment('rules', 'Test content');\n      \n      collection.add(fragment);\n      collection.add(fragment); // Add same fragment again\n      \n      expect(collection.size()).toBe(1); // Should still be 1, not 2\n    });\n  });\n});"],"version":3}