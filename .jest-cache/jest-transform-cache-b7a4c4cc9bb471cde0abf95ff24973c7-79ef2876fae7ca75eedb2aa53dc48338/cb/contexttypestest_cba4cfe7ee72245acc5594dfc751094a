c4ecea6e8f56b909ca2dbfa393700c86
"use strict";
/**
 * Context Types Test Suite
 * Tests for TypeScript interfaces and type safety
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const context_types_1 = require("../types/context.types");
(0, globals_1.describe)('Context Types', () => {
    (0, globals_1.describe)('ContextPriority Enum', () => {
        (0, globals_1.test)('should have correct priority values', () => {
            (0, globals_1.expect)(context_types_1.ContextPriority.CRITICAL).toBe(1000);
            (0, globals_1.expect)(context_types_1.ContextPriority.HIGH).toBe(800);
            (0, globals_1.expect)(context_types_1.ContextPriority.MEDIUM).toBe(500);
            (0, globals_1.expect)(context_types_1.ContextPriority.LOW).toBe(200);
            (0, globals_1.expect)(context_types_1.ContextPriority.MINIMAL).toBe(100);
        });
        (0, globals_1.test)('should maintain correct ordering', () => {
            (0, globals_1.expect)(context_types_1.ContextPriority.CRITICAL > context_types_1.ContextPriority.HIGH).toBe(true);
            (0, globals_1.expect)(context_types_1.ContextPriority.HIGH > context_types_1.ContextPriority.MEDIUM).toBe(true);
            (0, globals_1.expect)(context_types_1.ContextPriority.MEDIUM > context_types_1.ContextPriority.LOW).toBe(true);
            (0, globals_1.expect)(context_types_1.ContextPriority.LOW > context_types_1.ContextPriority.MINIMAL).toBe(true);
        });
    });
    (0, globals_1.describe)('ContextSource Discriminated Union', () => {
        (0, globals_1.test)('should accept valid global source', () => {
            const globalSource = {
                type: 'global',
                scope: 'system'
            };
            (0, globals_1.expect)(globalSource.type).toBe('global');
            (0, globals_1.expect)(globalSource.scope).toBe('system');
        });
        (0, globals_1.test)('should accept valid phase source', () => {
            const phaseSource = {
                type: 'phase',
                phaseNumber: 1,
                phaseName: 'Context Engineering'
            };
            (0, globals_1.expect)(phaseSource.type).toBe('phase');
            (0, globals_1.expect)(phaseSource.phaseNumber).toBe(1);
        });
        (0, globals_1.test)('should accept valid task source', () => {
            const taskSource = {
                type: 'task',
                taskId: 'task-123',
                taskType: 'implementation'
            };
            (0, globals_1.expect)(taskSource.type).toBe('task');
            (0, globals_1.expect)(taskSource.taskId).toBe('task-123');
        });
        (0, globals_1.test)('should accept valid memory source', () => {
            const memorySource = {
                type: 'memory',
                memoryType: 'pattern'
            };
            (0, globals_1.expect)(memorySource.type).toBe('memory');
            (0, globals_1.expect)(memorySource.memoryType).toBe('pattern');
        });
        (0, globals_1.test)('should accept valid command source', () => {
            const commandSource = {
                type: 'command',
                commandName: 'Read',
                commandType: 'file-operation'
            };
            (0, globals_1.expect)(commandSource.type).toBe('command');
            (0, globals_1.expect)(commandSource.commandName).toBe('Read');
        });
        (0, globals_1.test)('should accept valid external source', () => {
            const externalSource = {
                type: 'external',
                provider: 'Context7',
                dataType: 'documentation'
            };
            (0, globals_1.expect)(externalSource.type).toBe('external');
            (0, globals_1.expect)(externalSource.provider).toBe('Context7');
        });
    });
    (0, globals_1.describe)('BaseContext Interface', () => {
        (0, globals_1.test)('should create valid base context', () => {
            const metadata = {
                source: { type: 'global', scope: 'system' },
                priority: context_types_1.ContextPriority.HIGH,
                tags: ['test'],
                dependencies: [],
                created: Date.now(),
                lastModified: Date.now()
            };
            const baseContext = {
                id: 'test-context',
                timestamp: Date.now(),
                version: '1.0.0',
                data: 'test data',
                metadata
            };
            (0, globals_1.expect)(baseContext.id).toBe('test-context');
            (0, globals_1.expect)(typeof baseContext.data).toBe('string');
            (0, globals_1.expect)(baseContext.metadata.priority).toBe(context_types_1.ContextPriority.HIGH);
        });
    });
    (0, globals_1.describe)('ContextFragment Interface', () => {
        (0, globals_1.test)('should create valid context fragment', () => {
            const fragment = {
                id: 'fragment-1',
                type: 'global-rules',
                content: 'Test rule content',
                priority: context_types_1.ContextPriority.CRITICAL,
                tokenEstimate: 150,
                metadata: {
                    source: { type: 'global', scope: 'system' },
                    priority: context_types_1.ContextPriority.CRITICAL,
                    tags: ['global', 'rules'],
                    dependencies: [],
                    created: Date.now(),
                    lastModified: Date.now()
                },
                validation: {
                    isValid: true,
                    errors: [],
                    warnings: [],
                    lastValidated: Date.now()
                }
            };
            (0, globals_1.expect)(fragment.id).toBe('fragment-1');
            (0, globals_1.expect)(fragment.type).toBe('global-rules');
            (0, globals_1.expect)(fragment.tokenEstimate).toBe(150);
            (0, globals_1.expect)(fragment.validation.isValid).toBe(true);
        });
        (0, globals_1.test)('should handle invalid fragment validation', () => {
            const fragment = {
                id: 'invalid-fragment',
                type: 'task-context',
                content: '',
                priority: context_types_1.ContextPriority.LOW,
                tokenEstimate: 0,
                metadata: {
                    source: { type: 'task', taskId: 'test', taskType: 'validation' },
                    priority: context_types_1.ContextPriority.LOW,
                    tags: ['task'],
                    dependencies: [],
                    created: Date.now(),
                    lastModified: Date.now()
                },
                validation: {
                    isValid: false,
                    errors: [
                        {
                            code: 'EMPTY_CONTENT',
                            message: 'Fragment content cannot be empty',
                            severity: 'error'
                        }
                    ],
                    warnings: [],
                    lastValidated: Date.now()
                }
            };
            (0, globals_1.expect)(fragment.validation.isValid).toBe(false);
            (0, globals_1.expect)(fragment.validation.errors).toHaveLength(1);
            (0, globals_1.expect)(fragment.validation.errors[0].code).toBe('EMPTY_CONTENT');
        });
    });
    (0, globals_1.describe)('GlobalRule Interface', () => {
        (0, globals_1.test)('should create valid global rule', () => {
            const rule = {
                id: 'test-rule',
                name: 'Test Rule',
                description: 'A test rule for validation',
                rule: 'Always test your code',
                enabled: true,
                priority: context_types_1.ContextPriority.HIGH
            };
            (0, globals_1.expect)(rule.id).toBe('test-rule');
            (0, globals_1.expect)(rule.enabled).toBe(true);
            (0, globals_1.expect)(rule.priority).toBe(context_types_1.ContextPriority.HIGH);
        });
        (0, globals_1.test)('should handle disabled rules', () => {
            const rule = {
                id: 'disabled-rule',
                name: 'Disabled Rule',
                description: 'A disabled rule',
                rule: 'This rule is disabled',
                enabled: false,
                priority: context_types_1.ContextPriority.LOW
            };
            (0, globals_1.expect)(rule.enabled).toBe(false);
        });
    });
    (0, globals_1.describe)('TaskType Validation', () => {
        const validTaskTypes = [
            'implementation',
            'testing',
            'research',
            'documentation',
            'validation',
            'integration',
            'optimization'
        ];
        (0, globals_1.test)('should accept all valid task types', () => {
            validTaskTypes.forEach(taskType => {
                (0, globals_1.expect)(typeof taskType).toBe('string');
                (0, globals_1.expect)(validTaskTypes).toContain(taskType);
            });
        });
    });
    (0, globals_1.describe)('Token Budget Validation', () => {
        (0, globals_1.test)('should validate token budget structure', () => {
            const tokenBudget = {
                total: 8000,
                reserved: 800,
                available: 7200,
                used: 0,
                allocation: {
                    global: 2000,
                    phase: 2000,
                    task: 2000,
                    memory: 1000,
                    buffer: 200
                }
            };
            (0, globals_1.expect)(tokenBudget.total).toBe(8000);
            (0, globals_1.expect)(tokenBudget.available + tokenBudget.reserved).toBe(tokenBudget.total);
            const totalAllocation = Object.values(tokenBudget.allocation)
                .reduce((sum, val) => sum + val, 0);
            (0, globals_1.expect)(totalAllocation).toBeLessThanOrEqual(tokenBudget.total);
        });
    });
    (0, globals_1.describe)('Type Safety Edge Cases', () => {
        (0, globals_1.test)('should handle optional properties correctly', () => {
            const metadata = {
                source: { type: 'global', scope: 'system' },
                priority: context_types_1.ContextPriority.MEDIUM,
                tags: [],
                dependencies: [],
                created: Date.now(),
                lastModified: Date.now()
                // ttl is optional
            };
            (0, globals_1.expect)(metadata.ttl).toBeUndefined();
        });
        (0, globals_1.test)('should maintain readonly properties', () => {
            const baseContext = {
                id: 'readonly-test',
                timestamp: Date.now(),
                version: '1.0.0',
                data: {},
                metadata: {
                    source: { type: 'global', scope: 'system' },
                    priority: context_types_1.ContextPriority.MEDIUM,
                    tags: [],
                    dependencies: [],
                    created: Date.now(),
                    lastModified: Date.now()
                }
            };
            // These should be readonly and TypeScript would prevent modification
            (0, globals_1.expect)(baseContext.id).toBe('readonly-test');
            (0, globals_1.expect)(typeof baseContext.timestamp).toBe('number');
        });
    });
    (0, globals_1.describe)('Context Fragment Types', () => {
        const validFragmentTypes = [
            'global-rules',
            'global-config',
            'phase-context',
            'phase-history',
            'task-context',
            'task-state',
            'memory-pattern',
            'memory-decision',
            'command-context'
        ];
        (0, globals_1.test)('should validate all fragment types', () => {
            validFragmentTypes.forEach(type => {
                const fragment = {
                    type: type,
                    content: 'test content',
                    priority: context_types_1.ContextPriority.MEDIUM
                };
                (0, globals_1.expect)(fragment.type).toBe(type);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,