{"version":3,"names":["cov_s9cj7w4rn","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","ContextPriority","exports"],"sources":["/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/types/context.types.ts"],"sourcesContent":["/**\n * Core Context Engineering Types for Vibe Coding System\n * Based on research from OpenAI Agents SDK and TypeScript best practices\n */\n\n// ============================================================================\n// Base Context Types\n// ============================================================================\n\n/**\n * Context Pattern for Learning System\n */\nexport interface ContextPattern {\n  id: string;\n  type: 'sequence' | 'priority-distribution' | 'content-similarity' | 'assembly';\n  name: string;\n  description: string;\n  fragmentSignature: any[];\n  contextSignature: string;\n  confidence: number;\n  usage: number;\n  lastUsed: number;\n  created: number;\n}\n\n/**\n * Context Decision for Learning System\n */\nexport interface ContextDecision {\n  id: string;\n  contextId: string;\n  decision: string;\n  reasoning: string;\n  outcome: 'success' | 'failure' | 'partial';\n  contextSignature: string;\n  confidence: number;\n  timestamp: number;\n}\n\n/**\n * Learning Metrics for Context Memory\n */\nexport interface LearningMetrics {\n  patternsLearned: number;\n  decisionsRecorded: number;\n  recommendationsGenerated: number;\n  accuracyRate: number;\n  lastUpdated: number;\n}\n\n/**\n * Memory Entry for Context Storage\n */\nexport interface MemoryEntry {\n  id: string;\n  key: string;\n  content: string;\n  type: 'pattern' | 'decision' | 'learning';\n  priority: ContextPriority;\n  accessCount: number;\n  created: number;\n  lastAccessed: number;\n}\n\n/**\n * Pattern Recognition Result\n */\nexport interface PatternRecognition {\n  identifiedPatterns: ContextPattern[];\n  confidenceScore: number;\n  recommendations: string[];\n  appliedPatterns: string[];\n  timestamp: number;\n}\n\n/**\n * Base context interface inspired by OpenAI Agents' RunContext pattern\n */\nexport interface BaseContext<T = unknown> {\n  readonly id: string;\n  readonly timestamp: number;\n  readonly version: string;\n  data: T;\n  metadata: ContextMetadata;\n}\n\n/**\n * Context metadata for tracking and validation\n */\nexport interface ContextMetadata {\n  source: ContextSource;\n  priority: ContextPriority;\n  ttl?: number; // Time to live in milliseconds\n  tags: string[];\n  dependencies: string[];\n  created: number;\n  lastModified: number;\n}\n\n/**\n * Context sources using discriminated unions for type safety\n */\nexport type ContextSource =\n  | { type: 'global'; scope: 'system' | 'user' | 'project' }\n  | { type: 'phase'; phaseNumber: number; phaseName: string }\n  | { type: 'task'; taskId: string; taskType: string }\n  | { type: 'memory'; memoryType: 'pattern' | 'decision' | 'learning' }\n  | { type: 'command'; commandName: string; commandType: string }\n  | { type: 'external'; provider: string; dataType: string };\n\n/**\n * Priority levels for context selection\n */\nexport enum ContextPriority {\n  CRITICAL = 1000,\n  HIGH = 800,\n  MEDIUM = 500,\n  LOW = 200,\n  MINIMAL = 100\n}\n\n// ============================================================================\n// Context Fragment Architecture\n// ============================================================================\n\n/**\n * Context fragment - atomic unit of context information\n * Inspired by OpenAI's context management patterns\n */\nexport interface ContextFragment {\n  readonly id: string;\n  readonly type: ContextFragmentType;\n  content: string;\n  priority: ContextPriority;\n  tokenEstimate: number;\n  metadata: ContextMetadata;\n  validation: FragmentValidation;\n}\n\n/**\n * Context fragment types using discriminated unions\n */\nexport type ContextFragmentType =\n  | 'global-rules'\n  | 'global-config'\n  | 'phase-context'\n  | 'phase-history'\n  | 'task-context'\n  | 'task-state'\n  | 'memory-pattern'\n  | 'memory-decision'\n  | 'command-context'\n  | 'external-data';\n\n/**\n * Fragment validation information\n */\nexport interface FragmentValidation {\n  isValid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n  lastValidated: number;\n}\n\nexport interface ValidationError {\n  code: string;\n  message: string;\n  severity: 'error' | 'warning' | 'info';\n  field?: string;\n}\n\nexport interface ValidationWarning {\n  code: string;\n  message: string;\n  suggestion?: string;\n}\n\n// ============================================================================\n// Three-Layer Context System\n// ============================================================================\n\n/**\n * Three-layer context system as specified in Phase 1\n */\nexport interface ContextLayers {\n  L1_Global: GlobalContextLayer;\n  L2_Phase: PhaseContextLayer;\n  L3_Task: TaskContextLayer;\n}\n\n/**\n * L1: Global Context - Always Active\n */\nexport interface GlobalContextLayer extends BaseContext<GlobalContextData> {\n  layer: 'global';\n  rules: GlobalRule[];\n  configuration: GlobalConfiguration;\n  preferences: UserPreferences;\n}\n\nexport interface GlobalContextData {\n  systemRules: string[];\n  projectInfo: ProjectInfo;\n  userProfile: UserProfile;\n  toolConfigurations: ToolConfiguration[];\n}\n\nexport interface GlobalRule {\n  id: string;\n  name: string;\n  description: string;\n  rule: string;\n  enabled: boolean;\n  priority: ContextPriority;\n}\n\nexport interface GlobalConfiguration {\n  mcpTools: MCPToolConfig[];\n  qualityStandards: QualityStandard[];\n  developmentPatterns: DevelopmentPattern[];\n}\n\n/**\n * L2: Phase Context - Current Phase\n */\nexport interface PhaseContextLayer extends BaseContext<PhaseContextData> {\n  layer: 'phase';\n  phaseNumber: number;\n  phaseName: string;\n  phaseState: PhaseState;\n  dependencies: PhaseDependency[];\n}\n\nexport interface PhaseContextData {\n  objectives: string[];\n  requirements: PhaseRequirement[];\n  progress: PhaseProgress;\n  outputs: PhaseOutput[];\n  validationCriteria: ValidationCriteria[];\n}\n\nexport interface PhaseState {\n  status: 'not-started' | 'in-progress' | 'completed' | 'blocked';\n  currentTier: number;\n  currentSubtask: string;\n  completedTasks: string[];\n  blockers: PhaseBlocker[];\n}\n\n/**\n * L3: Task Context - Current Task\n */\nexport interface TaskContextLayer extends BaseContext<TaskContextData> {\n  layer: 'task';\n  taskId: string;\n  taskType: TaskType;\n  parentTask?: string;\n  subtasks: string[];\n}\n\nexport interface TaskContextData {\n  objective: string;\n  instructions: string[];\n  parameters: TaskParameter[];\n  expectedOutputs: ExpectedOutput[];\n  validationRules: ValidationRule[];\n}\n\nexport type TaskType =\n  | 'implementation'\n  | 'research'\n  | 'validation'\n  | 'documentation'\n  | 'testing'\n  | 'integration'\n  | 'optimization';\n\n// ============================================================================\n// Supporting Types\n// ============================================================================\n\nexport interface ProjectInfo {\n  name: string;\n  description: string;\n  type: 'saas' | 'mobile' | 'enterprise' | 'library' | 'other';\n  technologies: string[];\n  architecture: string;\n}\n\nexport interface UserProfile {\n  preferences: UserPreferences;\n  experience: ExperienceLevel;\n  focusAreas: string[];\n}\n\nexport interface UserPreferences {\n  codeStyle: CodeStylePreferences;\n  documentation: DocumentationPreferences;\n  testing: TestingPreferences;\n}\n\nexport interface CodeStylePreferences {\n  indentation: 'tabs' | 'spaces';\n  spacing: number;\n  lineLength: number;\n  conventions: string[];\n}\n\nexport interface DocumentationPreferences {\n  format: 'markdown' | 'jsdoc' | 'typedoc' | 'custom';\n  detail: 'minimal' | 'standard' | 'comprehensive';\n  examples: boolean;\n}\n\nexport interface TestingPreferences {\n  framework: string;\n  coverage: number;\n  types: ('unit' | 'integration' | 'e2e')[];\n}\n\nexport type ExperienceLevel = 'beginner' | 'intermediate' | 'advanced' | 'expert';\n\nexport interface MCPToolConfig {\n  name: string;\n  enabled: boolean;\n  priority: ContextPriority;\n  configuration: Record<string, unknown>;\n}\n\nexport interface QualityStandard {\n  name: string;\n  description: string;\n  criteria: QualityCriteria[];\n  threshold: number;\n}\n\nexport interface QualityCriteria {\n  metric: string;\n  target: number;\n  required: boolean;\n}\n\nexport interface DevelopmentPattern {\n  name: string;\n  description: string;\n  pattern: string;\n  examples: string[];\n  applicability: string[];\n}\n\nexport interface PhaseRequirement {\n  id: string;\n  description: string;\n  type: 'functional' | 'non-functional' | 'quality' | 'documentation';\n  priority: ContextPriority;\n  satisfied: boolean;\n}\n\nexport interface PhaseProgress {\n  completionPercentage: number;\n  tasksCompleted: number;\n  tasksTotal: number;\n  timeSpent: number;\n  estimatedRemaining: number;\n}\n\nexport interface PhaseOutput {\n  type: 'code' | 'documentation' | 'configuration' | 'test' | 'artifact';\n  path: string;\n  description: string;\n  validated: boolean;\n}\n\nexport interface ValidationCriteria {\n  id: string;\n  description: string;\n  validator: string;\n  required: boolean;\n  passed?: boolean;\n}\n\nexport interface PhaseBlocker {\n  id: string;\n  description: string;\n  type: 'dependency' | 'resource' | 'technical' | 'decision';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  resolution?: string;\n}\n\nexport interface PhaseDependency {\n  phaseNumber: number;\n  phaseName: string;\n  type: 'blocks' | 'enhances' | 'optional';\n  satisfied: boolean;\n}\n\nexport interface TaskParameter {\n  name: string;\n  type: string;\n  value: unknown;\n  required: boolean;\n  description: string;\n}\n\nexport interface ExpectedOutput {\n  type: string;\n  format: string;\n  description: string;\n  validationRules: string[];\n}\n\nexport interface ValidationRule {\n  id: string;\n  description: string;\n  rule: string;\n  severity: 'error' | 'warning' | 'info';\n}\n\nexport interface ToolConfiguration {\n  toolName: string;\n  enabled: boolean;\n  priority: ContextPriority;\n  settings: Record<string, unknown>;\n}\n\n// ============================================================================\n// Context Assembly Types\n// ============================================================================\n\n/**\n * Token budget management for context assembly\n */\nexport interface TokenBudget {\n  total: number;\n  reserved: number;\n  available: number;\n  used: number;\n  allocation: TokenAllocation;\n}\n\nexport interface TokenAllocation {\n  global: number;\n  phase: number;\n  task: number;\n  memory: number;\n  buffer: number;\n}\n\n/**\n * Context assembly configuration\n */\nexport interface ContextAssemblyConfig {\n  tokenBudget: TokenBudget;\n  priorityWeights: PriorityWeights;\n  fallbackStrategy: FallbackStrategy;\n  cacheConfig: CacheConfiguration;\n}\n\nexport interface PriorityWeights {\n  [ContextPriority.CRITICAL]: number;\n  [ContextPriority.HIGH]: number;\n  [ContextPriority.MEDIUM]: number;\n  [ContextPriority.LOW]: number;\n  [ContextPriority.MINIMAL]: number;\n}\n\nexport type FallbackStrategy =\n  | 'truncate-oldest'\n  | 'truncate-lowest-priority'\n  | 'compress-content'\n  | 'summarize-content'\n  | 'fail-fast';\n\nexport interface CacheConfiguration {\n  maxSize: number;\n  ttl: number;\n  strategy: 'lru' | 'lfu' | 'ttl' | 'fifo';\n  persistToDisk: boolean;\n}\n\n// ============================================================================\n// Export All Types  \n// ============================================================================\n\n// All types are already exported above"],"mappings":"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","ignoreList":[]}