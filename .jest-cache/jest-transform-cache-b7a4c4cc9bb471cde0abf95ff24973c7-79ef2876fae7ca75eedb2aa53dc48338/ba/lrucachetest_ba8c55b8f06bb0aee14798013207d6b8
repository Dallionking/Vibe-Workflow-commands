b793f8bc772a974048173057ed3d89ce
"use strict";
/**
 * LRU Cache Test Suite
 * Tests for LRUCache implementation with priority-aware eviction
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const lru_cache_1 = require("../cache/lru-cache");
const context_types_1 = require("../types/context.types");
function createMockFragment(id, content = 'test content', priority = context_types_1.ContextPriority.MEDIUM, tokenEstimate = 100) {
    return {
        id,
        type: 'task-context',
        content,
        priority,
        tokenEstimate,
        metadata: {
            source: { type: 'task', taskId: id, taskType: 'testing' },
            priority,
            tags: ['test'],
            dependencies: [],
            created: Date.now(),
            lastModified: Date.now()
        },
        validation: {
            isValid: true,
            errors: [],
            warnings: [],
            lastValidated: Date.now()
        }
    };
}
(0, globals_1.describe)('LRUCache', () => {
    let cache;
    (0, globals_1.beforeEach)(() => {
        cache = new lru_cache_1.LRUCache({
            maxSize: 5,
            ttl: 60000, // 1 minute
            strategy: 'lru',
            evictionPolicy: 'strict-lru'
        });
    });
    (0, globals_1.describe)('Basic Operations', () => {
        (0, globals_1.test)('should put and get items', () => {
            const fragment = createMockFragment('test-1');
            cache.put('test-1', fragment);
            const retrieved = cache.get('test-1');
            (0, globals_1.expect)(retrieved).toBe(fragment);
            (0, globals_1.expect)(cache.has('test-1')).toBe(true);
        });
        (0, globals_1.test)('should return null for non-existent items', () => {
            const result = cache.get('non-existent');
            (0, globals_1.expect)(result).toBe(null);
            (0, globals_1.expect)(cache.has('non-existent')).toBe(false);
        });
        (0, globals_1.test)('should remove items', () => {
            const fragment = createMockFragment('test-1');
            cache.put('test-1', fragment);
            (0, globals_1.expect)(cache.has('test-1')).toBe(true);
            const removed = cache.remove('test-1');
            (0, globals_1.expect)(removed).toBe(true);
            (0, globals_1.expect)(cache.has('test-1')).toBe(false);
            (0, globals_1.expect)(cache.get('test-1')).toBe(null);
        });
        (0, globals_1.test)('should return false when removing non-existent item', () => {
            const removed = cache.remove('non-existent');
            (0, globals_1.expect)(removed).toBe(false);
        });
        (0, globals_1.test)('should clear all items', () => {
            cache.put('test-1', createMockFragment('test-1'));
            cache.put('test-2', createMockFragment('test-2'));
            (0, globals_1.expect)(cache.getStats().currentSize).toBe(2);
            cache.clear();
            (0, globals_1.expect)(cache.getStats().currentSize).toBe(0);
            (0, globals_1.expect)(cache.has('test-1')).toBe(false);
            (0, globals_1.expect)(cache.has('test-2')).toBe(false);
        });
    });
    (0, globals_1.describe)('LRU Behavior', () => {
        (0, globals_1.test)('should maintain LRU order', () => {
            // Fill cache to capacity
            for (let i = 1; i <= 5; i++) {
                cache.put(`test-${i}`, createMockFragment(`test-${i}`));
            }
            (0, globals_1.expect)(cache.getStats().currentSize).toBe(5);
            // Add one more item, should evict least recently used
            cache.put('test-6', createMockFragment('test-6'));
            (0, globals_1.expect)(cache.getStats().currentSize).toBe(5);
            (0, globals_1.expect)(cache.has('test-1')).toBe(false); // Should be evicted
            (0, globals_1.expect)(cache.has('test-6')).toBe(true); // Should be added
        });
        (0, globals_1.test)('should update LRU order on access', () => {
            // Fill cache
            for (let i = 1; i <= 5; i++) {
                cache.put(`test-${i}`, createMockFragment(`test-${i}`));
            }
            // Access test-1 to make it most recently used
            cache.get('test-1');
            // Add new item, should evict test-2 (now least recently used)
            cache.put('test-6', createMockFragment('test-6'));
            (0, globals_1.expect)(cache.has('test-1')).toBe(true); // Should still be there
            (0, globals_1.expect)(cache.has('test-2')).toBe(false); // Should be evicted
            (0, globals_1.expect)(cache.has('test-6')).toBe(true); // Should be added
        });
    });
    (0, globals_1.describe)('Priority-Aware Eviction', () => {
        (0, globals_1.beforeEach)(() => {
            cache = new lru_cache_1.LRUCache({
                maxSize: 3,
                ttl: 60000,
                strategy: 'priority-weighted',
                evictionPolicy: 'priority-aware'
            });
        });
        (0, globals_1.test)('should prefer evicting low priority items', () => {
            const criticalFragment = createMockFragment('critical', 'critical content', context_types_1.ContextPriority.CRITICAL);
            const highFragment = createMockFragment('high', 'high content', context_types_1.ContextPriority.HIGH);
            const lowFragment = createMockFragment('low', 'low content', context_types_1.ContextPriority.LOW);
            cache.put('critical', criticalFragment);
            cache.put('high', highFragment);
            cache.put('low', lowFragment);
            // Add another item, should evict the low priority one
            const mediumFragment = createMockFragment('medium', 'medium content', context_types_1.ContextPriority.MEDIUM);
            cache.put('medium', mediumFragment);
            (0, globals_1.expect)(cache.has('critical')).toBe(true);
            (0, globals_1.expect)(cache.has('high')).toBe(true);
            (0, globals_1.expect)(cache.has('medium')).toBe(true);
            (0, globals_1.expect)(cache.has('low')).toBe(false); // Should be evicted
        });
    });
    (0, globals_1.describe)('TTL (Time To Live)', () => {
        (0, globals_1.beforeEach)(() => {
            cache = new lru_cache_1.LRUCache({
                maxSize: 5,
                ttl: 100, // 100ms
                strategy: 'lru',
                evictionPolicy: 'strict-lru'
            });
        });
        (0, globals_1.test)('should expire items after TTL', async () => {
            const fragment = createMockFragment('test-1');
            cache.put('test-1', fragment);
            (0, globals_1.expect)(cache.has('test-1')).toBe(true);
            // Wait for expiration
            await new Promise(resolve => setTimeout(resolve, 150));
            (0, globals_1.expect)(cache.has('test-1')).toBe(false);
            (0, globals_1.expect)(cache.get('test-1')).toBe(null);
        });
        (0, globals_1.test)('should clean up expired items', async () => {
            cache.put('test-1', createMockFragment('test-1'));
            cache.put('test-2', createMockFragment('test-2'));
            (0, globals_1.expect)(cache.getStats().currentSize).toBe(2);
            // Wait for expiration
            await new Promise(resolve => setTimeout(resolve, 150));
            const cleanedCount = cache.cleanup();
            (0, globals_1.expect)(cleanedCount).toBe(2);
            (0, globals_1.expect)(cache.getStats().currentSize).toBe(0);
        });
    });
    (0, globals_1.describe)('Statistics', () => {
        (0, globals_1.test)('should track hit and miss statistics', () => {
            const fragment = createMockFragment('test-1');
            cache.put('test-1', fragment);
            // Test hits
            cache.get('test-1'); // hit
            cache.get('test-1'); // hit
            // Test misses
            cache.get('non-existent-1'); // miss
            cache.get('non-existent-2'); // miss
            const stats = cache.getStats();
            (0, globals_1.expect)(stats.hits).toBe(2);
            (0, globals_1.expect)(stats.misses).toBe(2);
            (0, globals_1.expect)(stats.totalAccesses).toBe(4);
            (0, globals_1.expect)(stats.hitRate).toBe(50);
        });
        (0, globals_1.test)('should track eviction statistics', () => {
            // Fill cache beyond capacity to trigger evictions
            for (let i = 1; i <= 7; i++) {
                cache.put(`test-${i}`, createMockFragment(`test-${i}`));
            }
            const stats = cache.getStats();
            (0, globals_1.expect)(stats.evictions).toBe(2); // Should have 2 evictions (7 - 5)
            (0, globals_1.expect)(stats.currentSize).toBe(5);
        });
        (0, globals_1.test)('should track memory usage', () => {
            const fragment1 = createMockFragment('test-1', 'content', context_types_1.ContextPriority.MEDIUM, 100);
            const fragment2 = createMockFragment('test-2', 'content', context_types_1.ContextPriority.MEDIUM, 150);
            cache.put('test-1', fragment1);
            cache.put('test-2', fragment2);
            const stats = cache.getStats();
            (0, globals_1.expect)(stats.memoryUsage).toBe(250); // 100 + 150 tokens
        });
    });
    (0, globals_1.describe)('Configuration', () => {
        (0, globals_1.test)('should resize cache capacity', () => {
            // Fill cache to original capacity (5)
            for (let i = 1; i <= 5; i++) {
                cache.put(`test-${i}`, createMockFragment(`test-${i}`));
            }
            (0, globals_1.expect)(cache.getStats().currentSize).toBe(5);
            // Resize to smaller capacity
            cache.resize(3);
            (0, globals_1.expect)(cache.getStats().maxSize).toBe(3);
            (0, globals_1.expect)(cache.getStats().currentSize).toBeLessThanOrEqual(3);
        });
        (0, globals_1.test)('should update configuration', () => {
            const originalStats = cache.getStats();
            cache.updateConfig({
                maxSize: 10,
                ttl: 120000,
                strategy: 'lfu'
            });
            const newStats = cache.getStats();
            (0, globals_1.expect)(newStats.maxSize).toBe(10);
            (0, globals_1.expect)(newStats.maxSize).not.toBe(originalStats.maxSize);
        });
    });
    (0, globals_1.describe)('Export/Import', () => {
        (0, globals_1.test)('should export cache state', () => {
            const fragment1 = createMockFragment('test-1');
            const fragment2 = createMockFragment('test-2');
            cache.put('test-1', fragment1);
            cache.put('test-2', fragment2);
            const exported = cache.export();
            (0, globals_1.expect)(exported.entries).toHaveLength(2);
            (0, globals_1.expect)(exported.accessOrder).toContain('test-1');
            (0, globals_1.expect)(exported.accessOrder).toContain('test-2');
            (0, globals_1.expect)(exported.config).toBeDefined();
            (0, globals_1.expect)(exported.stats).toBeDefined();
            (0, globals_1.expect)(exported.timestamp).toBeDefined();
        });
        (0, globals_1.test)('should import cache state', () => {
            const fragment = createMockFragment('test-1');
            cache.put('test-1', fragment);
            const exported = cache.export();
            // Create new cache and import
            const newCache = new lru_cache_1.LRUCache();
            newCache.import(exported);
            (0, globals_1.expect)(newCache.has('test-1')).toBe(true);
            (0, globals_1.expect)(newCache.get('test-1')).toEqual(fragment);
        });
    });
    (0, globals_1.describe)('Edge Cases', () => {
        (0, globals_1.test)('should handle zero capacity', () => {
            const zeroCache = new lru_cache_1.LRUCache({ maxSize: 0 });
            zeroCache.put('test-1', createMockFragment('test-1'));
            (0, globals_1.expect)(zeroCache.has('test-1')).toBe(false);
            (0, globals_1.expect)(zeroCache.getStats().currentSize).toBe(0);
        });
        (0, globals_1.test)('should handle duplicate keys', () => {
            const fragment1 = createMockFragment('test-1', 'content 1');
            const fragment2 = createMockFragment('test-1', 'content 2');
            cache.put('test-1', fragment1);
            cache.put('test-1', fragment2); // Overwrite
            const retrieved = cache.get('test-1');
            (0, globals_1.expect)(retrieved?.content).toBe('content 2');
            (0, globals_1.expect)(cache.getStats().currentSize).toBe(1);
        });
        (0, globals_1.test)('should handle large token estimates', () => {
            const largeFragment = createMockFragment('large', 'content', context_types_1.ContextPriority.MEDIUM, 999999);
            cache.put('large', largeFragment);
            const stats = cache.getStats();
            (0, globals_1.expect)(stats.memoryUsage).toBe(999999);
        });
    });
});
(0, globals_1.describe)('CacheFactory', () => {
    (0, globals_1.test)('should create named cache instances', () => {
        const cache1 = lru_cache_1.CacheFactory.createFragmentCache('test-cache-1');
        const cache2 = lru_cache_1.CacheFactory.createFragmentCache('test-cache-2');
        (0, globals_1.expect)(cache1).not.toBe(cache2);
        (0, globals_1.expect)(lru_cache_1.CacheFactory.getCache('test-cache-1')).toBe(cache1);
        (0, globals_1.expect)(lru_cache_1.CacheFactory.getCache('test-cache-2')).toBe(cache2);
    });
    (0, globals_1.test)('should return same instance for same name', () => {
        const cache1 = lru_cache_1.CacheFactory.createFragmentCache('same-name');
        const cache2 = lru_cache_1.CacheFactory.createFragmentCache('same-name');
        (0, globals_1.expect)(cache1).toBe(cache2);
    });
    (0, globals_1.test)('should remove cache instances', () => {
        lru_cache_1.CacheFactory.createFragmentCache('removable-cache');
        (0, globals_1.expect)(lru_cache_1.CacheFactory.getCache('removable-cache')).not.toBe(null);
        const removed = lru_cache_1.CacheFactory.removeCache('removable-cache');
        (0, globals_1.expect)(removed).toBe(true);
        (0, globals_1.expect)(lru_cache_1.CacheFactory.getCache('removable-cache')).toBe(null);
    });
    (0, globals_1.test)('should get all cache instances', () => {
        // Clear any existing caches
        const existing = lru_cache_1.CacheFactory.getAllCaches();
        existing.forEach((_, name) => lru_cache_1.CacheFactory.removeCache(name));
        lru_cache_1.CacheFactory.createFragmentCache('cache-1');
        lru_cache_1.CacheFactory.createFragmentCache('cache-2');
        const allCaches = lru_cache_1.CacheFactory.getAllCaches();
        (0, globals_1.expect)(allCaches.size).toBe(2);
        (0, globals_1.expect)(allCaches.has('cache-1')).toBe(true);
        (0, globals_1.expect)(allCaches.has('cache-2')).toBe(true);
    });
    (0, globals_1.test)('should handle custom configuration', () => {
        const customCache = lru_cache_1.CacheFactory.createFragmentCache('custom-cache', {
            maxSize: 100,
            ttl: 300000,
            evictionPolicy: 'priority-aware'
        });
        const stats = customCache.getStats();
        (0, globals_1.expect)(stats.maxSize).toBe(100);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,