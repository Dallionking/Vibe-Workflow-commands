{"file":"/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/__tests__/lru-cache.test.ts","mappings":"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","names":[],"sources":["/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/__tests__/lru-cache.test.ts"],"sourcesContent":["/**\n * LRU Cache Test Suite\n * Tests for LRUCache implementation with priority-aware eviction\n */\n\nimport { describe, test, expect, beforeEach } from '@jest/globals';\nimport { LRUCache, CacheFactory } from '../cache/lru-cache';\nimport { ContextPriority, ContextFragment, ContextFragmentType, ContextMetadata, ContextSource, FragmentValidation } from '../types/context.types';\n\n// Mock ContextFragment for testing\ninterface MockContextFragment extends ContextFragment {\n  readonly id: string;\n  readonly type: ContextFragmentType;\n  content: string;\n  priority: ContextPriority;\n  tokenEstimate: number;\n  metadata: ContextMetadata;\n  validation: FragmentValidation;\n}\n\nfunction createMockFragment(\n  id: string, \n  content: string = 'test content', \n  priority: ContextPriority = ContextPriority.MEDIUM,\n  tokenEstimate: number = 100\n): MockContextFragment {\n  return {\n    id,\n    type: 'task-context' as ContextFragmentType,\n    content,\n    priority,\n    tokenEstimate,\n    metadata: {\n      source: { type: 'task', taskId: id, taskType: 'testing' } as ContextSource,\n      priority,\n      tags: ['test'],\n      dependencies: [],\n      created: Date.now(),\n      lastModified: Date.now()\n    },\n    validation: {\n      isValid: true,\n      errors: [],\n      warnings: [],\n      lastValidated: Date.now()\n    }\n  };\n}\n\ndescribe('LRUCache', () => {\n  let cache: LRUCache<MockContextFragment>;\n\n  beforeEach(() => {\n    cache = new LRUCache<MockContextFragment>({\n      maxSize: 5,\n      ttl: 60000, // 1 minute\n      strategy: 'lru',\n      evictionPolicy: 'strict-lru'\n    });\n  });\n\n  describe('Basic Operations', () => {\n    test('should put and get items', () => {\n      const fragment = createMockFragment('test-1');\n      \n      cache.put('test-1', fragment);\n      const retrieved = cache.get('test-1');\n      \n      expect(retrieved).toBe(fragment);\n      expect(cache.has('test-1')).toBe(true);\n    });\n\n    test('should return null for non-existent items', () => {\n      const result = cache.get('non-existent');\n      expect(result).toBe(null);\n      expect(cache.has('non-existent')).toBe(false);\n    });\n\n    test('should remove items', () => {\n      const fragment = createMockFragment('test-1');\n      \n      cache.put('test-1', fragment);\n      expect(cache.has('test-1')).toBe(true);\n      \n      const removed = cache.remove('test-1');\n      expect(removed).toBe(true);\n      expect(cache.has('test-1')).toBe(false);\n      expect(cache.get('test-1')).toBe(null);\n    });\n\n    test('should return false when removing non-existent item', () => {\n      const removed = cache.remove('non-existent');\n      expect(removed).toBe(false);\n    });\n\n    test('should clear all items', () => {\n      cache.put('test-1', createMockFragment('test-1'));\n      cache.put('test-2', createMockFragment('test-2'));\n      \n      expect(cache.getStats().currentSize).toBe(2);\n      \n      cache.clear();\n      \n      expect(cache.getStats().currentSize).toBe(0);\n      expect(cache.has('test-1')).toBe(false);\n      expect(cache.has('test-2')).toBe(false);\n    });\n  });\n\n  describe('LRU Behavior', () => {\n    test('should maintain LRU order', () => {\n      // Fill cache to capacity\n      for (let i = 1; i <= 5; i++) {\n        cache.put(`test-${i}`, createMockFragment(`test-${i}`));\n      }\n      \n      expect(cache.getStats().currentSize).toBe(5);\n      \n      // Add one more item, should evict least recently used\n      cache.put('test-6', createMockFragment('test-6'));\n      \n      expect(cache.getStats().currentSize).toBe(5);\n      expect(cache.has('test-1')).toBe(false); // Should be evicted\n      expect(cache.has('test-6')).toBe(true);   // Should be added\n    });\n\n    test('should update LRU order on access', () => {\n      // Fill cache\n      for (let i = 1; i <= 5; i++) {\n        cache.put(`test-${i}`, createMockFragment(`test-${i}`));\n      }\n      \n      // Access test-1 to make it most recently used\n      cache.get('test-1');\n      \n      // Add new item, should evict test-2 (now least recently used)\n      cache.put('test-6', createMockFragment('test-6'));\n      \n      expect(cache.has('test-1')).toBe(true);  // Should still be there\n      expect(cache.has('test-2')).toBe(false); // Should be evicted\n      expect(cache.has('test-6')).toBe(true);  // Should be added\n    });\n  });\n\n  describe('Priority-Aware Eviction', () => {\n    beforeEach(() => {\n      cache = new LRUCache<MockContextFragment>({\n        maxSize: 3,\n        ttl: 60000,\n        strategy: 'priority-weighted',\n        evictionPolicy: 'priority-aware'\n      });\n    });\n\n    test('should prefer evicting low priority items', () => {\n      const criticalFragment = createMockFragment('critical', 'critical content', ContextPriority.CRITICAL);\n      const highFragment = createMockFragment('high', 'high content', ContextPriority.HIGH);\n      const lowFragment = createMockFragment('low', 'low content', ContextPriority.LOW);\n      \n      cache.put('critical', criticalFragment);\n      cache.put('high', highFragment);\n      cache.put('low', lowFragment);\n      \n      // Add another item, should evict the low priority one\n      const mediumFragment = createMockFragment('medium', 'medium content', ContextPriority.MEDIUM);\n      cache.put('medium', mediumFragment);\n      \n      expect(cache.has('critical')).toBe(true);\n      expect(cache.has('high')).toBe(true);\n      expect(cache.has('medium')).toBe(true);\n      expect(cache.has('low')).toBe(false); // Should be evicted\n    });\n  });\n\n  describe('TTL (Time To Live)', () => {\n    beforeEach(() => {\n      cache = new LRUCache<MockContextFragment>({\n        maxSize: 5,\n        ttl: 100, // 100ms\n        strategy: 'lru',\n        evictionPolicy: 'strict-lru'\n      });\n    });\n\n    test('should expire items after TTL', async () => {\n      const fragment = createMockFragment('test-1');\n      cache.put('test-1', fragment);\n      \n      expect(cache.has('test-1')).toBe(true);\n      \n      // Wait for expiration\n      await new Promise(resolve => setTimeout(resolve, 150));\n      \n      expect(cache.has('test-1')).toBe(false);\n      expect(cache.get('test-1')).toBe(null);\n    });\n\n    test('should clean up expired items', async () => {\n      cache.put('test-1', createMockFragment('test-1'));\n      cache.put('test-2', createMockFragment('test-2'));\n      \n      expect(cache.getStats().currentSize).toBe(2);\n      \n      // Wait for expiration\n      await new Promise(resolve => setTimeout(resolve, 150));\n      \n      const cleanedCount = cache.cleanup();\n      \n      expect(cleanedCount).toBe(2);\n      expect(cache.getStats().currentSize).toBe(0);\n    });\n  });\n\n  describe('Statistics', () => {\n    test('should track hit and miss statistics', () => {\n      const fragment = createMockFragment('test-1');\n      cache.put('test-1', fragment);\n      \n      // Test hits\n      cache.get('test-1'); // hit\n      cache.get('test-1'); // hit\n      \n      // Test misses\n      cache.get('non-existent-1'); // miss\n      cache.get('non-existent-2'); // miss\n      \n      const stats = cache.getStats();\n      expect(stats.hits).toBe(2);\n      expect(stats.misses).toBe(2);\n      expect(stats.totalAccesses).toBe(4);\n      expect(stats.hitRate).toBe(50);\n    });\n\n    test('should track eviction statistics', () => {\n      // Fill cache beyond capacity to trigger evictions\n      for (let i = 1; i <= 7; i++) {\n        cache.put(`test-${i}`, createMockFragment(`test-${i}`));\n      }\n      \n      const stats = cache.getStats();\n      expect(stats.evictions).toBe(2); // Should have 2 evictions (7 - 5)\n      expect(stats.currentSize).toBe(5);\n    });\n\n    test('should track memory usage', () => {\n      const fragment1 = createMockFragment('test-1', 'content', ContextPriority.MEDIUM, 100);\n      const fragment2 = createMockFragment('test-2', 'content', ContextPriority.MEDIUM, 150);\n      \n      cache.put('test-1', fragment1);\n      cache.put('test-2', fragment2);\n      \n      const stats = cache.getStats();\n      expect(stats.memoryUsage).toBe(250); // 100 + 150 tokens\n    });\n  });\n\n  describe('Configuration', () => {\n    test('should resize cache capacity', () => {\n      // Fill cache to original capacity (5)\n      for (let i = 1; i <= 5; i++) {\n        cache.put(`test-${i}`, createMockFragment(`test-${i}`));\n      }\n      \n      expect(cache.getStats().currentSize).toBe(5);\n      \n      // Resize to smaller capacity\n      cache.resize(3);\n      \n      expect(cache.getStats().maxSize).toBe(3);\n      expect(cache.getStats().currentSize).toBeLessThanOrEqual(3);\n    });\n\n    test('should update configuration', () => {\n      const originalStats = cache.getStats();\n      \n      cache.updateConfig({\n        maxSize: 10,\n        ttl: 120000,\n        strategy: 'lfu'\n      });\n      \n      const newStats = cache.getStats();\n      expect(newStats.maxSize).toBe(10);\n      expect(newStats.maxSize).not.toBe(originalStats.maxSize);\n    });\n  });\n\n  describe('Export/Import', () => {\n    test('should export cache state', () => {\n      const fragment1 = createMockFragment('test-1');\n      const fragment2 = createMockFragment('test-2');\n      \n      cache.put('test-1', fragment1);\n      cache.put('test-2', fragment2);\n      \n      const exported = cache.export();\n      \n      expect(exported.entries).toHaveLength(2);\n      expect(exported.accessOrder).toContain('test-1');\n      expect(exported.accessOrder).toContain('test-2');\n      expect(exported.config).toBeDefined();\n      expect(exported.stats).toBeDefined();\n      expect(exported.timestamp).toBeDefined();\n    });\n\n    test('should import cache state', () => {\n      const fragment = createMockFragment('test-1');\n      cache.put('test-1', fragment);\n      \n      const exported = cache.export();\n      \n      // Create new cache and import\n      const newCache = new LRUCache<MockContextFragment>();\n      newCache.import(exported);\n      \n      expect(newCache.has('test-1')).toBe(true);\n      expect(newCache.get('test-1')).toEqual(fragment);\n    });\n  });\n\n  describe('Edge Cases', () => {\n    test('should handle zero capacity', () => {\n      const zeroCache = new LRUCache<MockContextFragment>({ maxSize: 0 });\n      \n      zeroCache.put('test-1', createMockFragment('test-1'));\n      \n      expect(zeroCache.has('test-1')).toBe(false);\n      expect(zeroCache.getStats().currentSize).toBe(0);\n    });\n\n    test('should handle duplicate keys', () => {\n      const fragment1 = createMockFragment('test-1', 'content 1');\n      const fragment2 = createMockFragment('test-1', 'content 2');\n      \n      cache.put('test-1', fragment1);\n      cache.put('test-1', fragment2); // Overwrite\n      \n      const retrieved = cache.get('test-1');\n      expect(retrieved?.content).toBe('content 2');\n      expect(cache.getStats().currentSize).toBe(1);\n    });\n\n    test('should handle large token estimates', () => {\n      const largeFragment = createMockFragment('large', 'content', ContextPriority.MEDIUM, 999999);\n      \n      cache.put('large', largeFragment);\n      \n      const stats = cache.getStats();\n      expect(stats.memoryUsage).toBe(999999);\n    });\n  });\n});\n\ndescribe('CacheFactory', () => {\n  test('should create named cache instances', () => {\n    const cache1 = CacheFactory.createFragmentCache('test-cache-1');\n    const cache2 = CacheFactory.createFragmentCache('test-cache-2');\n    \n    expect(cache1).not.toBe(cache2);\n    expect(CacheFactory.getCache('test-cache-1')).toBe(cache1);\n    expect(CacheFactory.getCache('test-cache-2')).toBe(cache2);\n  });\n\n  test('should return same instance for same name', () => {\n    const cache1 = CacheFactory.createFragmentCache('same-name');\n    const cache2 = CacheFactory.createFragmentCache('same-name');\n    \n    expect(cache1).toBe(cache2);\n  });\n\n  test('should remove cache instances', () => {\n    CacheFactory.createFragmentCache('removable-cache');\n    \n    expect(CacheFactory.getCache('removable-cache')).not.toBe(null);\n    \n    const removed = CacheFactory.removeCache('removable-cache');\n    expect(removed).toBe(true);\n    expect(CacheFactory.getCache('removable-cache')).toBe(null);\n  });\n\n  test('should get all cache instances', () => {\n    // Clear any existing caches\n    const existing = CacheFactory.getAllCaches();\n    existing.forEach((_, name) => CacheFactory.removeCache(name));\n    \n    CacheFactory.createFragmentCache('cache-1');\n    CacheFactory.createFragmentCache('cache-2');\n    \n    const allCaches = CacheFactory.getAllCaches();\n    expect(allCaches.size).toBe(2);\n    expect(allCaches.has('cache-1')).toBe(true);\n    expect(allCaches.has('cache-2')).toBe(true);\n  });\n\n  test('should handle custom configuration', () => {\n    const customCache = CacheFactory.createFragmentCache('custom-cache', {\n      maxSize: 100,\n      ttl: 300000,\n      evictionPolicy: 'priority-aware'\n    });\n    \n    const stats = customCache.getStats();\n    expect(stats.maxSize).toBe(100);\n  });\n});"],"version":3}