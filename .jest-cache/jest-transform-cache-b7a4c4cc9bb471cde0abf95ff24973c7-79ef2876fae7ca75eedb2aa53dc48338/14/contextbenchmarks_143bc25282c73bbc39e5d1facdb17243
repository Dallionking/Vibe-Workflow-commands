5587845d849b5c98d2cf7e53cb4db824
"use strict";

/**
 * Context Engineering System Benchmarks
 * Comprehensive performance testing for all context components
 */
/* istanbul ignore next */
function cov_1gihfhbuw2() {
  var path = "/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/performance/context-benchmarks.ts";
  var hash = "9eb8fe4e386c15900dfc46e16c728130c9b269e4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/performance/context-benchmarks.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 62
        }
      },
      "1": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 60
        }
      },
      "2": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 38
        }
      },
      "3": {
        start: {
          line: 9,
          column: 30
        },
        end: {
          line: 9,
          column: 62
        }
      },
      "4": {
        start: {
          line: 10,
          column: 27
        },
        end: {
          line: 10,
          column: 66
        }
      },
      "5": {
        start: {
          line: 11,
          column: 28
        },
        end: {
          line: 11,
          column: 68
        }
      },
      "6": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "7": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 13,
          column: 60
        }
      },
      "8": {
        start: {
          line: 14,
          column: 27
        },
        end: {
          line: 14,
          column: 69
        }
      },
      "9": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 15,
          column: 57
        }
      },
      "10": {
        start: {
          line: 19,
          column: 23
        },
        end: {
          line: 25,
          column: 1
        }
      },
      "11": {
        start: {
          line: 26,
          column: 0
        },
        end: {
          line: 26,
          column: 40
        }
      },
      "12": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 70
        }
      },
      "13": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 71
        }
      },
      "14": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 68
        }
      },
      "15": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 77
        }
      },
      "16": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 66
        }
      },
      "17": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 72
        }
      },
      "18": {
        start: {
          line: 43,
          column: 28
        },
        end: {
          line: 43,
          column: 60
        }
      },
      "19": {
        start: {
          line: 44,
          column: 24
        },
        end: {
          line: 44,
          column: 33
        }
      },
      "20": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 71
        }
      },
      "21": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "22": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 96
        }
      },
      "23": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 100
        }
      },
      "24": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 94
        }
      },
      "25": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 80
        }
      },
      "26": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 80
        }
      },
      "27": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 90
        }
      },
      "28": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 94
        }
      },
      "29": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 96
        }
      },
      "30": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 96
        }
      },
      "31": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 100
        }
      },
      "32": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 98
        }
      },
      "33": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 94
        }
      },
      "34": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 92
        }
      },
      "35": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 94
        }
      },
      "36": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 70
        }
      },
      "37": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 56
        }
      },
      "38": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 24
        }
      },
      "39": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 23
        }
      },
      "40": {
        start: {
          line: 78,
          column: 24
        },
        end: {
          line: 78,
          column: 64
        }
      },
      "41": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 81,
          column: 63
        }
      },
      "42": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 179
        }
      },
      "43": {
        start: {
          line: 87,
          column: 26
        },
        end: {
          line: 87,
          column: 92
        }
      },
      "44": {
        start: {
          line: 88,
          column: 20
        },
        end: {
          line: 88,
          column: 21
        }
      },
      "45": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 98,
          column: 63
        }
      },
      "46": {
        start: {
          line: 90,
          column: 29
        },
        end: {
          line: 90,
          column: 64
        }
      },
      "47": {
        start: {
          line: 92,
          column: 28
        },
        end: {
          line: 94,
          column: 42
        }
      },
      "48": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 20
        }
      },
      "49": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 50
        }
      },
      "50": {
        start: {
          line: 104,
          column: 24
        },
        end: {
          line: 104,
          column: 64
        }
      },
      "51": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 107,
          column: 63
        }
      },
      "52": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 61
        }
      },
      "53": {
        start: {
          line: 113,
          column: 26
        },
        end: {
          line: 113,
          column: 92
        }
      },
      "54": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 114,
          column: 21
        }
      },
      "55": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 119,
          column: 63
        }
      },
      "56": {
        start: {
          line: 116,
          column: 29
        },
        end: {
          line: 116,
          column: 64
        }
      },
      "57": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 53
        }
      },
      "58": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 20
        }
      },
      "59": {
        start: {
          line: 126,
          column: 26
        },
        end: {
          line: 126,
          column: 92
        }
      },
      "60": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "61": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 49
        }
      },
      "62": {
        start: {
          line: 130,
          column: 20
        },
        end: {
          line: 130,
          column: 21
        }
      },
      "63": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 134,
          column: 63
        }
      },
      "64": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 66
        }
      },
      "65": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 20
        }
      },
      "66": {
        start: {
          line: 140,
          column: 27
        },
        end: {
          line: 140,
          column: 80
        }
      },
      "67": {
        start: {
          line: 141,
          column: 26
        },
        end: {
          line: 141,
          column: 74
        }
      },
      "68": {
        start: {
          line: 142,
          column: 20
        },
        end: {
          line: 142,
          column: 21
        }
      },
      "69": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 147,
          column: 63
        }
      },
      "70": {
        start: {
          line: 144,
          column: 29
        },
        end: {
          line: 144,
          column: 64
        }
      },
      "71": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 53
        }
      },
      "72": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 20
        }
      },
      "73": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 155,
          column: 63
        }
      },
      "74": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 51
        }
      },
      "75": {
        start: {
          line: 161,
          column: 26
        },
        end: {
          line: 161,
          column: 92
        }
      },
      "76": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 164,
          column: 63
        }
      },
      "77": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 57
        }
      },
      "78": {
        start: {
          line: 170,
          column: 26
        },
        end: {
          line: 170,
          column: 92
        }
      },
      "79": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 178,
          column: 63
        }
      },
      "80": {
        start: {
          line: 173,
          column: 32
        },
        end: {
          line: 173,
          column: 86
        }
      },
      "81": {
        start: {
          line: 173,
          column: 61
        },
        end: {
          line: 173,
          column: 82
        }
      },
      "82": {
        start: {
          line: 174,
          column: 27
        },
        end: {
          line: 174,
          column: 31
        }
      },
      "83": {
        start: {
          line: 175,
          column: 33
        },
        end: {
          line: 175,
          column: 54
        }
      },
      "84": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 76
        }
      },
      "85": {
        start: {
          line: 184,
          column: 26
        },
        end: {
          line: 184,
          column: 92
        }
      },
      "86": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 187,
          column: 63
        }
      },
      "87": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 50
        }
      },
      "88": {
        start: {
          line: 193,
          column: 26
        },
        end: {
          line: 193,
          column: 74
        }
      },
      "89": {
        start: {
          line: 194,
          column: 20
        },
        end: {
          line: 194,
          column: 21
        }
      },
      "90": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 198,
          column: 63
        }
      },
      "91": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 166
        }
      },
      "92": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 20
        }
      },
      "93": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "94": {
        start: {
          line: 205,
          column: 21
        },
        end: {
          line: 205,
          column: 22
        }
      },
      "95": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 115
        }
      },
      "96": {
        start: {
          line: 208,
          column: 20
        },
        end: {
          line: 208,
          column: 21
        }
      },
      "97": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 212,
          column: 63
        }
      },
      "98": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 55
        }
      },
      "99": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 20
        }
      },
      "100": {
        start: {
          line: 218,
          column: 25
        },
        end: {
          line: 218,
          column: 71
        }
      },
      "101": {
        start: {
          line: 219,
          column: 20
        },
        end: {
          line: 219,
          column: 21
        }
      },
      "102": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 224,
          column: 63
        }
      },
      "103": {
        start: {
          line: 221,
          column: 28
        },
        end: {
          line: 221,
          column: 61
        }
      },
      "104": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 59
        }
      },
      "105": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 20
        }
      },
      "106": {
        start: {
          line: 230,
          column: 26
        },
        end: {
          line: 230,
          column: 74
        }
      },
      "107": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 243,
          column: 63
        }
      },
      "108": {
        start: {
          line: 233,
          column: 38
        },
        end: {
          line: 233,
          column: 80
        }
      },
      "109": {
        start: {
          line: 233,
          column: 59
        },
        end: {
          line: 233,
          column: 79
        }
      },
      "110": {
        start: {
          line: 234,
          column: 32
        },
        end: {
          line: 234,
          column: 86
        }
      },
      "111": {
        start: {
          line: 234,
          column: 61
        },
        end: {
          line: 234,
          column: 82
        }
      },
      "112": {
        start: {
          line: 235,
          column: 33
        },
        end: {
          line: 235,
          column: 52
        }
      },
      "113": {
        start: {
          line: 236,
          column: 37
        },
        end: {
          line: 240,
          column: 13
        }
      },
      "114": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 63
        }
      },
      "115": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 45
        }
      },
      "116": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 44
        }
      },
      "117": {
        start: {
          line: 261,
          column: 26
        },
        end: {
          line: 261,
          column: 28
        }
      },
      "118": {
        start: {
          line: 262,
          column: 24
        },
        end: {
          line: 262,
          column: 50
        }
      },
      "119": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 267,
          column: 9
        }
      },
      "120": {
        start: {
          line: 263,
          column: 21
        },
        end: {
          line: 263,
          column: 22
        }
      },
      "121": {
        start: {
          line: 264,
          column: 29
        },
        end: {
          line: 264,
          column: 134
        }
      },
      "122": {
        start: {
          line: 265,
          column: 29
        },
        end: {
          line: 265,
          column: 173
        }
      },
      "123": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 37
        }
      },
      "124": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 25
        }
      },
      "125": {
        start: {
          line: 274,
          column: 21
        },
        end: {
          line: 274,
          column: 74
        }
      },
      "126": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "127": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 38
        }
      },
      "128": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 39
        }
      },
      "129": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 40
        }
      },
      "130": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 283,
          column: 39
        }
      },
      "131": {
        start: {
          line: 287,
          column: 0
        },
        end: {
          line: 287,
          column: 46
        }
      },
      "132": {
        start: {
          line: 292,
          column: 23
        },
        end: {
          line: 292,
          column: 46
        }
      },
      "133": {
        start: {
          line: 293,
          column: 4
        },
        end: {
          line: 293,
          column: 67
        }
      },
      "134": {
        start: {
          line: 294,
          column: 4
        },
        end: {
          line: 294,
          column: 34
        }
      },
      "135": {
        start: {
          line: 295,
          column: 4
        },
        end: {
          line: 295,
          column: 65
        }
      },
      "136": {
        start: {
          line: 296,
          column: 4
        },
        end: {
          line: 296,
          column: 59
        }
      },
      "137": {
        start: {
          line: 297,
          column: 4
        },
        end: {
          line: 297,
          column: 69
        }
      },
      "138": {
        start: {
          line: 298,
          column: 4
        },
        end: {
          line: 298,
          column: 65
        }
      },
      "139": {
        start: {
          line: 299,
          column: 4
        },
        end: {
          line: 299,
          column: 20
        }
      },
      "140": {
        start: {
          line: 300,
          column: 22
        },
        end: {
          line: 300,
          column: 32
        }
      },
      "141": {
        start: {
          line: 301,
          column: 4
        },
        end: {
          line: 326,
          column: 5
        }
      },
      "142": {
        start: {
          line: 302,
          column: 24
        },
        end: {
          line: 302,
          column: 59
        }
      },
      "143": {
        start: {
          line: 303,
          column: 25
        },
        end: {
          line: 303,
          column: 47
        }
      },
      "144": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 304,
          column: 86
        }
      },
      "145": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 306,
          column: 47
        }
      },
      "146": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 309,
          column: 9
        }
      },
      "147": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 308,
          column: 120
        }
      },
      "148": {
        start: {
          line: 311,
          column: 23
        },
        end: {
          line: 311,
          column: 50
        }
      },
      "149": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 35
        }
      },
      "150": {
        start: {
          line: 314,
          column: 23
        },
        end: {
          line: 314,
          column: 56
        }
      },
      "151": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 321,
          column: 9
        }
      },
      "152": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 62
        }
      },
      "153": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 63
        }
      },
      "154": {
        start: {
          line: 317,
          column: 36
        },
        end: {
          line: 317,
          column: 61
        }
      },
      "155": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 63
        }
      },
      "156": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 324,
          column: 52
        }
      },
      "157": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 24
        }
      },
      "158": {
        start: {
          line: 332,
          column: 19
        },
        end: {
          line: 332,
          column: 21
        }
      },
      "159": {
        start: {
          line: 333,
          column: 4
        },
        end: {
          line: 350,
          column: 5
        }
      },
      "160": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "161": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 91
        }
      },
      "162": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 341,
          column: 9
        }
      },
      "163": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 128
        }
      },
      "164": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 345,
          column: 9
        }
      },
      "165": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 95
        }
      },
      "166": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 349,
          column: 9
        }
      },
      "167": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 106
        }
      },
      "168": {
        start: {
          line: 351,
          column: 4
        },
        end: {
          line: 351,
          column: 18
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 18
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 31
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 40
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 42
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 44
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 77
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 79,
            column: 65
          },
          end: {
            line: 79,
            column: 66
          }
        },
        loc: {
          start: {
            line: 79,
            column: 71
          },
          end: {
            line: 81,
            column: 9
          }
        },
        line: 79
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        },
        loc: {
          start: {
            line: 86,
            column: 46
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 86
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 89,
            column: 67
          },
          end: {
            line: 89,
            column: 68
          }
        },
        loc: {
          start: {
            line: 89,
            column: 73
          },
          end: {
            line: 98,
            column: 9
          }
        },
        line: 89
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 43
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 103
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 105,
            column: 64
          },
          end: {
            line: 105,
            column: 65
          }
        },
        loc: {
          start: {
            line: 105,
            column: 70
          },
          end: {
            line: 107,
            column: 9
          }
        },
        line: 105
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        loc: {
          start: {
            line: 112,
            column: 36
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 112
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 115,
            column: 57
          },
          end: {
            line: 115,
            column: 58
          }
        },
        loc: {
          start: {
            line: 115,
            column: 63
          },
          end: {
            line: 119,
            column: 9
          }
        },
        line: 115
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        loc: {
          start: {
            line: 124,
            column: 36
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 124
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 127,
            column: 26
          },
          end: {
            line: 127,
            column: 27
          }
        },
        loc: {
          start: {
            line: 127,
            column: 43
          },
          end: {
            line: 129,
            column: 9
          }
        },
        line: 127
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 131,
            column: 57
          },
          end: {
            line: 131,
            column: 58
          }
        },
        loc: {
          start: {
            line: 131,
            column: 63
          },
          end: {
            line: 134,
            column: 9
          }
        },
        line: 131
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        loc: {
          start: {
            line: 139,
            column: 41
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 139
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 143,
            column: 62
          },
          end: {
            line: 143,
            column: 63
          }
        },
        loc: {
          start: {
            line: 143,
            column: 68
          },
          end: {
            line: 147,
            column: 9
          }
        },
        line: 143
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        loc: {
          start: {
            line: 152,
            column: 43
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 152
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 153,
            column: 64
          },
          end: {
            line: 153,
            column: 65
          }
        },
        loc: {
          start: {
            line: 153,
            column: 76
          },
          end: {
            line: 155,
            column: 9
          }
        },
        line: 153
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 160,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        },
        loc: {
          start: {
            line: 160,
            column: 44
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 160
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 162,
            column: 65
          },
          end: {
            line: 162,
            column: 66
          }
        },
        loc: {
          start: {
            line: 162,
            column: 71
          },
          end: {
            line: 164,
            column: 9
          }
        },
        line: 162
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        },
        loc: {
          start: {
            line: 169,
            column: 49
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 169
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 171,
            column: 71
          },
          end: {
            line: 171,
            column: 72
          }
        },
        loc: {
          start: {
            line: 171,
            column: 77
          },
          end: {
            line: 178,
            column: 9
          }
        },
        line: 171
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 173,
            column: 49
          },
          end: {
            line: 173,
            column: 50
          }
        },
        loc: {
          start: {
            line: 173,
            column: 61
          },
          end: {
            line: 173,
            column: 82
          }
        },
        line: 173
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        loc: {
          start: {
            line: 183,
            column: 46
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 183
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 185,
            column: 67
          },
          end: {
            line: 185,
            column: 68
          }
        },
        loc: {
          start: {
            line: 185,
            column: 73
          },
          end: {
            line: 187,
            column: 9
          }
        },
        line: 185
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 192,
            column: 4
          },
          end: {
            line: 192,
            column: 5
          }
        },
        loc: {
          start: {
            line: 192,
            column: 45
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 192
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 195,
            column: 66
          },
          end: {
            line: 195,
            column: 67
          }
        },
        loc: {
          start: {
            line: 195,
            column: 72
          },
          end: {
            line: 198,
            column: 9
          }
        },
        line: 195
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 203,
            column: 5
          }
        },
        loc: {
          start: {
            line: 203,
            column: 43
          },
          end: {
            line: 213,
            column: 5
          }
        },
        line: 203
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 209,
            column: 64
          },
          end: {
            line: 209,
            column: 65
          }
        },
        loc: {
          start: {
            line: 209,
            column: 70
          },
          end: {
            line: 212,
            column: 9
          }
        },
        line: 209
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 217,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        },
        loc: {
          start: {
            line: 217,
            column: 42
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 217
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 220,
            column: 74
          },
          end: {
            line: 220,
            column: 75
          }
        },
        loc: {
          start: {
            line: 220,
            column: 86
          },
          end: {
            line: 224,
            column: 9
          }
        },
        line: 220
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 229,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        loc: {
          start: {
            line: 229,
            column: 43
          },
          end: {
            line: 244,
            column: 5
          }
        },
        line: 229
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 231,
            column: 64
          },
          end: {
            line: 231,
            column: 65
          }
        },
        loc: {
          start: {
            line: 231,
            column: 70
          },
          end: {
            line: 243,
            column: 9
          }
        },
        line: 231
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 233,
            column: 54
          },
          end: {
            line: 233,
            column: 55
          }
        },
        loc: {
          start: {
            line: 233,
            column: 59
          },
          end: {
            line: 233,
            column: 79
          }
        },
        line: 233
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 234,
            column: 49
          },
          end: {
            line: 234,
            column: 50
          }
        },
        loc: {
          start: {
            line: 234,
            column: 61
          },
          end: {
            line: 234,
            column: 82
          }
        },
        line: 234
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        loc: {
          start: {
            line: 248,
            column: 21
          },
          end: {
            line: 250,
            column: 5
          }
        },
        line: 248
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        },
        loc: {
          start: {
            line: 254,
            column: 20
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 254
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        },
        loc: {
          start: {
            line: 260,
            column: 37
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 260
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 273,
            column: 4
          },
          end: {
            line: 273,
            column: 5
          }
        },
        loc: {
          start: {
            line: 273,
            column: 26
          },
          end: {
            line: 285,
            column: 5
          }
        },
        line: 273
      },
      "38": {
        name: "runBenchmarks",
        decl: {
          start: {
            line: 291,
            column: 15
          },
          end: {
            line: 291,
            column: 28
          }
        },
        loc: {
          start: {
            line: 291,
            column: 31
          },
          end: {
            line: 327,
            column: 1
          }
        },
        line: 291
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 317,
            column: 27
          },
          end: {
            line: 317,
            column: 28
          }
        },
        loc: {
          start: {
            line: 317,
            column: 36
          },
          end: {
            line: 317,
            column: 61
          }
        },
        line: 317
      },
      "40": {
        name: "analyzePerformanceIssues",
        decl: {
          start: {
            line: 331,
            column: 9
          },
          end: {
            line: 331,
            column: 33
          }
        },
        loc: {
          start: {
            line: 331,
            column: 43
          },
          end: {
            line: 352,
            column: 1
          }
        },
        line: 331
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 42,
            column: 27
          },
          end: {
            line: 42,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 42,
            column: 36
          },
          end: {
            line: 42,
            column: 38
          }
        }],
        line: 42
      },
      "1": {
        loc: {
          start: {
            line: 92,
            column: 28
          },
          end: {
            line: 94,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 28
          },
          end: {
            line: 92,
            column: 55
          }
        }, {
          start: {
            line: 93,
            column: 16
          },
          end: {
            line: 93,
            column: 43
          }
        }, {
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 94,
            column: 42
          }
        }],
        line: 92
      },
      "2": {
        loc: {
          start: {
            line: 196,
            column: 114
          },
          end: {
            line: 196,
            column: 153
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 196,
            column: 132
          },
          end: {
            line: 196,
            column: 141
          }
        }, {
          start: {
            line: 196,
            column: 144
          },
          end: {
            line: 196,
            column: 153
          }
        }],
        line: 196
      },
      "3": {
        loc: {
          start: {
            line: 237,
            column: 24
          },
          end: {
            line: 237,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 24
          },
          end: {
            line: 237,
            column: 41
          }
        }, {
          start: {
            line: 237,
            column: 45
          },
          end: {
            line: 237,
            column: 57
          }
        }],
        line: 237
      },
      "4": {
        loc: {
          start: {
            line: 238,
            column: 24
          },
          end: {
            line: 238,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 238,
            column: 44
          },
          end: {
            line: 238,
            column: 46
          }
        }, {
          start: {
            line: 238,
            column: 49
          },
          end: {
            line: 238,
            column: 79
          }
        }],
        line: 238
      },
      "5": {
        loc: {
          start: {
            line: 239,
            column: 26
          },
          end: {
            line: 239,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 239,
            column: 41
          },
          end: {
            line: 239,
            column: 43
          }
        }, {
          start: {
            line: 239,
            column: 46
          },
          end: {
            line: 239,
            column: 71
          }
        }],
        line: 239
      },
      "6": {
        loc: {
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 284,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 277,
            column: 38
          }
        }, {
          start: {
            line: 278,
            column: 12
          },
          end: {
            line: 279,
            column: 39
          }
        }, {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 281,
            column: 40
          }
        }, {
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 283,
            column: 39
          }
        }],
        line: 275
      },
      "7": {
        loc: {
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        }, {
          start: {
            line: 319,
            column: 13
          },
          end: {
            line: 321,
            column: 9
          }
        }],
        line: 315
      },
      "8": {
        loc: {
          start: {
            line: 335,
            column: 8
          },
          end: {
            line: 337,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 335,
            column: 8
          },
          end: {
            line: 337,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 335
      },
      "9": {
        loc: {
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 341,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 341,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "10": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "11": {
        loc: {
          start: {
            line: 347,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 347
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    b: {
      "0": [0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/performance/context-benchmarks.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/performance/context-benchmarks.ts"],
      sourcesContent: ["/**\n * Context Engineering System Benchmarks\n * Comprehensive performance testing for all context components\n */\n\nimport { PerformanceMonitor } from './performance-monitor';\nimport { ContextFragmentFactory } from '../assembly/context-fragment';\nimport { ContextAssembler } from '../assembly/context-assembler';\nimport { LRUCache } from '../cache/lru-cache';\nimport { ContextMemoryManager } from '../memory/context-memory';\nimport { CommandContextProvider } from '../integration/command-provider';\nimport { ContextPriority, ContextFragment } from '../types/context.types';\n\n/**\n * Benchmark Configuration\n */\ninterface BenchmarkConfig {\n  samples: number;\n  warmup: number;\n  fragmentCount: number;\n  contentSize: 'small' | 'medium' | 'large';\n  enableMemoryLearning: boolean;\n}\n\n/**\n * Default benchmark configuration\n */\nconst DEFAULT_CONFIG: BenchmarkConfig = {\n  samples: 100,\n  warmup: 10,\n  fragmentCount: 50,\n  contentSize: 'medium',\n  enableMemoryLearning: true\n};\n\n/**\n * Context System Benchmark Suite\n */\nexport class ContextBenchmarks {\n  private monitor: PerformanceMonitor;\n  private factory: ContextFragmentFactory;\n  private assembler: ContextAssembler;\n  private cache: LRUCache<ContextFragment>;\n  private memory: ContextMemoryManager;\n  private provider: CommandContextProvider;\n\n  constructor() {\n    this.monitor = new PerformanceMonitor();\n    this.factory = new ContextFragmentFactory();\n    this.assembler = new ContextAssembler();\n    this.cache = new LRUCache({ maxSize: 1000, ttl: 60000 });\n    this.memory = new ContextMemoryManager();\n    this.provider = new CommandContextProvider();\n  }\n\n  /**\n   * Run all benchmarks\n   */\n  public async runAllBenchmarks(config: Partial<BenchmarkConfig> = {}): Promise<Map<string, any>> {\n    const finalConfig = { ...DEFAULT_CONFIG, ...config };\n    const results = new Map();\n\n    console.log('\uD83D\uDE80 Starting Context Engineering Benchmarks...\\n');\n\n    try {\n      // Fragment operations\n      results.set('fragment-creation', await this.benchmarkFragmentCreation(finalConfig));\n      results.set('fragment-validation', await this.benchmarkFragmentValidation(finalConfig));\n      results.set('token-estimation', await this.benchmarkTokenEstimation(finalConfig));\n\n      // Cache operations\n      results.set('cache-put', await this.benchmarkCachePut(finalConfig));\n      results.set('cache-get', await this.benchmarkCacheGet(finalConfig));\n      results.set('cache-eviction', await this.benchmarkCacheEviction(finalConfig));\n\n      // Context assembly\n      results.set('context-assembly', await this.benchmarkContextAssembly(finalConfig));\n      results.set('context-selection', await this.benchmarkContextSelection(finalConfig));\n      results.set('token-budget', await this.benchmarkTokenBudgetManagement(finalConfig));\n\n      // Memory & learning\n      results.set('pattern-recognition', await this.benchmarkPatternRecognition(finalConfig));\n      results.set('decision-recording', await this.benchmarkDecisionRecording(finalConfig));\n      results.set('memory-retrieval', await this.benchmarkMemoryRetrieval(finalConfig));\n\n      // Integration\n      results.set('command-context', await this.benchmarkCommandContext(finalConfig));\n      results.set('validation-gates', await this.benchmarkValidationGates(finalConfig));\n\n      console.log('\u2705 All benchmarks completed successfully!\\n');\n      \n    } catch (error) {\n      console.error('\u274C Benchmark failed:', error);\n      throw error;\n    }\n\n    return results;\n  }\n\n  /**\n   * Fragment creation benchmark\n   */\n  private async benchmarkFragmentCreation(config: BenchmarkConfig) {\n    const content = this.generateContent(config.contentSize);\n    \n    return await this.monitor.benchmark(\n      'Fragment Creation',\n      () => {\n        this.factory.createFragment(\n          'task-context',\n          content,\n          ContextPriority.MEDIUM,\n          { source: { type: 'task', taskId: 'test', taskType: 'implementation' } }\n        );\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Fragment validation benchmark\n   */\n  private async benchmarkFragmentValidation(config: BenchmarkConfig) {\n    const fragments = this.createTestFragments(config.fragmentCount, config.contentSize);\n    let index = 0;\n    \n    return await this.monitor.benchmark(\n      'Fragment Validation',\n      () => {\n        const fragment = fragments[index % fragments.length];\n        // Validate fragment by checking its properties\n        const isValid = fragment.validation.isValid && \n                        fragment.content.length > 0 &&\n                        fragment.tokenEstimate > 0;\n        index++;\n        // Store result for side effect\n        (global as any).lastValidationResult = isValid;\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Token estimation benchmark\n   */\n  private async benchmarkTokenEstimation(config: BenchmarkConfig) {\n    const content = this.generateContent(config.contentSize);\n    \n    return await this.monitor.benchmark(\n      'Token Estimation',\n      () => {\n        this.factory['tokenEstimator'].estimate(content);\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Cache put operation benchmark\n   */\n  private async benchmarkCachePut(config: BenchmarkConfig) {\n    const fragments = this.createTestFragments(config.fragmentCount, config.contentSize);\n    let index = 0;\n    \n    return await this.monitor.benchmark(\n      'Cache Put',\n      () => {\n        const fragment = fragments[index % fragments.length];\n        this.cache.put(`key-${index}`, fragment);\n        index++;\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Cache get operation benchmark\n   */\n  private async benchmarkCacheGet(config: BenchmarkConfig) {\n    // Pre-populate cache\n    const fragments = this.createTestFragments(config.fragmentCount, config.contentSize);\n    fragments.forEach((fragment, i) => {\n      this.cache.put(`key-${i}`, fragment);\n    });\n\n    let index = 0;\n    \n    return await this.monitor.benchmark(\n      'Cache Get',\n      () => {\n        this.cache.get(`key-${index % config.fragmentCount}`);\n        index++;\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Cache eviction benchmark\n   */\n  private async benchmarkCacheEviction(config: BenchmarkConfig) {\n    const smallCache = new LRUCache<ContextFragment>({ maxSize: 10, ttl: 60000 });\n    const fragments = this.createTestFragments(20, config.contentSize);\n    let index = 0;\n    \n    return await this.monitor.benchmark(\n      'Cache Eviction',\n      () => {\n        const fragment = fragments[index % fragments.length];\n        smallCache.put(`key-${index}`, fragment); // Will trigger eviction\n        index++;\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Context assembly benchmark\n   */\n  private async benchmarkContextAssembly(config: BenchmarkConfig) {\n    return await this.monitor.benchmark(\n      'Context Assembly',\n      async () => {\n        await this.assembler.assembleContext();\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Context selection benchmark\n   */\n  private async benchmarkContextSelection(config: BenchmarkConfig) {\n    const fragments = this.createTestFragments(config.fragmentCount, config.contentSize);\n    \n    return await this.monitor.benchmark(\n      'Context Selection',\n      () => {\n        this.assembler['selectFragments'](fragments);\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Token budget management benchmark\n   */\n  private async benchmarkTokenBudgetManagement(config: BenchmarkConfig) {\n    const fragments = this.createTestFragments(config.fragmentCount, config.contentSize);\n    \n    return await this.monitor.benchmark(\n      'Token Budget Management',\n      () => {\n        // Simulate token budget calculation\n        const totalTokens = fragments.reduce((sum, f) => sum + f.tokenEstimate, 0);\n        const budget = 8000;\n        const withinBudget = totalTokens <= budget;\n        // Store result for side effect\n        (global as any).lastBudgetResult = { totalTokens, budget, withinBudget };\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Pattern recognition benchmark\n   */\n  private async benchmarkPatternRecognition(config: BenchmarkConfig) {\n    const fragments = this.createTestFragments(config.fragmentCount, config.contentSize);\n    \n    return await this.monitor.benchmark(\n      'Pattern Recognition',\n      () => {\n        this.memory.analyzeContext(fragments);\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Decision recording benchmark\n   */\n  private async benchmarkDecisionRecording(config: BenchmarkConfig) {\n    const fragments = this.createTestFragments(10, config.contentSize);\n    let index = 0;\n    \n    return await this.monitor.benchmark(\n      'Decision Recording',\n      () => {\n        this.memory.recordDecision(\n          `context-${index}`,\n          'selected-fragments',\n          'optimal-priority-distribution',\n          index % 3 === 0 ? 'success' : 'partial',\n          fragments\n        );\n        index++;\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Memory retrieval benchmark\n   */\n  private async benchmarkMemoryRetrieval(config: BenchmarkConfig) {\n    // Pre-populate memory\n    for (let i = 0; i < 50; i++) {\n      this.memory.storeMemory(`key-${i}`, `content-${i}`, 'pattern', ContextPriority.MEDIUM);\n    }\n\n    let index = 0;\n    \n    return await this.monitor.benchmark(\n      'Memory Retrieval',\n      () => {\n        this.memory.getMemory(`key-${index % 50}`);\n        index++;\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Command context generation benchmark\n   */\n  private async benchmarkCommandContext(config: BenchmarkConfig) {\n    const commands = ['Read', 'Write', 'Bash', 'Edit', 'vibe-init'];\n    let index = 0;\n    \n    return await this.monitor.benchmark(\n      'Command Context Generation',\n      async () => {\n        const command = commands[index % commands.length];\n        await this.provider.getCommandContext(command);\n        index++;\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Validation gates benchmark\n   */\n  private async benchmarkValidationGates(config: BenchmarkConfig) {\n    const fragments = this.createTestFragments(10, config.contentSize);\n    \n    return await this.monitor.benchmark(\n      'Validation Gates',\n      () => {\n        // Simulate validation logic\n        const hasValidFragments = fragments.every(f => f.validation.isValid);\n        const totalTokens = fragments.reduce((sum, f) => sum + f.tokenEstimate, 0);\n        const withinBudget = totalTokens <= 8000;\n        const validationResult = {\n          passed: hasValidFragments && withinBudget,\n          errors: hasValidFragments ? [] : ['Invalid fragments detected'],\n          warnings: withinBudget ? [] : ['Token budget exceeded']\n        };\n        // Store result for side effect\n        (global as any).lastValidationGateResult = validationResult;\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Generate performance report\n   */\n  public generateReport(): string {\n    return this.monitor.generateReport();\n  }\n\n  /**\n   * Export benchmark results\n   */\n  public exportResults(): string {\n    return this.monitor.exportMetrics();\n  }\n\n  /**\n   * Helper: Create test fragments\n   */\n  private createTestFragments(count: number, size: 'small' | 'medium' | 'large'): ContextFragment[] {\n    const fragments: ContextFragment[] = [];\n    const content = this.generateContent(size);\n    \n    for (let i = 0; i < count; i++) {\n      const priority = Object.values(ContextPriority)[i % Object.values(ContextPriority).length];\n      const fragment = this.factory.createFragment(\n        'task-context',\n        `${content}-${i}`,\n        priority as ContextPriority,\n        { source: { type: 'task', taskId: `test-${i}`, taskType: 'testing' } }\n      );\n      fragments.push(fragment);\n    }\n    \n    return fragments;\n  }\n\n  /**\n   * Helper: Generate content of specified size\n   */\n  private generateContent(size: 'small' | 'medium' | 'large'): string {\n    const base = 'This is test content for performance benchmarking. ';\n    \n    switch (size) {\n      case 'small':\n        return base.repeat(5); // ~250 characters\n      case 'medium':\n        return base.repeat(20); // ~1000 characters\n      case 'large':\n        return base.repeat(100); // ~5000 characters\n      default:\n        return base.repeat(20);\n    }\n  }\n}\n\n/**\n * Run benchmarks from command line\n */\nexport async function runBenchmarks(): Promise<void> {\n  const benchmarks = new ContextBenchmarks();\n  \n  console.log('\uD83D\uDCCA Context Engineering Performance Benchmarks\\n');\n  console.log('Configuration:');\n  console.log(`- Samples per test: ${DEFAULT_CONFIG.samples}`);\n  console.log(`- Warmup runs: ${DEFAULT_CONFIG.warmup}`);\n  console.log(`- Fragment count: ${DEFAULT_CONFIG.fragmentCount}`);\n  console.log(`- Content size: ${DEFAULT_CONFIG.contentSize}`);\n  console.log('');\n\n  const startTime = Date.now();\n  \n  try {\n    const results = await benchmarks.runAllBenchmarks();\n    const duration = Date.now() - startTime;\n    \n    console.log(`\\n\u23F1\uFE0F  Total benchmark time: ${(duration / 1000).toFixed(2)}s\\n`);\n    \n    // Print summary\n    console.log('\uD83D\uDCC8 Performance Summary:');\n    for (const [name, result] of results) {\n      console.log(`${name}: ${result.averageDuration.toFixed(2)}ms avg, ${result.throughput.toFixed(2)} ops/sec`);\n    }\n    \n    // Generate detailed report\n    const report = benchmarks.generateReport();\n    console.log('\\n' + report);\n    \n    // Check for performance issues\n    const issues = analyzePerformanceIssues(results);\n    if (issues.length > 0) {\n      console.log('\\n\u26A0\uFE0F  Performance Issues Detected:');\n      issues.forEach(issue => console.log(`- ${issue}`));\n    } else {\n      console.log('\\n\u2705 No performance issues detected!');\n    }\n    \n  } catch (error) {\n    console.error('\u274C Benchmark failed:', error);\n    process.exit(1);\n  }\n}\n\n/**\n * Analyze benchmark results for performance issues\n */\nfunction analyzePerformanceIssues(results: Map<string, any>): string[] {\n  const issues: string[] = [];\n  \n  for (const [name, result] of results) {\n    // Check for slow operations (>100ms average)\n    if (result.averageDuration > 100) {\n      issues.push(`${name} is slow: ${result.averageDuration.toFixed(2)}ms average`);\n    }\n    \n    // Check for high memory usage (>10MB average)\n    if (result.memoryStats.averageHeapUsed > 10 * 1024 * 1024) {\n      issues.push(`${name} uses high memory: ${(result.memoryStats.averageHeapUsed / 1024 / 1024).toFixed(2)}MB average`);\n    }\n    \n    // Check for low throughput (<10 ops/sec)\n    if (result.throughput < 10) {\n      issues.push(`${name} has low throughput: ${result.throughput.toFixed(2)} ops/sec`);\n    }\n    \n    // Check for high variability (std dev > 50% of average)\n    if (result.standardDeviation > result.averageDuration * 0.5) {\n      issues.push(`${name} has high variability: ${result.standardDeviation.toFixed(2)}ms std dev`);\n    }\n  }\n  \n  return issues;\n}\n\n// Export for use as module\nexport { BenchmarkConfig, DEFAULT_CONFIG };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9eb8fe4e386c15900dfc46e16c728130c9b269e4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1gihfhbuw2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1gihfhbuw2();
cov_1gihfhbuw2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1gihfhbuw2().s[1]++;
exports.DEFAULT_CONFIG = exports.ContextBenchmarks = void 0;
/* istanbul ignore next */
cov_1gihfhbuw2().s[2]++;
exports.runBenchmarks = runBenchmarks;
const performance_monitor_1 =
/* istanbul ignore next */
(cov_1gihfhbuw2().s[3]++, require("./performance-monitor"));
const context_fragment_1 =
/* istanbul ignore next */
(cov_1gihfhbuw2().s[4]++, require("../assembly/context-fragment"));
const context_assembler_1 =
/* istanbul ignore next */
(cov_1gihfhbuw2().s[5]++, require("../assembly/context-assembler"));
const lru_cache_1 =
/* istanbul ignore next */
(cov_1gihfhbuw2().s[6]++, require("../cache/lru-cache"));
const context_memory_1 =
/* istanbul ignore next */
(cov_1gihfhbuw2().s[7]++, require("../memory/context-memory"));
const command_provider_1 =
/* istanbul ignore next */
(cov_1gihfhbuw2().s[8]++, require("../integration/command-provider"));
const context_types_1 =
/* istanbul ignore next */
(cov_1gihfhbuw2().s[9]++, require("../types/context.types"));
/**
 * Default benchmark configuration
 */
const DEFAULT_CONFIG =
/* istanbul ignore next */
(cov_1gihfhbuw2().s[10]++, {
  samples: 100,
  warmup: 10,
  fragmentCount: 50,
  contentSize: 'medium',
  enableMemoryLearning: true
});
/* istanbul ignore next */
cov_1gihfhbuw2().s[11]++;
exports.DEFAULT_CONFIG = DEFAULT_CONFIG;
/**
 * Context System Benchmark Suite
 */
class ContextBenchmarks {
  constructor() {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[0]++;
    cov_1gihfhbuw2().s[12]++;
    this.monitor = new performance_monitor_1.PerformanceMonitor();
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[13]++;
    this.factory = new context_fragment_1.ContextFragmentFactory();
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[14]++;
    this.assembler = new context_assembler_1.ContextAssembler();
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[15]++;
    this.cache = new lru_cache_1.LRUCache({
      maxSize: 1000,
      ttl: 60000
    });
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[16]++;
    this.memory = new context_memory_1.ContextMemoryManager();
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[17]++;
    this.provider = new command_provider_1.CommandContextProvider();
  }
  /**
   * Run all benchmarks
   */
  async runAllBenchmarks(config =
  /* istanbul ignore next */
  (cov_1gihfhbuw2().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[1]++;
    const finalConfig =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[18]++, {
      ...DEFAULT_CONFIG,
      ...config
    });
    const results =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[19]++, new Map());
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[20]++;
    console.log('🚀 Starting Context Engineering Benchmarks...\n');
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[21]++;
    try {
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[22]++;
      // Fragment operations
      results.set('fragment-creation', await this.benchmarkFragmentCreation(finalConfig));
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[23]++;
      results.set('fragment-validation', await this.benchmarkFragmentValidation(finalConfig));
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[24]++;
      results.set('token-estimation', await this.benchmarkTokenEstimation(finalConfig));
      // Cache operations
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[25]++;
      results.set('cache-put', await this.benchmarkCachePut(finalConfig));
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[26]++;
      results.set('cache-get', await this.benchmarkCacheGet(finalConfig));
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[27]++;
      results.set('cache-eviction', await this.benchmarkCacheEviction(finalConfig));
      // Context assembly
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[28]++;
      results.set('context-assembly', await this.benchmarkContextAssembly(finalConfig));
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[29]++;
      results.set('context-selection', await this.benchmarkContextSelection(finalConfig));
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[30]++;
      results.set('token-budget', await this.benchmarkTokenBudgetManagement(finalConfig));
      // Memory & learning
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[31]++;
      results.set('pattern-recognition', await this.benchmarkPatternRecognition(finalConfig));
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[32]++;
      results.set('decision-recording', await this.benchmarkDecisionRecording(finalConfig));
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[33]++;
      results.set('memory-retrieval', await this.benchmarkMemoryRetrieval(finalConfig));
      // Integration
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[34]++;
      results.set('command-context', await this.benchmarkCommandContext(finalConfig));
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[35]++;
      results.set('validation-gates', await this.benchmarkValidationGates(finalConfig));
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[36]++;
      console.log('✅ All benchmarks completed successfully!\n');
    } catch (error) {
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[37]++;
      console.error('❌ Benchmark failed:', error);
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[38]++;
      throw error;
    }
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[39]++;
    return results;
  }
  /**
   * Fragment creation benchmark
   */
  async benchmarkFragmentCreation(config) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[2]++;
    const content =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[40]++, this.generateContent(config.contentSize));
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[41]++;
    return await this.monitor.benchmark('Fragment Creation', () => {
      /* istanbul ignore next */
      cov_1gihfhbuw2().f[3]++;
      cov_1gihfhbuw2().s[42]++;
      this.factory.createFragment('task-context', content, context_types_1.ContextPriority.MEDIUM, {
        source: {
          type: 'task',
          taskId: 'test',
          taskType: 'implementation'
        }
      });
    }, {
      samples: config.samples,
      warmup: config.warmup
    });
  }
  /**
   * Fragment validation benchmark
   */
  async benchmarkFragmentValidation(config) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[4]++;
    const fragments =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[43]++, this.createTestFragments(config.fragmentCount, config.contentSize));
    let index =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[44]++, 0);
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[45]++;
    return await this.monitor.benchmark('Fragment Validation', () => {
      /* istanbul ignore next */
      cov_1gihfhbuw2().f[5]++;
      const fragment =
      /* istanbul ignore next */
      (cov_1gihfhbuw2().s[46]++, fragments[index % fragments.length]);
      // Validate fragment by checking its properties
      const isValid =
      /* istanbul ignore next */
      (cov_1gihfhbuw2().s[47]++,
      /* istanbul ignore next */
      (cov_1gihfhbuw2().b[1][0]++, fragment.validation.isValid) &&
      /* istanbul ignore next */
      (cov_1gihfhbuw2().b[1][1]++, fragment.content.length > 0) &&
      /* istanbul ignore next */
      (cov_1gihfhbuw2().b[1][2]++, fragment.tokenEstimate > 0));
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[48]++;
      index++;
      // Store result for side effect
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[49]++;
      global.lastValidationResult = isValid;
    }, {
      samples: config.samples,
      warmup: config.warmup
    });
  }
  /**
   * Token estimation benchmark
   */
  async benchmarkTokenEstimation(config) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[6]++;
    const content =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[50]++, this.generateContent(config.contentSize));
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[51]++;
    return await this.monitor.benchmark('Token Estimation', () => {
      /* istanbul ignore next */
      cov_1gihfhbuw2().f[7]++;
      cov_1gihfhbuw2().s[52]++;
      this.factory['tokenEstimator'].estimate(content);
    }, {
      samples: config.samples,
      warmup: config.warmup
    });
  }
  /**
   * Cache put operation benchmark
   */
  async benchmarkCachePut(config) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[8]++;
    const fragments =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[53]++, this.createTestFragments(config.fragmentCount, config.contentSize));
    let index =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[54]++, 0);
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[55]++;
    return await this.monitor.benchmark('Cache Put', () => {
      /* istanbul ignore next */
      cov_1gihfhbuw2().f[9]++;
      const fragment =
      /* istanbul ignore next */
      (cov_1gihfhbuw2().s[56]++, fragments[index % fragments.length]);
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[57]++;
      this.cache.put(`key-${index}`, fragment);
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[58]++;
      index++;
    }, {
      samples: config.samples,
      warmup: config.warmup
    });
  }
  /**
   * Cache get operation benchmark
   */
  async benchmarkCacheGet(config) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[10]++;
    // Pre-populate cache
    const fragments =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[59]++, this.createTestFragments(config.fragmentCount, config.contentSize));
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[60]++;
    fragments.forEach((fragment, i) => {
      /* istanbul ignore next */
      cov_1gihfhbuw2().f[11]++;
      cov_1gihfhbuw2().s[61]++;
      this.cache.put(`key-${i}`, fragment);
    });
    let index =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[62]++, 0);
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[63]++;
    return await this.monitor.benchmark('Cache Get', () => {
      /* istanbul ignore next */
      cov_1gihfhbuw2().f[12]++;
      cov_1gihfhbuw2().s[64]++;
      this.cache.get(`key-${index % config.fragmentCount}`);
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[65]++;
      index++;
    }, {
      samples: config.samples,
      warmup: config.warmup
    });
  }
  /**
   * Cache eviction benchmark
   */
  async benchmarkCacheEviction(config) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[13]++;
    const smallCache =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[66]++, new lru_cache_1.LRUCache({
      maxSize: 10,
      ttl: 60000
    }));
    const fragments =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[67]++, this.createTestFragments(20, config.contentSize));
    let index =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[68]++, 0);
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[69]++;
    return await this.monitor.benchmark('Cache Eviction', () => {
      /* istanbul ignore next */
      cov_1gihfhbuw2().f[14]++;
      const fragment =
      /* istanbul ignore next */
      (cov_1gihfhbuw2().s[70]++, fragments[index % fragments.length]);
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[71]++;
      smallCache.put(`key-${index}`, fragment); // Will trigger eviction
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[72]++;
      index++;
    }, {
      samples: config.samples,
      warmup: config.warmup
    });
  }
  /**
   * Context assembly benchmark
   */
  async benchmarkContextAssembly(config) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[15]++;
    cov_1gihfhbuw2().s[73]++;
    return await this.monitor.benchmark('Context Assembly', async () => {
      /* istanbul ignore next */
      cov_1gihfhbuw2().f[16]++;
      cov_1gihfhbuw2().s[74]++;
      await this.assembler.assembleContext();
    }, {
      samples: config.samples,
      warmup: config.warmup
    });
  }
  /**
   * Context selection benchmark
   */
  async benchmarkContextSelection(config) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[17]++;
    const fragments =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[75]++, this.createTestFragments(config.fragmentCount, config.contentSize));
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[76]++;
    return await this.monitor.benchmark('Context Selection', () => {
      /* istanbul ignore next */
      cov_1gihfhbuw2().f[18]++;
      cov_1gihfhbuw2().s[77]++;
      this.assembler['selectFragments'](fragments);
    }, {
      samples: config.samples,
      warmup: config.warmup
    });
  }
  /**
   * Token budget management benchmark
   */
  async benchmarkTokenBudgetManagement(config) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[19]++;
    const fragments =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[78]++, this.createTestFragments(config.fragmentCount, config.contentSize));
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[79]++;
    return await this.monitor.benchmark('Token Budget Management', () => {
      /* istanbul ignore next */
      cov_1gihfhbuw2().f[20]++;
      // Simulate token budget calculation
      const totalTokens =
      /* istanbul ignore next */
      (cov_1gihfhbuw2().s[80]++, fragments.reduce((sum, f) => {
        /* istanbul ignore next */
        cov_1gihfhbuw2().f[21]++;
        cov_1gihfhbuw2().s[81]++;
        return sum + f.tokenEstimate;
      }, 0));
      const budget =
      /* istanbul ignore next */
      (cov_1gihfhbuw2().s[82]++, 8000);
      const withinBudget =
      /* istanbul ignore next */
      (cov_1gihfhbuw2().s[83]++, totalTokens <= budget);
      // Store result for side effect
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[84]++;
      global.lastBudgetResult = {
        totalTokens,
        budget,
        withinBudget
      };
    }, {
      samples: config.samples,
      warmup: config.warmup
    });
  }
  /**
   * Pattern recognition benchmark
   */
  async benchmarkPatternRecognition(config) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[22]++;
    const fragments =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[85]++, this.createTestFragments(config.fragmentCount, config.contentSize));
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[86]++;
    return await this.monitor.benchmark('Pattern Recognition', () => {
      /* istanbul ignore next */
      cov_1gihfhbuw2().f[23]++;
      cov_1gihfhbuw2().s[87]++;
      this.memory.analyzeContext(fragments);
    }, {
      samples: config.samples,
      warmup: config.warmup
    });
  }
  /**
   * Decision recording benchmark
   */
  async benchmarkDecisionRecording(config) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[24]++;
    const fragments =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[88]++, this.createTestFragments(10, config.contentSize));
    let index =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[89]++, 0);
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[90]++;
    return await this.monitor.benchmark('Decision Recording', () => {
      /* istanbul ignore next */
      cov_1gihfhbuw2().f[25]++;
      cov_1gihfhbuw2().s[91]++;
      this.memory.recordDecision(`context-${index}`, 'selected-fragments', 'optimal-priority-distribution', index % 3 === 0 ?
      /* istanbul ignore next */
      (cov_1gihfhbuw2().b[2][0]++, 'success') :
      /* istanbul ignore next */
      (cov_1gihfhbuw2().b[2][1]++, 'partial'), fragments);
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[92]++;
      index++;
    }, {
      samples: config.samples,
      warmup: config.warmup
    });
  }
  /**
   * Memory retrieval benchmark
   */
  async benchmarkMemoryRetrieval(config) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[26]++;
    cov_1gihfhbuw2().s[93]++;
    // Pre-populate memory
    for (let i =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[94]++, 0); i < 50; i++) {
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[95]++;
      this.memory.storeMemory(`key-${i}`, `content-${i}`, 'pattern', context_types_1.ContextPriority.MEDIUM);
    }
    let index =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[96]++, 0);
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[97]++;
    return await this.monitor.benchmark('Memory Retrieval', () => {
      /* istanbul ignore next */
      cov_1gihfhbuw2().f[27]++;
      cov_1gihfhbuw2().s[98]++;
      this.memory.getMemory(`key-${index % 50}`);
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[99]++;
      index++;
    }, {
      samples: config.samples,
      warmup: config.warmup
    });
  }
  /**
   * Command context generation benchmark
   */
  async benchmarkCommandContext(config) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[28]++;
    const commands =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[100]++, ['Read', 'Write', 'Bash', 'Edit', 'vibe-init']);
    let index =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[101]++, 0);
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[102]++;
    return await this.monitor.benchmark('Command Context Generation', async () => {
      /* istanbul ignore next */
      cov_1gihfhbuw2().f[29]++;
      const command =
      /* istanbul ignore next */
      (cov_1gihfhbuw2().s[103]++, commands[index % commands.length]);
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[104]++;
      await this.provider.getCommandContext(command);
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[105]++;
      index++;
    }, {
      samples: config.samples,
      warmup: config.warmup
    });
  }
  /**
   * Validation gates benchmark
   */
  async benchmarkValidationGates(config) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[30]++;
    const fragments =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[106]++, this.createTestFragments(10, config.contentSize));
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[107]++;
    return await this.monitor.benchmark('Validation Gates', () => {
      /* istanbul ignore next */
      cov_1gihfhbuw2().f[31]++;
      // Simulate validation logic
      const hasValidFragments =
      /* istanbul ignore next */
      (cov_1gihfhbuw2().s[108]++, fragments.every(f => {
        /* istanbul ignore next */
        cov_1gihfhbuw2().f[32]++;
        cov_1gihfhbuw2().s[109]++;
        return f.validation.isValid;
      }));
      const totalTokens =
      /* istanbul ignore next */
      (cov_1gihfhbuw2().s[110]++, fragments.reduce((sum, f) => {
        /* istanbul ignore next */
        cov_1gihfhbuw2().f[33]++;
        cov_1gihfhbuw2().s[111]++;
        return sum + f.tokenEstimate;
      }, 0));
      const withinBudget =
      /* istanbul ignore next */
      (cov_1gihfhbuw2().s[112]++, totalTokens <= 8000);
      const validationResult =
      /* istanbul ignore next */
      (cov_1gihfhbuw2().s[113]++, {
        passed:
        /* istanbul ignore next */
        (cov_1gihfhbuw2().b[3][0]++, hasValidFragments) &&
        /* istanbul ignore next */
        (cov_1gihfhbuw2().b[3][1]++, withinBudget),
        errors: hasValidFragments ?
        /* istanbul ignore next */
        (cov_1gihfhbuw2().b[4][0]++, []) :
        /* istanbul ignore next */
        (cov_1gihfhbuw2().b[4][1]++, ['Invalid fragments detected']),
        warnings: withinBudget ?
        /* istanbul ignore next */
        (cov_1gihfhbuw2().b[5][0]++, []) :
        /* istanbul ignore next */
        (cov_1gihfhbuw2().b[5][1]++, ['Token budget exceeded'])
      });
      // Store result for side effect
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[114]++;
      global.lastValidationGateResult = validationResult;
    }, {
      samples: config.samples,
      warmup: config.warmup
    });
  }
  /**
   * Generate performance report
   */
  generateReport() {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[34]++;
    cov_1gihfhbuw2().s[115]++;
    return this.monitor.generateReport();
  }
  /**
   * Export benchmark results
   */
  exportResults() {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[35]++;
    cov_1gihfhbuw2().s[116]++;
    return this.monitor.exportMetrics();
  }
  /**
   * Helper: Create test fragments
   */
  createTestFragments(count, size) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[36]++;
    const fragments =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[117]++, []);
    const content =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[118]++, this.generateContent(size));
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[119]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[120]++, 0); i < count; i++) {
      const priority =
      /* istanbul ignore next */
      (cov_1gihfhbuw2().s[121]++, Object.values(context_types_1.ContextPriority)[i % Object.values(context_types_1.ContextPriority).length]);
      const fragment =
      /* istanbul ignore next */
      (cov_1gihfhbuw2().s[122]++, this.factory.createFragment('task-context', `${content}-${i}`, priority, {
        source: {
          type: 'task',
          taskId: `test-${i}`,
          taskType: 'testing'
        }
      }));
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[123]++;
      fragments.push(fragment);
    }
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[124]++;
    return fragments;
  }
  /**
   * Helper: Generate content of specified size
   */
  generateContent(size) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().f[37]++;
    const base =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[125]++, 'This is test content for performance benchmarking. ');
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[126]++;
    switch (size) {
      case 'small':
        /* istanbul ignore next */
        cov_1gihfhbuw2().b[6][0]++;
        cov_1gihfhbuw2().s[127]++;
        return base.repeat(5);
      // ~250 characters
      case 'medium':
        /* istanbul ignore next */
        cov_1gihfhbuw2().b[6][1]++;
        cov_1gihfhbuw2().s[128]++;
        return base.repeat(20);
      // ~1000 characters
      case 'large':
        /* istanbul ignore next */
        cov_1gihfhbuw2().b[6][2]++;
        cov_1gihfhbuw2().s[129]++;
        return base.repeat(100);
      // ~5000 characters
      default:
        /* istanbul ignore next */
        cov_1gihfhbuw2().b[6][3]++;
        cov_1gihfhbuw2().s[130]++;
        return base.repeat(20);
    }
  }
}
/* istanbul ignore next */
cov_1gihfhbuw2().s[131]++;
exports.ContextBenchmarks = ContextBenchmarks;
/**
 * Run benchmarks from command line
 */
async function runBenchmarks() {
  /* istanbul ignore next */
  cov_1gihfhbuw2().f[38]++;
  const benchmarks =
  /* istanbul ignore next */
  (cov_1gihfhbuw2().s[132]++, new ContextBenchmarks());
  /* istanbul ignore next */
  cov_1gihfhbuw2().s[133]++;
  console.log('📊 Context Engineering Performance Benchmarks\n');
  /* istanbul ignore next */
  cov_1gihfhbuw2().s[134]++;
  console.log('Configuration:');
  /* istanbul ignore next */
  cov_1gihfhbuw2().s[135]++;
  console.log(`- Samples per test: ${DEFAULT_CONFIG.samples}`);
  /* istanbul ignore next */
  cov_1gihfhbuw2().s[136]++;
  console.log(`- Warmup runs: ${DEFAULT_CONFIG.warmup}`);
  /* istanbul ignore next */
  cov_1gihfhbuw2().s[137]++;
  console.log(`- Fragment count: ${DEFAULT_CONFIG.fragmentCount}`);
  /* istanbul ignore next */
  cov_1gihfhbuw2().s[138]++;
  console.log(`- Content size: ${DEFAULT_CONFIG.contentSize}`);
  /* istanbul ignore next */
  cov_1gihfhbuw2().s[139]++;
  console.log('');
  const startTime =
  /* istanbul ignore next */
  (cov_1gihfhbuw2().s[140]++, Date.now());
  /* istanbul ignore next */
  cov_1gihfhbuw2().s[141]++;
  try {
    const results =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[142]++, await benchmarks.runAllBenchmarks());
    const duration =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[143]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[144]++;
    console.log(`\n⏱️  Total benchmark time: ${(duration / 1000).toFixed(2)}s\n`);
    // Print summary
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[145]++;
    console.log('📈 Performance Summary:');
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[146]++;
    for (const [name, result] of results) {
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[147]++;
      console.log(`${name}: ${result.averageDuration.toFixed(2)}ms avg, ${result.throughput.toFixed(2)} ops/sec`);
    }
    // Generate detailed report
    const report =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[148]++, benchmarks.generateReport());
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[149]++;
    console.log('\n' + report);
    // Check for performance issues
    const issues =
    /* istanbul ignore next */
    (cov_1gihfhbuw2().s[150]++, analyzePerformanceIssues(results));
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[151]++;
    if (issues.length > 0) {
      /* istanbul ignore next */
      cov_1gihfhbuw2().b[7][0]++;
      cov_1gihfhbuw2().s[152]++;
      console.log('\n⚠️  Performance Issues Detected:');
      /* istanbul ignore next */
      cov_1gihfhbuw2().s[153]++;
      issues.forEach(issue => {
        /* istanbul ignore next */
        cov_1gihfhbuw2().f[39]++;
        cov_1gihfhbuw2().s[154]++;
        return console.log(`- ${issue}`);
      });
    } else {
      /* istanbul ignore next */
      cov_1gihfhbuw2().b[7][1]++;
      cov_1gihfhbuw2().s[155]++;
      console.log('\n✅ No performance issues detected!');
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[156]++;
    console.error('❌ Benchmark failed:', error);
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[157]++;
    process.exit(1);
  }
}
/**
 * Analyze benchmark results for performance issues
 */
function analyzePerformanceIssues(results) {
  /* istanbul ignore next */
  cov_1gihfhbuw2().f[40]++;
  const issues =
  /* istanbul ignore next */
  (cov_1gihfhbuw2().s[158]++, []);
  /* istanbul ignore next */
  cov_1gihfhbuw2().s[159]++;
  for (const [name, result] of results) {
    /* istanbul ignore next */
    cov_1gihfhbuw2().s[160]++;
    // Check for slow operations (>100ms average)
    if (result.averageDuration > 100) {
      /* istanbul ignore next */
      cov_1gihfhbuw2().b[8][0]++;
      cov_1gihfhbuw2().s[161]++;
      issues.push(`${name} is slow: ${result.averageDuration.toFixed(2)}ms average`);
    } else
    /* istanbul ignore next */
    {
      cov_1gihfhbuw2().b[8][1]++;
    }
    // Check for high memory usage (>10MB average)
    cov_1gihfhbuw2().s[162]++;
    if (result.memoryStats.averageHeapUsed > 10 * 1024 * 1024) {
      /* istanbul ignore next */
      cov_1gihfhbuw2().b[9][0]++;
      cov_1gihfhbuw2().s[163]++;
      issues.push(`${name} uses high memory: ${(result.memoryStats.averageHeapUsed / 1024 / 1024).toFixed(2)}MB average`);
    } else
    /* istanbul ignore next */
    {
      cov_1gihfhbuw2().b[9][1]++;
    }
    // Check for low throughput (<10 ops/sec)
    cov_1gihfhbuw2().s[164]++;
    if (result.throughput < 10) {
      /* istanbul ignore next */
      cov_1gihfhbuw2().b[10][0]++;
      cov_1gihfhbuw2().s[165]++;
      issues.push(`${name} has low throughput: ${result.throughput.toFixed(2)} ops/sec`);
    } else
    /* istanbul ignore next */
    {
      cov_1gihfhbuw2().b[10][1]++;
    }
    // Check for high variability (std dev > 50% of average)
    cov_1gihfhbuw2().s[166]++;
    if (result.standardDeviation > result.averageDuration * 0.5) {
      /* istanbul ignore next */
      cov_1gihfhbuw2().b[11][0]++;
      cov_1gihfhbuw2().s[167]++;
      issues.push(`${name} has high variability: ${result.standardDeviation.toFixed(2)}ms std dev`);
    } else
    /* istanbul ignore next */
    {
      cov_1gihfhbuw2().b[11][1]++;
    }
  }
  /* istanbul ignore next */
  cov_1gihfhbuw2().s[168]++;
  return issues;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,