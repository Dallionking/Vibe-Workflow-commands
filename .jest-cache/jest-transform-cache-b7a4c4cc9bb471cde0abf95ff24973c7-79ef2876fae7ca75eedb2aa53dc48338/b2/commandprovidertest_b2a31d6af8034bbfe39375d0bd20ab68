fb4ced644311fc5af322f9a7da6d4c75
"use strict";
/**
 * Command Provider Integration Test Suite
 * Tests for CommandContextProvider integration layer
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock file system operations
globals_1.jest.mock('fs', () => ({
    existsSync: globals_1.jest.fn(),
    readFileSync: globals_1.jest.fn(),
    writeFileSync: globals_1.jest.fn()
}));
const command_provider_1 = require("../integration/command-provider");
(0, globals_1.describe)('CommandContextProvider', () => {
    let provider;
    (0, globals_1.beforeEach)(() => {
        provider = new command_provider_1.CommandContextProvider({
            enableMemoryLearning: true,
            enableCaching: true,
            enableValidation: true,
            maxContextTokens: 2000,
            fallbackStrategy: 'essential',
            debugMode: false
        });
    });
    (0, globals_1.describe)('Initialization', () => {
        (0, globals_1.test)('should initialize successfully', async () => {
            await (0, globals_1.expect)(provider.initialize()).resolves.not.toThrow();
        });
        (0, globals_1.test)('should initialize with custom configuration', async () => {
            const customProvider = new command_provider_1.CommandContextProvider({
                maxContextTokens: 5000,
                debugMode: true
            });
            await (0, globals_1.expect)(customProvider.initialize()).resolves.not.toThrow();
        });
        (0, globals_1.test)('should handle initialization errors gracefully', async () => {
            // Mock an initialization error
            const errorProvider = new command_provider_1.CommandContextProvider();
            // Should not throw during initialization
            await (0, globals_1.expect)(errorProvider.initialize()).resolves.not.toThrow();
        });
    });
    (0, globals_1.describe)('Command Context Generation', () => {
        (0, globals_1.beforeEach)(async () => {
            await provider.initialize();
        });
        (0, globals_1.test)('should generate context for Read command', async () => {
            const result = await provider.getCommandContext('Read', {
                file_path: '/test/file.ts'
            });
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(result.commandName).toBe('Read');
            (0, globals_1.expect)(result.context).toBeDefined();
            (0, globals_1.expect)(result.fragments).toBeDefined();
            (0, globals_1.expect)(result.tokens).toBeGreaterThan(0);
            (0, globals_1.expect)(result.validation).toBeDefined();
            (0, globals_1.expect)(result.executionTime).toBeGreaterThan(0);
        });
        (0, globals_1.test)('should generate context for Write command', async () => {
            const result = await provider.getCommandContext('Write', {
                file_path: '/test/file.ts',
                content: 'test content'
            });
            (0, globals_1.expect)(result.commandName).toBe('Write');
            (0, globals_1.expect)(result.context).toContain('Context Information');
            (0, globals_1.expect)(result.validation.passed).toBeDefined();
        });
        (0, globals_1.test)('should generate context for Bash command', async () => {
            const result = await provider.getCommandContext('Bash', {
                command: 'npm test'
            });
            (0, globals_1.expect)(result.commandName).toBe('Bash');
            (0, globals_1.expect)(result.context).toBeDefined();
            (0, globals_1.expect)(result.tokens).toBeLessThanOrEqual(2000); // Respect token limit
        });
        (0, globals_1.test)('should handle unknown commands', async () => {
            const result = await provider.getCommandContext('UnknownCommand', {});
            (0, globals_1.expect)(result.commandName).toBe('UnknownCommand');
            (0, globals_1.expect)(result.context).toBeDefined();
            // Should still provide some context even for unknown commands
        });
        (0, globals_1.test)('should respect token limits', async () => {
            const smallProvider = new command_provider_1.CommandContextProvider({
                maxContextTokens: 500
            });
            await smallProvider.initialize();
            const result = await smallProvider.getCommandContext('Read', {});
            (0, globals_1.expect)(result.tokens).toBeLessThanOrEqual(500);
        });
    });
    (0, globals_1.describe)('Context Validation', () => {
        (0, globals_1.beforeEach)(async () => {
            await provider.initialize();
        });
        (0, globals_1.test)('should validate command context', async () => {
            const result = await provider.getCommandContext('Read', {});
            (0, globals_1.expect)(result.validation).toBeDefined();
            (0, globals_1.expect)(typeof result.validation.passed).toBe('boolean');
            (0, globals_1.expect)(Array.isArray(result.validation.errors)).toBe(true);
            (0, globals_1.expect)(Array.isArray(result.validation.warnings)).toBe(true);
        });
        (0, globals_1.test)('should detect missing required context', async () => {
            // Create provider with strict validation
            const strictProvider = new command_provider_1.CommandContextProvider({
                enableValidation: true,
                maxContextTokens: 100 // Very small to trigger validation issues
            });
            await strictProvider.initialize();
            const result = await strictProvider.getCommandContext('Write', {});
            // With very small token budget, validation might fail
            if (!result.validation.passed) {
                (0, globals_1.expect)(result.validation.errors.length).toBeGreaterThan(0);
            }
        });
        (0, globals_1.test)('should provide warnings for sub-optimal context', async () => {
            const result = await provider.getCommandContext('Bash', {});
            // Should provide warnings about safety or other considerations
            (0, globals_1.expect)(result.validation.warnings).toBeDefined();
        });
    });
    (0, globals_1.describe)('Phase Context Management', () => {
        (0, globals_1.beforeEach)(async () => {
            await provider.initialize();
        });
        (0, globals_1.test)('should update phase context', async () => {
            await provider.updatePhaseContext(1, 'Context Engineering', ['task-1', 'task-2'], 2);
            const summary = provider.getContextSummary();
            (0, globals_1.expect)(summary.phase).toBeDefined();
            (0, globals_1.expect)(summary.phase?.phaseNumber).toBe(1);
            (0, globals_1.expect)(summary.phase?.phaseName).toBe('Context Engineering');
        });
        (0, globals_1.test)('should track phase progress', async () => {
            await provider.updatePhaseContext(1, 'Test Phase', ['task-1']);
            let summary = provider.getContextSummary();
            (0, globals_1.expect)(summary.phase?.progress).toBeDefined();
            // Update with more completed tasks
            await provider.updatePhaseContext(1, 'Test Phase', ['task-1', 'task-2', 'task-3']);
            summary = provider.getContextSummary();
            (0, globals_1.expect)(summary.phase?.progress).toBeGreaterThan(0);
        });
        (0, globals_1.test)('should handle phase transitions', async () => {
            // Start with Phase 1
            await provider.updatePhaseContext(1, 'Phase 1', ['task-1']);
            let summary = provider.getContextSummary();
            (0, globals_1.expect)(summary.phase?.phaseNumber).toBe(1);
            // Transition to Phase 2
            await provider.updatePhaseContext(2, 'Phase 2', []);
            summary = provider.getContextSummary();
            (0, globals_1.expect)(summary.phase?.phaseNumber).toBe(2);
            (0, globals_1.expect)(summary.phase?.phaseName).toBe('Phase 2');
        });
    });
    (0, globals_1.describe)('Command Result Recording', () => {
        (0, globals_1.beforeEach)(async () => {
            await provider.initialize();
        });
        (0, globals_1.test)('should record successful command results', async () => {
            const context = await provider.getCommandContext('Read', {});
            // Record success
            provider.recordCommandResult('Read', 'success', 'File read successfully');
            // Should not throw and should update learning system
            (0, globals_1.expect)(true).toBe(true);
        });
        (0, globals_1.test)('should record failed command results', async () => {
            const context = await provider.getCommandContext('Write', {});
            // Record failure
            provider.recordCommandResult('Write', 'failure', 'Permission denied');
            // Should handle failure recording gracefully
            (0, globals_1.expect)(true).toBe(true);
        });
        (0, globals_1.test)('should record partial command results', async () => {
            const context = await provider.getCommandContext('Bash', {});
            // Record partial success
            provider.recordCommandResult('Bash', 'partial', 'Command completed with warnings');
            (0, globals_1.expect)(true).toBe(true);
        });
    });
    (0, globals_1.describe)('Context Summary', () => {
        (0, globals_1.beforeEach)(async () => {
            await provider.initialize();
        });
        (0, globals_1.test)('should provide comprehensive context summary', async () => {
            await provider.updatePhaseContext(1, 'Test Phase', ['task-1']);
            const summary = provider.getContextSummary();
            (0, globals_1.expect)(summary.global).toBeDefined();
            (0, globals_1.expect)(summary.global.enabled).toBeDefined();
            (0, globals_1.expect)(summary.global.rulesCount).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(summary.phase).toBeDefined();
            (0, globals_1.expect)(summary.task).toBeDefined(); // May be null
            (0, globals_1.expect)(summary.memory).toBeDefined();
            (0, globals_1.expect)(summary.memory.patternsLearned).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(summary.memory.accuracyRate).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(summary.performance).toBeDefined();
            (0, globals_1.expect)(summary.performance.totalCommands).toBeGreaterThanOrEqual(0);
        });
        (0, globals_1.test)('should handle empty context state', async () => {
            const summary = provider.getContextSummary();
            (0, globals_1.expect)(summary).toBeDefined();
            (0, globals_1.expect)(summary.global).toBeDefined();
            (0, globals_1.expect)(summary.memory).toBeDefined();
            (0, globals_1.expect)(summary.performance).toBeDefined();
        });
    });
    (0, globals_1.describe)('State Export/Import', () => {
        (0, globals_1.beforeEach)(async () => {
            await provider.initialize();
        });
        (0, globals_1.test)('should export context state', async () => {
            await provider.updatePhaseContext(1, 'Test Phase', ['task-1']);
            const exported = provider.exportContextState();
            (0, globals_1.expect)(exported).toBeDefined();
            (0, globals_1.expect)(exported.global).toBeDefined();
            (0, globals_1.expect)(exported.config).toBeDefined();
            (0, globals_1.expect)(exported.timestamp).toBeDefined();
        });
        (0, globals_1.test)('should import context state', async () => {
            // First export a state
            await provider.updatePhaseContext(1, 'Original Phase', ['task-1']);
            const exported = provider.exportContextState();
            // Create new provider and import
            const newProvider = new command_provider_1.CommandContextProvider();
            await newProvider.initialize();
            newProvider.importContextState(exported);
            const summary = newProvider.getContextSummary();
            (0, globals_1.expect)(summary.phase?.phaseName).toBe('Original Phase');
        });
        (0, globals_1.test)('should handle partial import data', async () => {
            const partialData = {
                global: null,
                phase: null,
                task: null,
                memory: null,
                config: {
                    enableMemoryLearning: false,
                    enableCaching: true,
                    enableValidation: true,
                    maxContextTokens: 8000,
                    fallbackStrategy: 'minimal',
                    debugMode: false
                },
                timestamp: Date.now()
            };
            // Should not throw with partial data
            (0, globals_1.expect)(() => provider.importContextState(partialData)).not.toThrow();
        });
    });
    (0, globals_1.describe)('Fallback Behavior', () => {
        (0, globals_1.test)('should provide fallback context on errors', async () => {
            // Create provider that will encounter errors
            const errorProvider = new command_provider_1.CommandContextProvider({
                maxContextTokens: -1 // Invalid configuration to trigger errors
            });
            await errorProvider.initialize();
            const result = await errorProvider.getCommandContext('Read', {});
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(result.context).toContain('Fallback Context');
            (0, globals_1.expect)(result.validation.passed).toBe(false);
            (0, globals_1.expect)(result.validation.warnings).toContain('Using fallback context');
        });
        (0, globals_1.test)('should handle different fallback strategies', async () => {
            const strategies = ['minimal', 'essential', 'degraded'];
            for (const strategy of strategies) {
                const strategyProvider = new command_provider_1.CommandContextProvider({
                    fallbackStrategy: strategy
                });
                await strategyProvider.initialize();
                const result = await strategyProvider.getCommandContext('Read', {});
                (0, globals_1.expect)(result).toBeDefined();
                (0, globals_1.expect)(result.context).toBeDefined();
            }
        });
    });
    (0, globals_1.describe)('Performance', () => {
        (0, globals_1.beforeEach)(async () => {
            await provider.initialize();
        });
        (0, globals_1.test)('should complete context generation quickly', async () => {
            const startTime = Date.now();
            await provider.getCommandContext('Read', {});
            const endTime = Date.now();
            const executionTime = endTime - startTime;
            // Should complete within reasonable time (1 second for tests)
            (0, globals_1.expect)(executionTime).toBeLessThan(1000);
        });
        (0, globals_1.test)('should handle concurrent context requests', async () => {
            const promises = [];
            // Start multiple context requests concurrently
            for (let i = 0; i < 5; i++) {
                promises.push(provider.getCommandContext('Read', { file_path: `/test${i}.ts` }));
            }
            const results = await Promise.all(promises);
            (0, globals_1.expect)(results).toHaveLength(5);
            results.forEach(result => {
                (0, globals_1.expect)(result).toBeDefined();
                (0, globals_1.expect)(result.commandName).toBe('Read');
            });
        });
        (0, globals_1.test)('should maintain performance with repeated calls', async () => {
            const times = [];
            // Make multiple calls and measure time
            for (let i = 0; i < 10; i++) {
                const startTime = Date.now();
                await provider.getCommandContext('Read', {});
                const endTime = Date.now();
                times.push(endTime - startTime);
            }
            // Average time should be reasonable
            const averageTime = times.reduce((sum, time) => sum + time, 0) / times.length;
            (0, globals_1.expect)(averageTime).toBeLessThan(100); // Should average under 100ms
        });
    });
    (0, globals_1.describe)('Memory Learning Integration', () => {
        (0, globals_1.beforeEach)(async () => {
            await provider.initialize();
        });
        (0, globals_1.test)('should provide recommendations when enabled', async () => {
            const learningProvider = new command_provider_1.CommandContextProvider({
                enableMemoryLearning: true
            });
            await learningProvider.initialize();
            const result = await learningProvider.getCommandContext('Read', {});
            (0, globals_1.expect)(result.recommendations).toBeDefined();
            (0, globals_1.expect)(Array.isArray(result.recommendations)).toBe(true);
        });
        (0, globals_1.test)('should not provide recommendations when disabled', async () => {
            const noLearningProvider = new command_provider_1.CommandContextProvider({
                enableMemoryLearning: false
            });
            await noLearningProvider.initialize();
            const result = await noLearningProvider.getCommandContext('Read', {});
            (0, globals_1.expect)(result.recommendations).toEqual([]);
        });
        (0, globals_1.test)('should update learning metrics over time', async () => {
            // Generate some context and record results
            await provider.getCommandContext('Read', {});
            provider.recordCommandResult('Read', 'success');
            await provider.getCommandContext('Write', {});
            provider.recordCommandResult('Write', 'failure');
            const summary = provider.getContextSummary();
            (0, globals_1.expect)(summary.memory.patternsLearned).toBeGreaterThanOrEqual(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,