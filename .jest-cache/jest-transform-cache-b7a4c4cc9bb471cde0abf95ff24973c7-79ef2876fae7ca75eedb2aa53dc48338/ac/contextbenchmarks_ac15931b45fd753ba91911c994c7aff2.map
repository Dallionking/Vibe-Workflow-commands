{"version":3,"names":["cov_1gihfhbuw2","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","runBenchmarks","performance_monitor_1","require","context_fragment_1","context_assembler_1","lru_cache_1","context_memory_1","command_provider_1","context_types_1","DEFAULT_CONFIG","samples","warmup","fragmentCount","contentSize","enableMemoryLearning","ContextBenchmarks","constructor","monitor","PerformanceMonitor","factory","ContextFragmentFactory","assembler","ContextAssembler","cache","LRUCache","maxSize","ttl","memory","ContextMemoryManager","provider","CommandContextProvider","runAllBenchmarks","config","finalConfig","results","Map","console","log","set","benchmarkFragmentCreation","benchmarkFragmentValidation","benchmarkTokenEstimation","benchmarkCachePut","benchmarkCacheGet","benchmarkCacheEviction","benchmarkContextAssembly","benchmarkContextSelection","benchmarkTokenBudgetManagement","benchmarkPatternRecognition","benchmarkDecisionRecording","benchmarkMemoryRetrieval","benchmarkCommandContext","benchmarkValidationGates","error","content","generateContent","benchmark","createFragment","ContextPriority","MEDIUM","source","taskId","taskType","fragments","createTestFragments","index","fragment","length","isValid","validation","tokenEstimate","lastValidationResult","estimate","put","forEach","i","get","smallCache","assembleContext","totalTokens","reduce","sum","budget","withinBudget","lastBudgetResult","analyzeContext","recordDecision","storeMemory","getMemory","commands","command","getCommandContext","hasValidFragments","every","validationResult","passed","errors","warnings","lastValidationGateResult","generateReport","exportResults","exportMetrics","count","size","priority","Object","values","push","base","repeat","benchmarks","startTime","Date","now","duration","toFixed","result","averageDuration","throughput","report","issues","analyzePerformanceIssues","issue","process","exit","memoryStats","averageHeapUsed","standardDeviation"],"sources":["/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/performance/context-benchmarks.ts"],"sourcesContent":["/**\n * Context Engineering System Benchmarks\n * Comprehensive performance testing for all context components\n */\n\nimport { PerformanceMonitor } from './performance-monitor';\nimport { ContextFragmentFactory } from '../assembly/context-fragment';\nimport { ContextAssembler } from '../assembly/context-assembler';\nimport { LRUCache } from '../cache/lru-cache';\nimport { ContextMemoryManager } from '../memory/context-memory';\nimport { CommandContextProvider } from '../integration/command-provider';\nimport { ContextPriority, ContextFragment } from '../types/context.types';\n\n/**\n * Benchmark Configuration\n */\ninterface BenchmarkConfig {\n  samples: number;\n  warmup: number;\n  fragmentCount: number;\n  contentSize: 'small' | 'medium' | 'large';\n  enableMemoryLearning: boolean;\n}\n\n/**\n * Default benchmark configuration\n */\nconst DEFAULT_CONFIG: BenchmarkConfig = {\n  samples: 100,\n  warmup: 10,\n  fragmentCount: 50,\n  contentSize: 'medium',\n  enableMemoryLearning: true\n};\n\n/**\n * Context System Benchmark Suite\n */\nexport class ContextBenchmarks {\n  private monitor: PerformanceMonitor;\n  private factory: ContextFragmentFactory;\n  private assembler: ContextAssembler;\n  private cache: LRUCache<ContextFragment>;\n  private memory: ContextMemoryManager;\n  private provider: CommandContextProvider;\n\n  constructor() {\n    this.monitor = new PerformanceMonitor();\n    this.factory = new ContextFragmentFactory();\n    this.assembler = new ContextAssembler();\n    this.cache = new LRUCache({ maxSize: 1000, ttl: 60000 });\n    this.memory = new ContextMemoryManager();\n    this.provider = new CommandContextProvider();\n  }\n\n  /**\n   * Run all benchmarks\n   */\n  public async runAllBenchmarks(config: Partial<BenchmarkConfig> = {}): Promise<Map<string, any>> {\n    const finalConfig = { ...DEFAULT_CONFIG, ...config };\n    const results = new Map();\n\n    console.log('🚀 Starting Context Engineering Benchmarks...\\n');\n\n    try {\n      // Fragment operations\n      results.set('fragment-creation', await this.benchmarkFragmentCreation(finalConfig));\n      results.set('fragment-validation', await this.benchmarkFragmentValidation(finalConfig));\n      results.set('token-estimation', await this.benchmarkTokenEstimation(finalConfig));\n\n      // Cache operations\n      results.set('cache-put', await this.benchmarkCachePut(finalConfig));\n      results.set('cache-get', await this.benchmarkCacheGet(finalConfig));\n      results.set('cache-eviction', await this.benchmarkCacheEviction(finalConfig));\n\n      // Context assembly\n      results.set('context-assembly', await this.benchmarkContextAssembly(finalConfig));\n      results.set('context-selection', await this.benchmarkContextSelection(finalConfig));\n      results.set('token-budget', await this.benchmarkTokenBudgetManagement(finalConfig));\n\n      // Memory & learning\n      results.set('pattern-recognition', await this.benchmarkPatternRecognition(finalConfig));\n      results.set('decision-recording', await this.benchmarkDecisionRecording(finalConfig));\n      results.set('memory-retrieval', await this.benchmarkMemoryRetrieval(finalConfig));\n\n      // Integration\n      results.set('command-context', await this.benchmarkCommandContext(finalConfig));\n      results.set('validation-gates', await this.benchmarkValidationGates(finalConfig));\n\n      console.log('✅ All benchmarks completed successfully!\\n');\n      \n    } catch (error) {\n      console.error('❌ Benchmark failed:', error);\n      throw error;\n    }\n\n    return results;\n  }\n\n  /**\n   * Fragment creation benchmark\n   */\n  private async benchmarkFragmentCreation(config: BenchmarkConfig) {\n    const content = this.generateContent(config.contentSize);\n    \n    return await this.monitor.benchmark(\n      'Fragment Creation',\n      () => {\n        this.factory.createFragment(\n          'task-context',\n          content,\n          ContextPriority.MEDIUM,\n          { source: { type: 'task', taskId: 'test', taskType: 'implementation' } }\n        );\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Fragment validation benchmark\n   */\n  private async benchmarkFragmentValidation(config: BenchmarkConfig) {\n    const fragments = this.createTestFragments(config.fragmentCount, config.contentSize);\n    let index = 0;\n    \n    return await this.monitor.benchmark(\n      'Fragment Validation',\n      () => {\n        const fragment = fragments[index % fragments.length];\n        // Validate fragment by checking its properties\n        const isValid = fragment.validation.isValid && \n                        fragment.content.length > 0 &&\n                        fragment.tokenEstimate > 0;\n        index++;\n        // Store result for side effect\n        (global as any).lastValidationResult = isValid;\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Token estimation benchmark\n   */\n  private async benchmarkTokenEstimation(config: BenchmarkConfig) {\n    const content = this.generateContent(config.contentSize);\n    \n    return await this.monitor.benchmark(\n      'Token Estimation',\n      () => {\n        this.factory['tokenEstimator'].estimate(content);\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Cache put operation benchmark\n   */\n  private async benchmarkCachePut(config: BenchmarkConfig) {\n    const fragments = this.createTestFragments(config.fragmentCount, config.contentSize);\n    let index = 0;\n    \n    return await this.monitor.benchmark(\n      'Cache Put',\n      () => {\n        const fragment = fragments[index % fragments.length];\n        this.cache.put(`key-${index}`, fragment);\n        index++;\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Cache get operation benchmark\n   */\n  private async benchmarkCacheGet(config: BenchmarkConfig) {\n    // Pre-populate cache\n    const fragments = this.createTestFragments(config.fragmentCount, config.contentSize);\n    fragments.forEach((fragment, i) => {\n      this.cache.put(`key-${i}`, fragment);\n    });\n\n    let index = 0;\n    \n    return await this.monitor.benchmark(\n      'Cache Get',\n      () => {\n        this.cache.get(`key-${index % config.fragmentCount}`);\n        index++;\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Cache eviction benchmark\n   */\n  private async benchmarkCacheEviction(config: BenchmarkConfig) {\n    const smallCache = new LRUCache<ContextFragment>({ maxSize: 10, ttl: 60000 });\n    const fragments = this.createTestFragments(20, config.contentSize);\n    let index = 0;\n    \n    return await this.monitor.benchmark(\n      'Cache Eviction',\n      () => {\n        const fragment = fragments[index % fragments.length];\n        smallCache.put(`key-${index}`, fragment); // Will trigger eviction\n        index++;\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Context assembly benchmark\n   */\n  private async benchmarkContextAssembly(config: BenchmarkConfig) {\n    return await this.monitor.benchmark(\n      'Context Assembly',\n      async () => {\n        await this.assembler.assembleContext();\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Context selection benchmark\n   */\n  private async benchmarkContextSelection(config: BenchmarkConfig) {\n    const fragments = this.createTestFragments(config.fragmentCount, config.contentSize);\n    \n    return await this.monitor.benchmark(\n      'Context Selection',\n      () => {\n        this.assembler['selectFragments'](fragments);\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Token budget management benchmark\n   */\n  private async benchmarkTokenBudgetManagement(config: BenchmarkConfig) {\n    const fragments = this.createTestFragments(config.fragmentCount, config.contentSize);\n    \n    return await this.monitor.benchmark(\n      'Token Budget Management',\n      () => {\n        // Simulate token budget calculation\n        const totalTokens = fragments.reduce((sum, f) => sum + f.tokenEstimate, 0);\n        const budget = 8000;\n        const withinBudget = totalTokens <= budget;\n        // Store result for side effect\n        (global as any).lastBudgetResult = { totalTokens, budget, withinBudget };\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Pattern recognition benchmark\n   */\n  private async benchmarkPatternRecognition(config: BenchmarkConfig) {\n    const fragments = this.createTestFragments(config.fragmentCount, config.contentSize);\n    \n    return await this.monitor.benchmark(\n      'Pattern Recognition',\n      () => {\n        this.memory.analyzeContext(fragments);\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Decision recording benchmark\n   */\n  private async benchmarkDecisionRecording(config: BenchmarkConfig) {\n    const fragments = this.createTestFragments(10, config.contentSize);\n    let index = 0;\n    \n    return await this.monitor.benchmark(\n      'Decision Recording',\n      () => {\n        this.memory.recordDecision(\n          `context-${index}`,\n          'selected-fragments',\n          'optimal-priority-distribution',\n          index % 3 === 0 ? 'success' : 'partial',\n          fragments\n        );\n        index++;\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Memory retrieval benchmark\n   */\n  private async benchmarkMemoryRetrieval(config: BenchmarkConfig) {\n    // Pre-populate memory\n    for (let i = 0; i < 50; i++) {\n      this.memory.storeMemory(`key-${i}`, `content-${i}`, 'pattern', ContextPriority.MEDIUM);\n    }\n\n    let index = 0;\n    \n    return await this.monitor.benchmark(\n      'Memory Retrieval',\n      () => {\n        this.memory.getMemory(`key-${index % 50}`);\n        index++;\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Command context generation benchmark\n   */\n  private async benchmarkCommandContext(config: BenchmarkConfig) {\n    const commands = ['Read', 'Write', 'Bash', 'Edit', 'vibe-init'];\n    let index = 0;\n    \n    return await this.monitor.benchmark(\n      'Command Context Generation',\n      async () => {\n        const command = commands[index % commands.length];\n        await this.provider.getCommandContext(command);\n        index++;\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Validation gates benchmark\n   */\n  private async benchmarkValidationGates(config: BenchmarkConfig) {\n    const fragments = this.createTestFragments(10, config.contentSize);\n    \n    return await this.monitor.benchmark(\n      'Validation Gates',\n      () => {\n        // Simulate validation logic\n        const hasValidFragments = fragments.every(f => f.validation.isValid);\n        const totalTokens = fragments.reduce((sum, f) => sum + f.tokenEstimate, 0);\n        const withinBudget = totalTokens <= 8000;\n        const validationResult = {\n          passed: hasValidFragments && withinBudget,\n          errors: hasValidFragments ? [] : ['Invalid fragments detected'],\n          warnings: withinBudget ? [] : ['Token budget exceeded']\n        };\n        // Store result for side effect\n        (global as any).lastValidationGateResult = validationResult;\n      },\n      { samples: config.samples, warmup: config.warmup }\n    );\n  }\n\n  /**\n   * Generate performance report\n   */\n  public generateReport(): string {\n    return this.monitor.generateReport();\n  }\n\n  /**\n   * Export benchmark results\n   */\n  public exportResults(): string {\n    return this.monitor.exportMetrics();\n  }\n\n  /**\n   * Helper: Create test fragments\n   */\n  private createTestFragments(count: number, size: 'small' | 'medium' | 'large'): ContextFragment[] {\n    const fragments: ContextFragment[] = [];\n    const content = this.generateContent(size);\n    \n    for (let i = 0; i < count; i++) {\n      const priority = Object.values(ContextPriority)[i % Object.values(ContextPriority).length];\n      const fragment = this.factory.createFragment(\n        'task-context',\n        `${content}-${i}`,\n        priority as ContextPriority,\n        { source: { type: 'task', taskId: `test-${i}`, taskType: 'testing' } }\n      );\n      fragments.push(fragment);\n    }\n    \n    return fragments;\n  }\n\n  /**\n   * Helper: Generate content of specified size\n   */\n  private generateContent(size: 'small' | 'medium' | 'large'): string {\n    const base = 'This is test content for performance benchmarking. ';\n    \n    switch (size) {\n      case 'small':\n        return base.repeat(5); // ~250 characters\n      case 'medium':\n        return base.repeat(20); // ~1000 characters\n      case 'large':\n        return base.repeat(100); // ~5000 characters\n      default:\n        return base.repeat(20);\n    }\n  }\n}\n\n/**\n * Run benchmarks from command line\n */\nexport async function runBenchmarks(): Promise<void> {\n  const benchmarks = new ContextBenchmarks();\n  \n  console.log('📊 Context Engineering Performance Benchmarks\\n');\n  console.log('Configuration:');\n  console.log(`- Samples per test: ${DEFAULT_CONFIG.samples}`);\n  console.log(`- Warmup runs: ${DEFAULT_CONFIG.warmup}`);\n  console.log(`- Fragment count: ${DEFAULT_CONFIG.fragmentCount}`);\n  console.log(`- Content size: ${DEFAULT_CONFIG.contentSize}`);\n  console.log('');\n\n  const startTime = Date.now();\n  \n  try {\n    const results = await benchmarks.runAllBenchmarks();\n    const duration = Date.now() - startTime;\n    \n    console.log(`\\n⏱️  Total benchmark time: ${(duration / 1000).toFixed(2)}s\\n`);\n    \n    // Print summary\n    console.log('📈 Performance Summary:');\n    for (const [name, result] of results) {\n      console.log(`${name}: ${result.averageDuration.toFixed(2)}ms avg, ${result.throughput.toFixed(2)} ops/sec`);\n    }\n    \n    // Generate detailed report\n    const report = benchmarks.generateReport();\n    console.log('\\n' + report);\n    \n    // Check for performance issues\n    const issues = analyzePerformanceIssues(results);\n    if (issues.length > 0) {\n      console.log('\\n⚠️  Performance Issues Detected:');\n      issues.forEach(issue => console.log(`- ${issue}`));\n    } else {\n      console.log('\\n✅ No performance issues detected!');\n    }\n    \n  } catch (error) {\n    console.error('❌ Benchmark failed:', error);\n    process.exit(1);\n  }\n}\n\n/**\n * Analyze benchmark results for performance issues\n */\nfunction analyzePerformanceIssues(results: Map<string, any>): string[] {\n  const issues: string[] = [];\n  \n  for (const [name, result] of results) {\n    // Check for slow operations (>100ms average)\n    if (result.averageDuration > 100) {\n      issues.push(`${name} is slow: ${result.averageDuration.toFixed(2)}ms average`);\n    }\n    \n    // Check for high memory usage (>10MB average)\n    if (result.memoryStats.averageHeapUsed > 10 * 1024 * 1024) {\n      issues.push(`${name} uses high memory: ${(result.memoryStats.averageHeapUsed / 1024 / 1024).toFixed(2)}MB average`);\n    }\n    \n    // Check for low throughput (<10 ops/sec)\n    if (result.throughput < 10) {\n      issues.push(`${name} has low throughput: ${result.throughput.toFixed(2)} ops/sec`);\n    }\n    \n    // Check for high variability (std dev > 50% of average)\n    if (result.standardDeviation > result.averageDuration * 0.5) {\n      issues.push(`${name} has high variability: ${result.standardDeviation.toFixed(2)}ms std dev`);\n    }\n  }\n  \n  return issues;\n}\n\n// Export for use as module\nexport { BenchmarkConfig, DEFAULT_CONFIG };"],"mappings":"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","ignoreList":[]}