{"version":3,"names":["cov_1pii9piz44","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","context_types_1","require","ContextFragmentFactory","constructor","tokenEstimator","TokenEstimator","createFragment","content","priority","metadata","id","generateFragmentId","tokenEstimate","estimate","timestamp","Date","now","fullMetadata","source","provider","dataType","ttl","tags","dependencies","created","lastModified","validation","validateContent","createGlobalFragment","subtype","ContextPriority","HIGH","scope","createPhaseFragment","phaseNumber","phaseName","MEDIUM","createTaskFragment","taskId","taskType","createMemoryFragment","memoryType","LOW","createCommandFragment","commandName","commandType","updateFragment","fragment","newContent","updatedFragment","isExpired","expirationTime","compressFragment","targetTokens","compressionRatio","targetLength","Math","floor","length","truncatedContent","substring","compressedContent","random","toString","errors","warnings","trim","push","code","message","severity","validateGlobalRules","validatePhaseContext","validateTaskContext","tokens","suggestion","isValid","lastValidated","requiredPatterns","missingPatterns","filter","pattern","toLowerCase","includes","join","requiredElements","missingElements","element","exports","AVG_CHARS_PER_TOKEN","tokenCache","Map","has","get","ceil","set","size","firstKey","keys","next","value","delete","estimateTotal","fragments","reduce","total","clearCache","clear","FragmentCollection","add","remove","fragmentId","getAll","Array","from","values","getByType","getByPriority","minPriority","getSortedByPriority","sort","a","removeExpired","factory","removedCount","getTotalTokens","contextFragmentFactory"],"sources":["/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/assembly/context-fragment.ts"],"sourcesContent":["/**\n * Context Fragment Implementation\n * Atomic units of context information with priority and token management\n */\n\nimport {\n  ContextFragment,\n  ContextFragmentType,\n  ContextPriority,\n  ContextMetadata,\n  FragmentValidation,\n  ValidationError,\n  ValidationWarning\n} from '../types/context.types';\n\n/**\n * Context Fragment Factory\n * Creates and manages context fragments with proper validation and token estimation\n */\nexport class ContextFragmentFactory {\n  private tokenEstimator: TokenEstimator;\n\n  constructor() {\n    this.tokenEstimator = new TokenEstimator();\n  }\n\n  /**\n   * Create a new context fragment\n   */\n  public createFragment(\n    type: ContextFragmentType,\n    content: string,\n    priority: ContextPriority,\n    metadata: Partial<ContextMetadata>\n  ): ContextFragment {\n    const id = this.generateFragmentId(type);\n    const tokenEstimate = this.tokenEstimator.estimate(content);\n    const timestamp = Date.now();\n\n    const fullMetadata: ContextMetadata = {\n      source: metadata.source || { type: 'external', provider: 'unknown', dataType: 'text' },\n      priority,\n      ttl: metadata.ttl,\n      tags: metadata.tags || [type],\n      dependencies: metadata.dependencies || [],\n      created: timestamp,\n      lastModified: timestamp\n    };\n\n    const validation = this.validateContent(type, content);\n\n    return {\n      id,\n      type,\n      content,\n      priority,\n      tokenEstimate,\n      metadata: fullMetadata,\n      validation\n    };\n  }\n\n  /**\n   * Create fragment from global context\n   */\n  public createGlobalFragment(\n    subtype: 'rules' | 'config',\n    content: string,\n    priority: ContextPriority = ContextPriority.HIGH\n  ): ContextFragment {\n    const type: ContextFragmentType = subtype === 'rules' ? 'global-rules' : 'global-config';\n    \n    return this.createFragment(type, content, priority, {\n      source: { type: 'global', scope: 'system' },\n      tags: ['global', subtype],\n      ttl: undefined // Global context doesn't expire\n    });\n  }\n\n  /**\n   * Create fragment from phase context\n   */\n  public createPhaseFragment(\n    phaseNumber: number,\n    phaseName: string,\n    subtype: 'context' | 'history',\n    content: string,\n    priority: ContextPriority = ContextPriority.MEDIUM\n  ): ContextFragment {\n    const type: ContextFragmentType = subtype === 'context' ? 'phase-context' : 'phase-history';\n    \n    return this.createFragment(type, content, priority, {\n      source: { type: 'phase', phaseNumber, phaseName },\n      tags: ['phase', `phase-${phaseNumber}`, subtype],\n      ttl: 24 * 60 * 60 * 1000 // 24 hours\n    });\n  }\n\n  /**\n   * Create fragment from task context\n   */\n  public createTaskFragment(\n    taskId: string,\n    taskType: string,\n    subtype: 'context' | 'state',\n    content: string,\n    priority: ContextPriority = ContextPriority.MEDIUM\n  ): ContextFragment {\n    const type: ContextFragmentType = subtype === 'context' ? 'task-context' : 'task-state';\n    \n    return this.createFragment(type, content, priority, {\n      source: { type: 'task', taskId, taskType },\n      tags: ['task', taskType, subtype],\n      ttl: 60 * 60 * 1000 // 1 hour\n    });\n  }\n\n  /**\n   * Create fragment from memory\n   */\n  public createMemoryFragment(\n    memoryType: 'pattern' | 'decision',\n    content: string,\n    priority: ContextPriority = ContextPriority.LOW\n  ): ContextFragment {\n    const type: ContextFragmentType = `memory-${memoryType}`;\n    \n    return this.createFragment(type, content, priority, {\n      source: { type: 'memory', memoryType },\n      tags: ['memory', memoryType],\n      ttl: 7 * 24 * 60 * 60 * 1000 // 7 days\n    });\n  }\n\n  /**\n   * Create fragment from command context\n   */\n  public createCommandFragment(\n    commandName: string,\n    commandType: string,\n    content: string,\n    priority: ContextPriority = ContextPriority.MEDIUM\n  ): ContextFragment {\n    return this.createFragment('command-context', content, priority, {\n      source: { type: 'command', commandName, commandType },\n      tags: ['command', commandName, commandType],\n      ttl: 30 * 60 * 1000 // 30 minutes\n    });\n  }\n\n  /**\n   * Update fragment content and recalculate tokens\n   */\n  public updateFragment(fragment: ContextFragment, newContent: string): ContextFragment {\n    const updatedFragment = { ...fragment };\n    updatedFragment.content = newContent;\n    updatedFragment.tokenEstimate = this.tokenEstimator.estimate(newContent);\n    updatedFragment.metadata.lastModified = Date.now();\n    updatedFragment.validation = this.validateContent(fragment.type, newContent);\n\n    return updatedFragment;\n  }\n\n  /**\n   * Check if fragment is expired\n   */\n  public isExpired(fragment: ContextFragment): boolean {\n    if (!fragment.metadata.ttl) {\n      return false; // No TTL means never expires\n    }\n\n    const now = Date.now();\n    const expirationTime = fragment.metadata.created + fragment.metadata.ttl;\n    return now > expirationTime;\n  }\n\n  /**\n   * Compress fragment content to reduce token usage\n   */\n  public compressFragment(fragment: ContextFragment, targetTokens: number): ContextFragment {\n    if (fragment.tokenEstimate <= targetTokens) {\n      return fragment; // Already within target\n    }\n\n    const compressionRatio = targetTokens / fragment.tokenEstimate;\n    const targetLength = Math.floor(fragment.content.length * compressionRatio);\n    \n    // Simple compression: truncate and add summary\n    const truncatedContent = fragment.content.substring(0, targetLength - 50);\n    const compressedContent = truncatedContent + '\\n... [content compressed]';\n\n    return this.updateFragment(fragment, compressedContent);\n  }\n\n  // Private helper methods\n\n  private generateFragmentId(type: ContextFragmentType): string {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 8);\n    return `${type}-${timestamp}-${random}`;\n  }\n\n  private validateContent(type: ContextFragmentType, content: string): FragmentValidation {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n\n    // Basic validation\n    if (!content || content.trim().length === 0) {\n      errors.push({\n        code: 'EMPTY_CONTENT',\n        message: 'Fragment content cannot be empty',\n        severity: 'error'\n      });\n    }\n\n    // Type-specific validation\n    switch (type) {\n      case 'global-rules':\n        this.validateGlobalRules(content, errors, warnings);\n        break;\n      case 'phase-context':\n        this.validatePhaseContext(content, errors, warnings);\n        break;\n      case 'task-context':\n        this.validateTaskContext(content, errors, warnings);\n        break;\n    }\n\n    // Token limit warnings\n    const tokens = this.tokenEstimator.estimate(content);\n    if (tokens > 1000) {\n      warnings.push({\n        code: 'HIGH_TOKEN_COUNT',\n        message: `Fragment has ${tokens} tokens, consider compression`,\n        suggestion: 'Use compressFragment() to reduce token usage'\n      });\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      lastValidated: Date.now()\n    };\n  }\n\n  private validateGlobalRules(content: string, errors: ValidationError[], warnings: ValidationWarning[]): void {\n    // Check for required global rule patterns\n    const requiredPatterns = ['systematic', 'quality', 'context'];\n    const missingPatterns = requiredPatterns.filter(pattern => \n      !content.toLowerCase().includes(pattern)\n    );\n\n    if (missingPatterns.length > 0) {\n      warnings.push({\n        code: 'MISSING_RULE_PATTERNS',\n        message: `Missing recommended patterns: ${missingPatterns.join(', ')}`,\n        suggestion: 'Consider including systematic development, quality standards, and context preservation rules'\n      });\n    }\n  }\n\n  private validatePhaseContext(content: string, errors: ValidationError[], warnings: ValidationWarning[]): void {\n    // Check for phase context structure\n    const requiredElements = ['objective', 'progress', 'tasks'];\n    const missingElements = requiredElements.filter(element => \n      !content.toLowerCase().includes(element)\n    );\n\n    if (missingElements.length > 0) {\n      warnings.push({\n        code: 'INCOMPLETE_PHASE_CONTEXT',\n        message: `Missing phase elements: ${missingElements.join(', ')}`,\n        suggestion: 'Include phase objectives, progress status, and task information'\n      });\n    }\n  }\n\n  private validateTaskContext(content: string, errors: ValidationError[], warnings: ValidationWarning[]): void {\n    // Check for task context structure\n    if (!content.includes('task') && !content.includes('objective')) {\n      warnings.push({\n        code: 'UNCLEAR_TASK_CONTEXT',\n        message: 'Task context should clearly describe the task and its objective',\n        suggestion: 'Include task description and objective in the content'\n      });\n    }\n  }\n}\n\n/**\n * Token Estimator\n * Estimates token count for text content\n */\nexport class TokenEstimator {\n  private readonly AVG_CHARS_PER_TOKEN = 3.5; // Average for English text\n  private readonly tokenCache = new Map<string, number>();\n\n  /**\n   * Estimate token count for content\n   */\n  public estimate(content: string): number {\n    // Check cache first\n    if (this.tokenCache.has(content)) {\n      return this.tokenCache.get(content)!;\n    }\n\n    // Simple estimation based on character count\n    // More sophisticated tokenization could be added later\n    const estimate = Math.ceil(content.length / this.AVG_CHARS_PER_TOKEN);\n\n    // Cache result\n    this.tokenCache.set(content, estimate);\n\n    // Clean cache if it gets too large\n    if (this.tokenCache.size > 1000) {\n      const firstKey = this.tokenCache.keys().next().value;\n      if (firstKey) {\n        this.tokenCache.delete(firstKey);\n      }\n    }\n\n    return estimate;\n  }\n\n  /**\n   * Estimate token count for multiple fragments\n   */\n  public estimateTotal(fragments: ContextFragment[]): number {\n    return fragments.reduce((total, fragment) => total + fragment.tokenEstimate, 0);\n  }\n\n  /**\n   * Clear token cache\n   */\n  public clearCache(): void {\n    this.tokenCache.clear();\n  }\n}\n\n/**\n * Fragment Collection\n * Manages collections of context fragments with utility methods\n */\nexport class FragmentCollection {\n  private fragments: Map<string, ContextFragment> = new Map();\n\n  /**\n   * Add fragment to collection\n   */\n  public add(fragment: ContextFragment): void {\n    this.fragments.set(fragment.id, fragment);\n  }\n\n  /**\n   * Remove fragment from collection\n   */\n  public remove(fragmentId: string): boolean {\n    return this.fragments.delete(fragmentId);\n  }\n\n  /**\n   * Get fragment by ID\n   */\n  public get(fragmentId: string): ContextFragment | undefined {\n    return this.fragments.get(fragmentId);\n  }\n\n  /**\n   * Get all fragments\n   */\n  public getAll(): ContextFragment[] {\n    return Array.from(this.fragments.values());\n  }\n\n  /**\n   * Get fragments by type\n   */\n  public getByType(type: ContextFragmentType): ContextFragment[] {\n    return this.getAll().filter(fragment => fragment.type === type);\n  }\n\n  /**\n   * Get fragments by priority (minimum priority)\n   */\n  public getByPriority(minPriority: ContextPriority): ContextFragment[] {\n    return this.getAll().filter(fragment => fragment.priority >= minPriority);\n  }\n\n  /**\n   * Get fragments sorted by priority (highest first)\n   */\n  public getSortedByPriority(): ContextFragment[] {\n    return this.getAll().sort((a, b) => b.priority - a.priority);\n  }\n\n  /**\n   * Remove expired fragments\n   */\n  public removeExpired(factory: ContextFragmentFactory): number {\n    let removedCount = 0;\n    \n    for (const [id, fragment] of this.fragments) {\n      if (factory.isExpired(fragment)) {\n        this.fragments.delete(id);\n        removedCount++;\n      }\n    }\n\n    return removedCount;\n  }\n\n  /**\n   * Get total token count\n   */\n  public getTotalTokens(): number {\n    return this.getAll().reduce((total, fragment) => total + fragment.tokenEstimate, 0);\n  }\n\n  /**\n   * Clear all fragments\n   */\n  public clear(): void {\n    this.fragments.clear();\n  }\n\n  /**\n   * Get collection size\n   */\n  public size(): number {\n    return this.fragments.size;\n  }\n}\n\n/**\n * Singleton instances\n */\nexport const contextFragmentFactory = new ContextFragmentFactory();\nexport const tokenEstimator = new TokenEstimator();"],"mappings":"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","ignoreList":[]}