{"version":3,"names":["cov_2mzdomiho","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","context_types_1","require","PhaseContextManager","constructor","phaseContext","phaseHistory","Map","initializePhase","phaseNumber","phaseName","objectives","requirements","dependencies","contextId","Date","now","timestamp","phaseData","progress","createInitialProgress","length","outputs","validationCriteria","generateValidationCriteria","phaseState","status","currentTier","currentSubtask","completedTasks","blockers","metadata","source","priority","ContextPriority","HIGH","tags","toLowerCase","replace","map","dep","created","lastModified","id","layer","data","set","getCurrentPhase","getPhase","get","updateProgress","Error","Set","totalTasks","getTotalTaskCount","completedCount","completionPercentage","tasksCompleted","tasksTotal","addOutput","output","push","addBlocker","blocker","severity","resolveBlocker","blockerId","resolution","find","filter","criticalBlockers","validateRequirements","results","criteria","requirement","req","passed","satisfied","checkDependencies","every","completePhase","finalOutputs","validationResults","allValid","v","console","warn","getPhaseSummary","toFixed","slice","join","getAllPhases","Array","from","values","exportPhaseContext","importPhaseContext","context","requirementCount","estimateTaskCount","timeSpent","estimatedRemaining","estimateTimeRemaining","description","validator","getValidatorForRequirement","required","Math","max","exports","phaseContextManager"],"sources":["/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/layers/phase.ts"],"sourcesContent":["/**\n * L2: Phase Context Layer Implementation\n * Phase-specific context that changes based on current development phase\n */\n\nimport {\n  PhaseContextLayer,\n  PhaseContextData,\n  PhaseState,\n  PhaseRequirement,\n  PhaseProgress,\n  PhaseOutput,\n  ValidationCriteria,\n  PhaseBlocker,\n  PhaseDependency,\n  ContextPriority,\n  ContextMetadata\n} from '../types/context.types';\n\n/**\n * Phase Context Manager\n * Manages L2 context specific to the current development phase\n */\nexport class PhaseContextManager {\n  private phaseContext: PhaseContextLayer | null = null;\n  private phaseHistory: Map<number, PhaseContextLayer> = new Map();\n\n  /**\n   * Initialize phase context for a specific phase\n   */\n  public async initializePhase(\n    phaseNumber: number,\n    phaseName: string,\n    objectives: string[],\n    requirements: PhaseRequirement[],\n    dependencies: PhaseDependency[] = []\n  ): Promise<PhaseContextLayer> {\n    const contextId = `phase-${phaseNumber}-${Date.now()}`;\n    const timestamp = Date.now();\n\n    const phaseData: PhaseContextData = {\n      objectives,\n      requirements,\n      progress: this.createInitialProgress(requirements.length),\n      outputs: [],\n      validationCriteria: this.generateValidationCriteria(requirements)\n    };\n\n    const phaseState: PhaseState = {\n      status: 'not-started',\n      currentTier: 1,\n      currentSubtask: '',\n      completedTasks: [],\n      blockers: []\n    };\n\n    const metadata: ContextMetadata = {\n      source: { type: 'phase', phaseNumber, phaseName },\n      priority: ContextPriority.HIGH,\n      tags: ['phase', `phase-${phaseNumber}`, phaseName.toLowerCase().replace(/\\s+/g, '-')],\n      dependencies: dependencies.map(dep => `phase-${dep.phaseNumber}`),\n      created: timestamp,\n      lastModified: timestamp\n    };\n\n    this.phaseContext = {\n      id: contextId,\n      timestamp,\n      version: '1.0.0',\n      layer: 'phase',\n      phaseNumber,\n      phaseName,\n      data: phaseData,\n      metadata,\n      phaseState,\n      dependencies\n    };\n\n    // Store in history\n    this.phaseHistory.set(phaseNumber, { ...this.phaseContext });\n\n    return this.phaseContext;\n  }\n\n  /**\n   * Get current phase context\n   */\n  public getCurrentPhase(): PhaseContextLayer | null {\n    return this.phaseContext;\n  }\n\n  /**\n   * Get phase context by number\n   */\n  public getPhase(phaseNumber: number): PhaseContextLayer | null {\n    return this.phaseHistory.get(phaseNumber) || null;\n  }\n\n  /**\n   * Update phase progress\n   */\n  public updateProgress(\n    completedTasks: string[],\n    currentTier?: number,\n    currentSubtask?: string\n  ): void {\n    if (!this.phaseContext) {\n      throw new Error('No active phase context');\n    }\n\n    // Update completed tasks\n    this.phaseContext.phaseState.completedTasks = [\n      ...new Set([...this.phaseContext.phaseState.completedTasks, ...completedTasks])\n    ];\n\n    // Update current position\n    if (currentTier !== undefined) {\n      this.phaseContext.phaseState.currentTier = currentTier;\n    }\n    if (currentSubtask !== undefined) {\n      this.phaseContext.phaseState.currentSubtask = currentSubtask;\n    }\n\n    // Recalculate progress\n    const totalTasks = this.getTotalTaskCount();\n    const completedCount = this.phaseContext.phaseState.completedTasks.length;\n    \n    this.phaseContext.data.progress = {\n      ...this.phaseContext.data.progress,\n      completionPercentage: totalTasks > 0 ? (completedCount / totalTasks) * 100 : 0,\n      tasksCompleted: completedCount,\n      tasksTotal: totalTasks\n    };\n\n    // Update status based on progress\n    if (completedCount === 0) {\n      this.phaseContext.phaseState.status = 'not-started';\n    } else if (completedCount === totalTasks) {\n      this.phaseContext.phaseState.status = 'completed';\n    } else {\n      this.phaseContext.phaseState.status = 'in-progress';\n    }\n\n    this.phaseContext.metadata.lastModified = Date.now();\n  }\n\n  /**\n   * Add phase output\n   */\n  public addOutput(output: PhaseOutput): void {\n    if (!this.phaseContext) {\n      throw new Error('No active phase context');\n    }\n\n    this.phaseContext.data.outputs.push(output);\n    this.phaseContext.metadata.lastModified = Date.now();\n  }\n\n  /**\n   * Add phase blocker\n   */\n  public addBlocker(blocker: PhaseBlocker): void {\n    if (!this.phaseContext) {\n      throw new Error('No active phase context');\n    }\n\n    this.phaseContext.phaseState.blockers.push(blocker);\n    \n    // Update status if critical blocker\n    if (blocker.severity === 'critical') {\n      this.phaseContext.phaseState.status = 'blocked';\n    }\n\n    this.phaseContext.metadata.lastModified = Date.now();\n  }\n\n  /**\n   * Resolve phase blocker\n   */\n  public resolveBlocker(blockerId: string, resolution: string): boolean {\n    if (!this.phaseContext) {\n      throw new Error('No active phase context');\n    }\n\n    const blocker = this.phaseContext.phaseState.blockers.find(b => b.id === blockerId);\n    if (!blocker) {\n      return false;\n    }\n\n    blocker.resolution = resolution;\n    \n    // Remove resolved blocker\n    this.phaseContext.phaseState.blockers = this.phaseContext.phaseState.blockers.filter(\n      b => b.id !== blockerId\n    );\n\n    // Update status if no more critical blockers\n    const criticalBlockers = this.phaseContext.phaseState.blockers.filter(\n      b => b.severity === 'critical'\n    );\n    \n    if (criticalBlockers.length === 0 && this.phaseContext.phaseState.status === 'blocked') {\n      this.phaseContext.phaseState.status = 'in-progress';\n    }\n\n    this.phaseContext.metadata.lastModified = Date.now();\n    return true;\n  }\n\n  /**\n   * Validate phase requirements\n   */\n  public validateRequirements(): ValidationCriteria[] {\n    if (!this.phaseContext) {\n      throw new Error('No active phase context');\n    }\n\n    const results: ValidationCriteria[] = [];\n\n    for (const criteria of this.phaseContext.data.validationCriteria) {\n      const requirement = this.phaseContext.data.requirements.find(\n        req => req.id === criteria.id\n      );\n\n      if (requirement) {\n        criteria.passed = requirement.satisfied;\n        results.push(criteria);\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Check if phase dependencies are satisfied\n   */\n  public checkDependencies(): boolean {\n    if (!this.phaseContext) {\n      return false;\n    }\n\n    return this.phaseContext.dependencies.every(dep => {\n      if (dep.type === 'optional') return true;\n      return dep.satisfied;\n    });\n  }\n\n  /**\n   * Mark phase as completed\n   */\n  public completePhase(finalOutputs: PhaseOutput[]): void {\n    if (!this.phaseContext) {\n      throw new Error('No active phase context');\n    }\n\n    // Add final outputs\n    this.phaseContext.data.outputs.push(...finalOutputs);\n\n    // Update state\n    this.phaseContext.phaseState.status = 'completed';\n    this.phaseContext.data.progress.completionPercentage = 100;\n\n    // Validate all requirements\n    const validationResults = this.validateRequirements();\n    const allValid = validationResults.every(v => v.passed === true);\n\n    if (!allValid) {\n      console.warn('Phase completed but not all validation criteria passed');\n    }\n\n    this.phaseContext.metadata.lastModified = Date.now();\n\n    // Update history\n    this.phaseHistory.set(this.phaseContext.phaseNumber, { ...this.phaseContext });\n  }\n\n  /**\n   * Get phase summary for context assembly\n   */\n  public getPhaseSummary(): string {\n    if (!this.phaseContext) {\n      return 'No active phase';\n    }\n\n    const { phaseName, phaseNumber, phaseState, data } = this.phaseContext;\n    const { status, currentTier, completedTasks } = phaseState;\n    const { completionPercentage, tasksCompleted, tasksTotal } = data.progress;\n\n    return `Phase ${phaseNumber}: ${phaseName}\nStatus: ${status}\nProgress: ${completionPercentage.toFixed(1)}% (${tasksCompleted}/${tasksTotal} tasks)\nCurrent Tier: ${currentTier}\nRecent Tasks: ${completedTasks.slice(-3).join(', ')}\nObjectives: ${data.objectives.slice(0, 2).join(', ')}${data.objectives.length > 2 ? '...' : ''}`;\n  }\n\n  /**\n   * Get all phase contexts for historical analysis\n   */\n  public getAllPhases(): PhaseContextLayer[] {\n    return Array.from(this.phaseHistory.values());\n  }\n\n  /**\n   * Export phase context for serialization\n   */\n  public exportPhaseContext(): PhaseContextLayer | null {\n    return this.phaseContext ? { ...this.phaseContext } : null;\n  }\n\n  /**\n   * Import phase context from serialized data\n   */\n  public importPhaseContext(context: PhaseContextLayer): void {\n    this.phaseContext = context;\n    this.phaseHistory.set(context.phaseNumber, { ...context });\n  }\n\n  // Private helper methods\n\n  private createInitialProgress(requirementCount: number): PhaseProgress {\n    return {\n      completionPercentage: 0,\n      tasksCompleted: 0,\n      tasksTotal: this.estimateTaskCount(requirementCount),\n      timeSpent: 0,\n      estimatedRemaining: this.estimateTimeRemaining(requirementCount)\n    };\n  }\n\n  private generateValidationCriteria(requirements: PhaseRequirement[]): ValidationCriteria[] {\n    return requirements.map(req => ({\n      id: req.id,\n      description: req.description,\n      validator: this.getValidatorForRequirement(req),\n      required: req.priority >= ContextPriority.HIGH,\n      passed: undefined\n    }));\n  }\n\n  private getValidatorForRequirement(requirement: PhaseRequirement): string {\n    switch (requirement.type) {\n      case 'functional':\n        return 'function-validator';\n      case 'non-functional':\n        return 'performance-validator';\n      case 'quality':\n        return 'quality-validator';\n      case 'documentation':\n        return 'documentation-validator';\n      default:\n        return 'generic-validator';\n    }\n  }\n\n  private getTotalTaskCount(): number {\n    // This would be calculated based on phase requirements and structure\n    // For now, return estimated count\n    return this.phaseContext?.data.progress.tasksTotal || 0;\n  }\n\n  private estimateTaskCount(requirementCount: number): number {\n    // Estimate based on requirement count and complexity\n    return Math.max(requirementCount * 2, 10);\n  }\n\n  private estimateTimeRemaining(requirementCount: number): number {\n    // Estimate in hours based on requirement count\n    return requirementCount * 4; // 4 hours per requirement on average\n  }\n}\n\n/**\n * Singleton instance for phase context management\n */\nexport const phaseContextManager = new PhaseContextManager();"],"mappings":"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","ignoreList":[]}