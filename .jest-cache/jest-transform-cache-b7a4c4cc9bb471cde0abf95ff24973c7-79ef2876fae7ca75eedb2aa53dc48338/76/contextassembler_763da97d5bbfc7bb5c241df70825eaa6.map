{"version":3,"names":["cov_1k45k240p6","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","context_types_1","require","context_fragment_1","global_1","phase_1","task_1","ContextAssembler","constructor","config","fragmentFactory","ContextFragmentFactory","tokenEstimator","TokenEstimator","buildDefaultConfig","assembleContext","commandName","additionalFragments","startTime","Date","now","allFragments","collectAllFragments","push","validFragments","removeExpiredFragments","selectedFragments","selectFragments","budgetResult","applyTokenBudget","result","fragments","totalTokens","budgetUsed","budgetRemaining","tokenBudget","total","priorityBreakdown","calculatePriorityBreakdown","fallbacksApplied","warnings","logAssemblyMetrics","assembleForCommand","commandContext","getCommandContext","commandFragment","createCommandFragment","description","ContextPriority","HIGH","updateConfig","updates","getConfig","globalContext","phaseContext","taskContext","Promise","all","resolve","globalContextManager","getContext","phaseContextManager","getCurrentPhase","taskContextManager","getCurrentTask","extractGlobalFragments","extractPhaseFragments","extractTaskFragments","error","console","warn","Error","message","String","rulesContent","rules","filter","rule","enabled","map","join","createGlobalFragment","CRITICAL","configContent","buildGlobalConfigContent","phaseContent","getPhaseSummary","createPhaseFragment","phaseNumber","phaseName","data","progress","completionPercentage","historyContent","buildPhaseHistoryContent","MEDIUM","taskContent","getTaskSummary","createTaskFragment","taskId","taskType","getContextForCommand","stateContent","buildTaskStateContent","fragment","isExpired","sorted","sort","a","priority","metadata","lastModified","weighted","applyPriorityWeights","weights","priorityWeights","selected","totalBudget","available","allocations","calculatePriorityAllocations","LOW","MINIMAL","priorityFragments","allocation","selectedInPriority","selectWithinBudget","budget","currentFragments","estimateTotal","fallbackResult","applyFallbackStrategies","length","strategy","fallbackStrategy","removed","removeLowPriorityFragments","remaining","fragmentsAffected","id","tokensSaved","compressed","compressFragments","affectedIds","oldest","removeOldestFragments","count","splice","targetTokensPerFragment","Math","floor","tokenEstimate","originalTokens","compressedFragment","compressFragment","created","defaultBudget","reserved","used","phase","task","memory","buffer","defaultWeights","cacheConfig","maxSize","ttl","persistToDisk","totalWeight","Object","values","reduce","sum","weight","usedTokens","breakdown","forEach","commandContexts","mcpTools","configuration","tool","qualityStandards","standard","threshold","completedTasks","blockers","phaseState","recentTasks","slice","activeBlockers","resolution","params","relevantParameters","p","value","assemblyTime","log","toFixed","exports","contextAssembler"],"sources":["/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/assembly/context-assembler.ts"],"sourcesContent":["/**\n * Context Assembler - Intelligent Context Selection and Assembly\n * Implements priority-based selection with token budget management\n */\n\nimport {\n  ContextFragment,\n  ContextPriority,\n  TokenBudget,\n  TokenAllocation,\n  ContextAssemblyConfig,\n  PriorityWeights,\n  FallbackStrategy,\n  ContextLayers\n} from '../types/context.types';\n\nimport { \n  ContextFragmentFactory, \n  FragmentCollection, \n  TokenEstimator \n} from './context-fragment';\n\nimport { globalContextManager } from '../layers/global';\nimport { phaseContextManager } from '../layers/phase';\nimport { taskContextManager } from '../layers/task';\n\n/**\n * Context Assembly Result\n */\nexport interface ContextAssemblyResult {\n  fragments: ContextFragment[];\n  totalTokens: number;\n  budgetUsed: number;\n  budgetRemaining: number;\n  priorityBreakdown: Record<ContextPriority, number>;\n  fallbacksApplied: FallbackApplication[];\n  warnings: string[];\n}\n\nexport interface FallbackApplication {\n  strategy: FallbackStrategy;\n  fragmentsAffected: string[];\n  tokensSaved: number;\n  description: string;\n}\n\n/**\n * Context Assembler\n * Main class for assembling context with intelligent selection and budget management\n */\nexport class ContextAssembler {\n  private config: ContextAssemblyConfig;\n  private fragmentFactory: ContextFragmentFactory;\n  private tokenEstimator: TokenEstimator;\n\n  constructor(config?: Partial<ContextAssemblyConfig>) {\n    this.fragmentFactory = new ContextFragmentFactory();\n    this.tokenEstimator = new TokenEstimator();\n    this.config = this.buildDefaultConfig(config);\n  }\n\n  /**\n   * Assemble context with intelligent selection and budget management\n   */\n  public async assembleContext(\n    commandName?: string,\n    additionalFragments: ContextFragment[] = []\n  ): Promise<ContextAssemblyResult> {\n    const startTime = Date.now();\n    \n    // Collect fragments from all layers\n    const allFragments = await this.collectAllFragments(commandName);\n    allFragments.push(...additionalFragments);\n\n    // Remove expired fragments\n    const validFragments = this.removeExpiredFragments(allFragments);\n\n    // Apply intelligent selection\n    const selectedFragments = this.selectFragments(validFragments);\n\n    // Apply token budget management\n    const budgetResult = this.applyTokenBudget(selectedFragments);\n\n    // Build assembly result\n    const result: ContextAssemblyResult = {\n      fragments: budgetResult.fragments,\n      totalTokens: budgetResult.totalTokens,\n      budgetUsed: budgetResult.budgetUsed,\n      budgetRemaining: this.config.tokenBudget.total - budgetResult.budgetUsed,\n      priorityBreakdown: this.calculatePriorityBreakdown(budgetResult.fragments),\n      fallbacksApplied: budgetResult.fallbacksApplied,\n      warnings: budgetResult.warnings\n    };\n\n    // Log assembly metrics\n    this.logAssemblyMetrics(result, Date.now() - startTime);\n\n    return result;\n  }\n\n  /**\n   * Assemble context for specific command\n   */\n  public async assembleForCommand(commandName: string): Promise<ContextAssemblyResult> {\n    // Get command-specific context requirements\n    const commandContext = this.getCommandContext(commandName);\n    \n    // Create command fragment\n    const commandFragment = this.fragmentFactory.createCommandFragment(\n      commandName,\n      commandContext.type,\n      commandContext.description,\n      ContextPriority.HIGH\n    );\n\n    return this.assembleContext(commandName, [commandFragment]);\n  }\n\n  /**\n   * Update assembly configuration\n   */\n  public updateConfig(updates: Partial<ContextAssemblyConfig>): void {\n    this.config = { ...this.config, ...updates };\n  }\n\n  /**\n   * Get current configuration\n   */\n  public getConfig(): ContextAssemblyConfig {\n    return { ...this.config };\n  }\n\n  // Private implementation methods\n\n  /**\n   * Collect fragments from all context layers (Optimized with parallel loading)\n   */\n  private async collectAllFragments(commandName?: string): Promise<ContextFragment[]> {\n    const fragments: ContextFragment[] = [];\n\n    try {\n      // Parallel loading for better performance\n      const [globalContext, phaseContext, taskContext] = await Promise.all([\n        Promise.resolve(globalContextManager.getContext()),\n        Promise.resolve(phaseContextManager.getCurrentPhase()),\n        Promise.resolve(taskContextManager.getCurrentTask())\n      ]);\n\n      // L1: Global Context Fragments\n      if (globalContext) {\n        fragments.push(...this.extractGlobalFragments(globalContext));\n      }\n\n      // L2: Phase Context Fragments\n      if (phaseContext) {\n        fragments.push(...this.extractPhaseFragments(phaseContext));\n      }\n\n      // L3: Task Context Fragments\n      if (taskContext) {\n        fragments.push(...this.extractTaskFragments(taskContext, commandName));\n      }\n\n      return fragments;\n    } catch (error) {\n      console.warn('Warning: Error collecting context fragments:', error instanceof Error ? error.message : String(error));\n      return fragments; // Return partial results on error\n    }\n  }\n\n  /**\n   * Extract fragments from global context\n   */\n  private extractGlobalFragments(globalContext: any): ContextFragment[] {\n    const fragments: ContextFragment[] = [];\n\n    // Global rules fragment\n    const rulesContent = globalContext.rules\n      .filter((rule: any) => rule.enabled)\n      .map((rule: any) => `${rule.name}: ${rule.rule}`)\n      .join('\\n');\n\n    if (rulesContent) {\n      fragments.push(\n        this.fragmentFactory.createGlobalFragment('rules', rulesContent, ContextPriority.CRITICAL)\n      );\n    }\n\n    // Global configuration fragment\n    const configContent = this.buildGlobalConfigContent(globalContext);\n    if (configContent) {\n      fragments.push(\n        this.fragmentFactory.createGlobalFragment('config', configContent, ContextPriority.HIGH)\n      );\n    }\n\n    return fragments;\n  }\n\n  /**\n   * Extract fragments from phase context\n   */\n  private extractPhaseFragments(phaseContext: any): ContextFragment[] {\n    const fragments: ContextFragment[] = [];\n\n    // Phase context fragment\n    const phaseContent = phaseContextManager.getPhaseSummary();\n    fragments.push(\n      this.fragmentFactory.createPhaseFragment(\n        phaseContext.phaseNumber,\n        phaseContext.phaseName,\n        'context',\n        phaseContent,\n        ContextPriority.HIGH\n      )\n    );\n\n    // Phase history fragment (if significant progress)\n    if (phaseContext.data.progress.completionPercentage > 10) {\n      const historyContent = this.buildPhaseHistoryContent(phaseContext);\n      fragments.push(\n        this.fragmentFactory.createPhaseFragment(\n          phaseContext.phaseNumber,\n          phaseContext.phaseName,\n          'history',\n          historyContent,\n          ContextPriority.MEDIUM\n        )\n      );\n    }\n\n    return fragments;\n  }\n\n  /**\n   * Extract fragments from task context\n   */\n  private extractTaskFragments(taskContext: any, commandName?: string): ContextFragment[] {\n    const fragments: ContextFragment[] = [];\n\n    // Current task fragment\n    const taskContent = taskContextManager.getTaskSummary();\n    fragments.push(\n      this.fragmentFactory.createTaskFragment(\n        taskContext.taskId,\n        taskContext.taskType,\n        'context',\n        taskContent,\n        ContextPriority.HIGH\n      )\n    );\n\n    // Command-specific task state\n    if (commandName) {\n      const commandContext = taskContextManager.getContextForCommand(commandName);\n      const stateContent = this.buildTaskStateContent(commandContext);\n      fragments.push(\n        this.fragmentFactory.createTaskFragment(\n          taskContext.taskId,\n          taskContext.taskType,\n          'state',\n          stateContent,\n          ContextPriority.MEDIUM\n        )\n      );\n    }\n\n    return fragments;\n  }\n\n  /**\n   * Remove expired fragments\n   */\n  private removeExpiredFragments(fragments: ContextFragment[]): ContextFragment[] {\n    return fragments.filter(fragment => !this.fragmentFactory.isExpired(fragment));\n  }\n\n  /**\n   * Select fragments using intelligent algorithm\n   */\n  private selectFragments(fragments: ContextFragment[]): ContextFragment[] {\n    // Sort by priority and relevance\n    const sorted = fragments.sort((a, b) => {\n      // Primary sort: priority\n      if (a.priority !== b.priority) {\n        return b.priority - a.priority;\n      }\n      \n      // Secondary sort: freshness (newer first)\n      return b.metadata.lastModified - a.metadata.lastModified;\n    });\n\n    // Apply priority weights\n    const weighted = this.applyPriorityWeights(sorted);\n\n    return weighted;\n  }\n\n  /**\n   * Apply priority weights to fragment selection\n   */\n  private applyPriorityWeights(fragments: ContextFragment[]): ContextFragment[] {\n    const weights = this.config.priorityWeights;\n    const selected: ContextFragment[] = [];\n\n    // Calculate token allocation per priority\n    const totalBudget = this.config.tokenBudget.available;\n    const allocations = this.calculatePriorityAllocations(totalBudget);\n\n    // Select fragments within each priority allocation\n    for (const priority of [\n      ContextPriority.CRITICAL,\n      ContextPriority.HIGH,\n      ContextPriority.MEDIUM,\n      ContextPriority.LOW,\n      ContextPriority.MINIMAL\n    ]) {\n      const priorityFragments = fragments.filter(f => f.priority === priority);\n      const allocation = allocations[priority] || 0;\n      \n      const selectedInPriority = this.selectWithinBudget(priorityFragments, allocation);\n      selected.push(...selectedInPriority);\n    }\n\n    return selected;\n  }\n\n  /**\n   * Apply token budget management\n   */\n  private applyTokenBudget(fragments: ContextFragment[]): BudgetResult {\n    const budget = this.config.tokenBudget;\n    const fallbacksApplied: FallbackApplication[] = [];\n    const warnings: string[] = [];\n    let currentFragments = [...fragments];\n\n    // Calculate initial token usage\n    let totalTokens = this.tokenEstimator.estimateTotal(currentFragments);\n\n    // Apply fallback strategies if over budget\n    if (totalTokens > budget.available) {\n      const fallbackResult = this.applyFallbackStrategies(currentFragments, budget.available);\n      currentFragments = fallbackResult.fragments;\n      totalTokens = fallbackResult.totalTokens;\n      fallbacksApplied.push(...fallbackResult.fallbacksApplied);\n      warnings.push(...fallbackResult.warnings);\n    }\n\n    return {\n      fragments: currentFragments,\n      totalTokens,\n      budgetUsed: totalTokens,\n      fallbacksApplied,\n      warnings\n    };\n  }\n\n  /**\n   * Apply fallback strategies when over budget\n   */\n  private applyFallbackStrategies(\n    fragments: ContextFragment[],\n    budget: number\n  ): FallbackResult {\n    let currentFragments = [...fragments];\n    let totalTokens = this.tokenEstimator.estimateTotal(currentFragments);\n    const fallbacksApplied: FallbackApplication[] = [];\n    const warnings: string[] = [];\n\n    while (totalTokens > budget && currentFragments.length > 0) {\n      const strategy = this.config.fallbackStrategy;\n      \n      switch (strategy) {\n        case 'truncate-lowest-priority':\n          const removed = this.removeLowPriorityFragments(currentFragments, 1);\n          currentFragments = removed.remaining;\n          if (removed.removed.length > 0) {\n            fallbacksApplied.push({\n              strategy,\n              fragmentsAffected: removed.removed.map(f => f.id),\n              tokensSaved: this.tokenEstimator.estimateTotal(removed.removed),\n              description: `Removed ${removed.removed.length} low priority fragments`\n            });\n          }\n          break;\n\n        case 'compress-content':\n          const compressed = this.compressFragments(currentFragments, budget);\n          currentFragments = compressed.fragments;\n          fallbacksApplied.push({\n            strategy,\n            fragmentsAffected: compressed.affectedIds,\n            tokensSaved: compressed.tokensSaved,\n            description: `Compressed ${compressed.affectedIds.length} fragments`\n          });\n          break;\n\n        case 'truncate-oldest':\n          const oldest = this.removeOldestFragments(currentFragments, 1);\n          currentFragments = oldest.remaining;\n          if (oldest.removed.length > 0) {\n            fallbacksApplied.push({\n              strategy,\n              fragmentsAffected: oldest.removed.map(f => f.id),\n              tokensSaved: this.tokenEstimator.estimateTotal(oldest.removed),\n              description: `Removed ${oldest.removed.length} oldest fragments`\n            });\n          }\n          break;\n\n        case 'fail-fast':\n          warnings.push(`Token budget exceeded: ${totalTokens} > ${budget}`);\n          break;\n\n        default:\n          warnings.push(`Unknown fallback strategy: ${strategy}`);\n          break;\n      }\n\n      totalTokens = this.tokenEstimator.estimateTotal(currentFragments);\n    }\n\n    return {\n      fragments: currentFragments,\n      totalTokens,\n      fallbacksApplied,\n      warnings\n    };\n  }\n\n  // Helper methods for fallback strategies\n\n  private removeLowPriorityFragments(\n    fragments: ContextFragment[],\n    count: number\n  ): { remaining: ContextFragment[]; removed: ContextFragment[] } {\n    const sorted = [...fragments].sort((a, b) => a.priority - b.priority);\n    const removed = sorted.splice(0, count);\n    return { remaining: sorted, removed };\n  }\n\n  private compressFragments(\n    fragments: ContextFragment[],\n    budget: number\n  ): { fragments: ContextFragment[]; affectedIds: string[]; tokensSaved: number } {\n    const targetTokensPerFragment = Math.floor(budget / fragments.length);\n    let tokensSaved = 0;\n    const affectedIds: string[] = [];\n\n    const compressed = fragments.map(fragment => {\n      if (fragment.tokenEstimate > targetTokensPerFragment) {\n        const originalTokens = fragment.tokenEstimate;\n        const compressedFragment = this.fragmentFactory.compressFragment(\n          fragment,\n          targetTokensPerFragment\n        );\n        tokensSaved += originalTokens - compressedFragment.tokenEstimate;\n        affectedIds.push(fragment.id);\n        return compressedFragment;\n      }\n      return fragment;\n    });\n\n    return { fragments: compressed, affectedIds, tokensSaved };\n  }\n\n  private removeOldestFragments(\n    fragments: ContextFragment[],\n    count: number\n  ): { remaining: ContextFragment[]; removed: ContextFragment[] } {\n    const sorted = [...fragments].sort((a, b) => a.metadata.created - b.metadata.created);\n    const removed = sorted.splice(0, count);\n    return { remaining: sorted, removed };\n  }\n\n  // Utility and configuration methods\n\n  private buildDefaultConfig(config?: Partial<ContextAssemblyConfig>): ContextAssemblyConfig {\n    const defaultBudget: TokenBudget = {\n      total: 8000,\n      reserved: 1000,\n      available: 7000,\n      used: 0,\n      allocation: {\n        global: 2000,\n        phase: 2000,\n        task: 2000,\n        memory: 500,\n        buffer: 500\n      }\n    };\n\n    const defaultWeights: PriorityWeights = {\n      [ContextPriority.CRITICAL]: 1.0,\n      [ContextPriority.HIGH]: 0.8,\n      [ContextPriority.MEDIUM]: 0.6,\n      [ContextPriority.LOW]: 0.4,\n      [ContextPriority.MINIMAL]: 0.2\n    };\n\n    return {\n      tokenBudget: config?.tokenBudget || defaultBudget,\n      priorityWeights: config?.priorityWeights || defaultWeights,\n      fallbackStrategy: config?.fallbackStrategy || 'truncate-lowest-priority',\n      cacheConfig: config?.cacheConfig || {\n        maxSize: 1000,\n        ttl: 3600000, // 1 hour\n        strategy: 'lru',\n        persistToDisk: false\n      }\n    };\n  }\n\n  private calculatePriorityAllocations(totalBudget: number): Record<ContextPriority, number> {\n    const weights = this.config.priorityWeights;\n    const totalWeight = Object.values(weights).reduce((sum, weight) => sum + weight, 0);\n\n    return {\n      [ContextPriority.CRITICAL]: Math.floor((totalBudget * weights[ContextPriority.CRITICAL]) / totalWeight),\n      [ContextPriority.HIGH]: Math.floor((totalBudget * weights[ContextPriority.HIGH]) / totalWeight),\n      [ContextPriority.MEDIUM]: Math.floor((totalBudget * weights[ContextPriority.MEDIUM]) / totalWeight),\n      [ContextPriority.LOW]: Math.floor((totalBudget * weights[ContextPriority.LOW]) / totalWeight),\n      [ContextPriority.MINIMAL]: Math.floor((totalBudget * weights[ContextPriority.MINIMAL]) / totalWeight)\n    };\n  }\n\n  private selectWithinBudget(fragments: ContextFragment[], budget: number): ContextFragment[] {\n    const selected: ContextFragment[] = [];\n    let usedTokens = 0;\n\n    for (const fragment of fragments) {\n      if (usedTokens + fragment.tokenEstimate <= budget) {\n        selected.push(fragment);\n        usedTokens += fragment.tokenEstimate;\n      }\n    }\n\n    return selected;\n  }\n\n  private calculatePriorityBreakdown(fragments: ContextFragment[]): Record<ContextPriority, number> {\n    const breakdown: Record<ContextPriority, number> = {\n      [ContextPriority.CRITICAL]: 0,\n      [ContextPriority.HIGH]: 0,\n      [ContextPriority.MEDIUM]: 0,\n      [ContextPriority.LOW]: 0,\n      [ContextPriority.MINIMAL]: 0\n    };\n\n    fragments.forEach(fragment => {\n      breakdown[fragment.priority] += fragment.tokenEstimate;\n    });\n\n    return breakdown;\n  }\n\n  private getCommandContext(commandName: string): { type: string; description: string } {\n    const commandContexts: Record<string, { type: string; description: string }> = {\n      'Read': { type: 'file-operation', description: 'Reading file content for analysis or processing' },\n      'Write': { type: 'file-operation', description: 'Writing content to file with validation' },\n      'Edit': { type: 'file-operation', description: 'Editing existing file with precise modifications' },\n      'Bash': { type: 'system-operation', description: 'Executing system command with safety checks' },\n      'TodoWrite': { type: 'task-management', description: 'Managing task list and progress tracking' },\n      'UltraThink': { type: 'analysis', description: 'Deep analysis and planning with multiple perspectives' },\n      'WebFetch': { type: 'research', description: 'Fetching and analyzing web content' },\n      'WebSearch': { type: 'research', description: 'Searching for relevant information online' }\n    };\n\n    return commandContexts[commandName] || { type: 'unknown', description: 'Unknown command context' };\n  }\n\n  private buildGlobalConfigContent(globalContext: any): string {\n    const mcpTools = globalContext.configuration.mcpTools\n      .filter((tool: any) => tool.enabled)\n      .map((tool: any) => `${tool.name} (Priority: ${tool.priority})`)\n      .join(', ');\n\n    const qualityStandards = globalContext.configuration.qualityStandards\n      .map((standard: any) => `${standard.name}: ${standard.threshold}%`)\n      .join(', ');\n\n    return `MCP Tools: ${mcpTools}\\nQuality Standards: ${qualityStandards}`;\n  }\n\n  private buildPhaseHistoryContent(phaseContext: any): string {\n    const { completedTasks, blockers } = phaseContext.phaseState;\n    const recentTasks = completedTasks.slice(-5).join(', ');\n    const activeBlockers = blockers.filter((b: any) => !b.resolution).length;\n\n    return `Recent Tasks: ${recentTasks}\\nActive Blockers: ${activeBlockers}\\nProgress: ${phaseContext.data.progress.completionPercentage}%`;\n  }\n\n  private buildTaskStateContent(commandContext: any): string {\n    const params = commandContext.relevantParameters\n      .map((p: any) => `${p.name}: ${p.value}`)\n      .join(', ');\n\n    return `Command: ${commandContext.commandName}\\nType: ${commandContext.taskType}\\nParameters: ${params}`;\n  }\n\n  private logAssemblyMetrics(result: ContextAssemblyResult, assemblyTime: number): void {\n    console.log(`Context Assembly Metrics:\nFragments: ${result.fragments.length}\nTokens Used: ${result.totalTokens}\nBudget Utilization: ${((result.budgetUsed / (result.budgetUsed + result.budgetRemaining)) * 100).toFixed(1)}%\nAssembly Time: ${assemblyTime}ms\nFallbacks Applied: ${result.fallbacksApplied.length}\nWarnings: ${result.warnings.length}`);\n  }\n}\n\n// Supporting interfaces\ninterface BudgetResult {\n  fragments: ContextFragment[];\n  totalTokens: number;\n  budgetUsed: number;\n  fallbacksApplied: FallbackApplication[];\n  warnings: string[];\n}\n\ninterface FallbackResult {\n  fragments: ContextFragment[];\n  totalTokens: number;\n  fallbacksApplied: FallbackApplication[];\n  warnings: string[];\n}\n\n/**\n * Singleton instance\n */\nexport const contextAssembler = new ContextAssembler();"],"mappings":"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","ignoreList":[]}