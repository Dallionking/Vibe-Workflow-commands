8b35a4749594edcc3e6ac0eb6a497728
"use strict";
/**
 * Context Fragment Test Suite
 * Tests for ContextFragmentFactory, TokenEstimator, and FragmentCollection
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const context_fragment_1 = require("../assembly/context-fragment");
const context_types_1 = require("../types/context.types");
(0, globals_1.describe)('ContextFragmentFactory', () => {
    let factory;
    (0, globals_1.beforeEach)(() => {
        factory = new context_fragment_1.ContextFragmentFactory();
    });
    (0, globals_1.describe)('Fragment Creation', () => {
        (0, globals_1.test)('should create basic fragment', () => {
            const fragment = factory.createFragment('global-rules', 'Test rule content', context_types_1.ContextPriority.HIGH, { source: { type: 'global', scope: 'system' } });
            (0, globals_1.expect)(fragment.id).toMatch(/global-rules-\d+-[a-z0-9]{6}/);
            (0, globals_1.expect)(fragment.type).toBe('global-rules');
            (0, globals_1.expect)(fragment.content).toBe('Test rule content');
            (0, globals_1.expect)(fragment.priority).toBe(context_types_1.ContextPriority.HIGH);
            (0, globals_1.expect)(fragment.tokenEstimate).toBeGreaterThan(0);
            (0, globals_1.expect)(fragment.validation.isValid).toBe(true);
        });
        (0, globals_1.test)('should create global fragment', () => {
            const fragment = factory.createGlobalFragment('rules', 'Global rules content', context_types_1.ContextPriority.CRITICAL);
            (0, globals_1.expect)(fragment.type).toBe('global-rules');
            (0, globals_1.expect)(fragment.metadata.source.type).toBe('global');
            (0, globals_1.expect)(fragment.metadata.tags).toContain('global');
            (0, globals_1.expect)(fragment.metadata.tags).toContain('rules');
            (0, globals_1.expect)(fragment.metadata.ttl).toBeUndefined(); // Global doesn't expire
        });
        (0, globals_1.test)('should create phase fragment', () => {
            const fragment = factory.createPhaseFragment(1, 'Context Engineering', 'context', 'Phase context content', context_types_1.ContextPriority.HIGH);
            (0, globals_1.expect)(fragment.type).toBe('phase-context');
            (0, globals_1.expect)(fragment.metadata.source.type).toBe('phase');
            (0, globals_1.expect)(fragment.metadata.tags).toContain('phase');
            (0, globals_1.expect)(fragment.metadata.tags).toContain('phase-1');
            (0, globals_1.expect)(fragment.metadata.ttl).toBe(24 * 60 * 60 * 1000); // 24 hours
        });
        (0, globals_1.test)('should create task fragment', () => {
            const fragment = factory.createTaskFragment('task-123', 'implementation', 'context', 'Task context content', context_types_1.ContextPriority.MEDIUM);
            (0, globals_1.expect)(fragment.type).toBe('task-context');
            (0, globals_1.expect)(fragment.metadata.source.type).toBe('task');
            (0, globals_1.expect)(fragment.metadata.tags).toContain('task');
            (0, globals_1.expect)(fragment.metadata.tags).toContain('implementation');
            (0, globals_1.expect)(fragment.metadata.ttl).toBe(60 * 60 * 1000); // 1 hour
        });
        (0, globals_1.test)('should create memory fragment', () => {
            const fragment = factory.createMemoryFragment('pattern', 'Memory pattern content', context_types_1.ContextPriority.LOW);
            (0, globals_1.expect)(fragment.type).toBe('memory-pattern');
            (0, globals_1.expect)(fragment.metadata.source.type).toBe('memory');
            (0, globals_1.expect)(fragment.metadata.tags).toContain('memory');
            (0, globals_1.expect)(fragment.metadata.tags).toContain('pattern');
            (0, globals_1.expect)(fragment.metadata.ttl).toBe(7 * 24 * 60 * 60 * 1000); // 7 days
        });
        (0, globals_1.test)('should create command fragment', () => {
            const fragment = factory.createCommandFragment('Read', 'file-operation', 'Command context content', context_types_1.ContextPriority.MEDIUM);
            (0, globals_1.expect)(fragment.type).toBe('command-context');
            (0, globals_1.expect)(fragment.metadata.source.type).toBe('command');
            (0, globals_1.expect)(fragment.metadata.tags).toContain('command');
            (0, globals_1.expect)(fragment.metadata.tags).toContain('Read');
            (0, globals_1.expect)(fragment.metadata.ttl).toBe(30 * 60 * 1000); // 30 minutes
        });
    });
    (0, globals_1.describe)('Fragment Updates', () => {
        (0, globals_1.test)('should update fragment content', () => {
            const fragment = factory.createFragment('task-context', 'Original content', context_types_1.ContextPriority.MEDIUM, { source: { type: 'task', taskId: 'test', taskType: 'implementation' } });
            const originalModified = fragment.metadata.lastModified;
            const originalTokens = fragment.tokenEstimate;
            // Wait a bit to ensure timestamp difference
            setTimeout(() => {
                const updated = factory.updateFragment(fragment, 'Updated content with more text');
                (0, globals_1.expect)(updated.content).toBe('Updated content with more text');
                (0, globals_1.expect)(updated.metadata.lastModified).toBeGreaterThan(originalModified);
                (0, globals_1.expect)(updated.tokenEstimate).toBeGreaterThan(originalTokens);
                (0, globals_1.expect)(updated.validation.isValid).toBe(true);
            }, 10);
        });
    });
    (0, globals_1.describe)('Fragment Expiration', () => {
        (0, globals_1.test)('should detect expired fragments', () => {
            const fragment = factory.createFragment('task-context', 'Test content', context_types_1.ContextPriority.MEDIUM, {
                source: { type: 'task', taskId: 'test', taskType: 'implementation' },
                ttl: 100 // 100ms TTL
            });
            (0, globals_1.expect)(factory.isExpired(fragment)).toBe(false);
            // Wait for expiration
            setTimeout(() => {
                (0, globals_1.expect)(factory.isExpired(fragment)).toBe(true);
            }, 150);
        });
        (0, globals_1.test)('should not expire fragments without TTL', () => {
            const fragment = factory.createGlobalFragment('rules', 'Global rules never expire', context_types_1.ContextPriority.CRITICAL);
            (0, globals_1.expect)(factory.isExpired(fragment)).toBe(false);
        });
    });
    (0, globals_1.describe)('Fragment Compression', () => {
        (0, globals_1.test)('should compress large fragments', () => {
            const largeContent = 'This is a very long content string. '.repeat(100);
            const fragment = factory.createFragment('task-context', largeContent, context_types_1.ContextPriority.MEDIUM, { source: { type: 'task', taskId: 'test', taskType: 'implementation' } });
            const originalTokens = fragment.tokenEstimate;
            const targetTokens = Math.floor(originalTokens / 2);
            const compressed = factory.compressFragment(fragment, targetTokens);
            (0, globals_1.expect)(compressed.tokenEstimate).toBeLessThanOrEqual(targetTokens);
            (0, globals_1.expect)(compressed.content).toContain('[content compressed]');
            (0, globals_1.expect)(compressed.content.length).toBeLessThan(largeContent.length);
        });
        (0, globals_1.test)('should not compress fragments already within target', () => {
            const smallContent = 'Small content';
            const fragment = factory.createFragment('task-context', smallContent, context_types_1.ContextPriority.MEDIUM, { source: { type: 'task', taskId: 'test', taskType: 'implementation' } });
            const targetTokens = fragment.tokenEstimate + 100;
            const result = factory.compressFragment(fragment, targetTokens);
            (0, globals_1.expect)(result.content).toBe(smallContent);
            (0, globals_1.expect)(result.tokenEstimate).toBe(fragment.tokenEstimate);
        });
    });
    (0, globals_1.describe)('Fragment Validation', () => {
        (0, globals_1.test)('should validate global rules format', () => {
            const validRules = 'systematic: Always follow systematic patterns\nquality: Maintain high standards';
            const fragment = factory.createGlobalFragment('rules', validRules);
            (0, globals_1.expect)(fragment.validation.isValid).toBe(true);
            (0, globals_1.expect)(fragment.validation.errors).toHaveLength(0);
        });
        (0, globals_1.test)('should warn about missing rule patterns', () => {
            const incompleteRules = 'some rule: Just a rule without key patterns';
            const fragment = factory.createGlobalFragment('rules', incompleteRules);
            (0, globals_1.expect)(fragment.validation.isValid).toBe(true);
            (0, globals_1.expect)(fragment.validation.warnings.length).toBeGreaterThan(0);
            (0, globals_1.expect)(fragment.validation.warnings[0].code).toBe('MISSING_RULE_PATTERNS');
        });
        (0, globals_1.test)('should validate empty content', () => {
            const fragment = factory.createFragment('task-context', '', context_types_1.ContextPriority.MEDIUM, { source: { type: 'task', taskId: 'test', taskType: 'implementation' } });
            (0, globals_1.expect)(fragment.validation.isValid).toBe(false);
            (0, globals_1.expect)(fragment.validation.errors).toHaveLength(1);
            (0, globals_1.expect)(fragment.validation.errors[0].code).toBe('EMPTY_CONTENT');
        });
        (0, globals_1.test)('should warn about high token count', () => {
            const largeContent = 'Large content. '.repeat(200); // Should exceed 1000 tokens
            const fragment = factory.createFragment('task-context', largeContent, context_types_1.ContextPriority.MEDIUM, { source: { type: 'task', taskId: 'test', taskType: 'implementation' } });
            (0, globals_1.expect)(fragment.validation.warnings.some(w => w.code === 'HIGH_TOKEN_COUNT')).toBe(true);
        });
    });
});
(0, globals_1.describe)('TokenEstimator', () => {
    let estimator;
    (0, globals_1.beforeEach)(() => {
        estimator = new context_fragment_1.TokenEstimator();
    });
    (0, globals_1.describe)('Token Estimation', () => {
        (0, globals_1.test)('should estimate tokens for simple text', () => {
            const text = 'This is a simple test';
            const estimate = estimator.estimate(text);
            (0, globals_1.expect)(estimate).toBeGreaterThan(0);
            (0, globals_1.expect)(estimate).toBe(Math.ceil(text.length / 3.5));
        });
        (0, globals_1.test)('should cache token estimates', () => {
            const text = 'Cached estimation test';
            const estimate1 = estimator.estimate(text);
            const estimate2 = estimator.estimate(text);
            (0, globals_1.expect)(estimate1).toBe(estimate2);
        });
        (0, globals_1.test)('should estimate total tokens for fragments', () => {
            const fragments = [
                { tokenEstimate: 100 },
                { tokenEstimate: 150 },
                { tokenEstimate: 75 }
            ];
            const total = estimator.estimateTotal(fragments);
            (0, globals_1.expect)(total).toBe(325);
        });
        (0, globals_1.test)('should handle empty fragment array', () => {
            const total = estimator.estimateTotal([]);
            (0, globals_1.expect)(total).toBe(0);
        });
        (0, globals_1.test)('should manage cache size', () => {
            estimator.clearCache();
            // Add many items to test cache management
            for (let i = 0; i < 1100; i++) {
                estimator.estimate(`test content ${i}`);
            }
            // Cache should be managed and not grow infinitely
            (0, globals_1.expect)(true).toBe(true); // Just ensure no errors thrown
        });
        (0, globals_1.test)('should clear cache', () => {
            estimator.estimate('test content');
            estimator.clearCache();
            // After clearing, estimation should still work
            const estimate = estimator.estimate('new test content');
            (0, globals_1.expect)(estimate).toBeGreaterThan(0);
        });
    });
    (0, globals_1.describe)('Edge Cases', () => {
        (0, globals_1.test)('should handle empty string', () => {
            const estimate = estimator.estimate('');
            (0, globals_1.expect)(estimate).toBe(0);
        });
        (0, globals_1.test)('should handle very long text', () => {
            const longText = 'Very long text content. '.repeat(1000);
            const estimate = estimator.estimate(longText);
            (0, globals_1.expect)(estimate).toBeGreaterThan(1000);
            (0, globals_1.expect)(estimate).toBe(Math.ceil(longText.length / 3.5));
        });
        (0, globals_1.test)('should handle special characters', () => {
            const specialText = '!@#$%^&*()_+-={}[]|\\:";\'<>?,./';
            const estimate = estimator.estimate(specialText);
            (0, globals_1.expect)(estimate).toBeGreaterThan(0);
        });
    });
});
(0, globals_1.describe)('FragmentCollection', () => {
    let collection;
    let factory;
    (0, globals_1.beforeEach)(() => {
        collection = new context_fragment_1.FragmentCollection();
        factory = new context_fragment_1.ContextFragmentFactory();
    });
    (0, globals_1.describe)('Collection Operations', () => {
        (0, globals_1.test)('should add and retrieve fragments', () => {
            const fragment = factory.createFragment('global-rules', 'Test content', context_types_1.ContextPriority.HIGH, { source: { type: 'global', scope: 'system' } });
            collection.add(fragment);
            (0, globals_1.expect)(collection.get(fragment.id)).toBe(fragment);
            (0, globals_1.expect)(collection.size()).toBe(1);
        });
        (0, globals_1.test)('should remove fragments', () => {
            const fragment = factory.createFragment('global-rules', 'Test content', context_types_1.ContextPriority.HIGH, { source: { type: 'global', scope: 'system' } });
            collection.add(fragment);
            (0, globals_1.expect)(collection.size()).toBe(1);
            const removed = collection.remove(fragment.id);
            (0, globals_1.expect)(removed).toBe(true);
            (0, globals_1.expect)(collection.size()).toBe(0);
            (0, globals_1.expect)(collection.get(fragment.id)).toBeUndefined();
        });
        (0, globals_1.test)('should return false when removing non-existent fragment', () => {
            const removed = collection.remove('non-existent-id');
            (0, globals_1.expect)(removed).toBe(false);
        });
        (0, globals_1.test)('should get all fragments', () => {
            const fragment1 = factory.createGlobalFragment('rules', 'Content 1');
            const fragment2 = factory.createGlobalFragment('config', 'Content 2');
            collection.add(fragment1);
            collection.add(fragment2);
            const allFragments = collection.getAll();
            (0, globals_1.expect)(allFragments).toHaveLength(2);
            (0, globals_1.expect)(allFragments).toContain(fragment1);
            (0, globals_1.expect)(allFragments).toContain(fragment2);
        });
    });
    (0, globals_1.describe)('Fragment Filtering', () => {
        (0, globals_1.test)('should get fragments by type', () => {
            const globalFragment = factory.createGlobalFragment('rules', 'Global content');
            const phaseFragment = factory.createPhaseFragment(1, 'Phase 1', 'context', 'Phase content');
            collection.add(globalFragment);
            collection.add(phaseFragment);
            const globalFragments = collection.getByType('global-rules');
            (0, globals_1.expect)(globalFragments).toHaveLength(1);
            (0, globals_1.expect)(globalFragments[0]).toBe(globalFragment);
            const phaseFragments = collection.getByType('phase-context');
            (0, globals_1.expect)(phaseFragments).toHaveLength(1);
            (0, globals_1.expect)(phaseFragments[0]).toBe(phaseFragment);
        });
        (0, globals_1.test)('should get fragments by priority', () => {
            const criticalFragment = factory.createGlobalFragment('rules', 'Critical', context_types_1.ContextPriority.CRITICAL);
            const highFragment = factory.createGlobalFragment('config', 'High', context_types_1.ContextPriority.HIGH);
            const mediumFragment = factory.createTaskFragment('task-1', 'implementation', 'context', 'Medium', context_types_1.ContextPriority.MEDIUM);
            collection.add(criticalFragment);
            collection.add(highFragment);
            collection.add(mediumFragment);
            const highPriorityFragments = collection.getByPriority(context_types_1.ContextPriority.HIGH);
            (0, globals_1.expect)(highPriorityFragments).toHaveLength(2); // Critical and High
            (0, globals_1.expect)(highPriorityFragments).toContain(criticalFragment);
            (0, globals_1.expect)(highPriorityFragments).toContain(highFragment);
            (0, globals_1.expect)(highPriorityFragments).not.toContain(mediumFragment);
        });
        (0, globals_1.test)('should get fragments sorted by priority', () => {
            const mediumFragment = factory.createTaskFragment('task-1', 'implementation', 'context', 'Medium', context_types_1.ContextPriority.MEDIUM);
            const criticalFragment = factory.createGlobalFragment('rules', 'Critical', context_types_1.ContextPriority.CRITICAL);
            const highFragment = factory.createGlobalFragment('config', 'High', context_types_1.ContextPriority.HIGH);
            collection.add(mediumFragment);
            collection.add(criticalFragment);
            collection.add(highFragment);
            const sortedFragments = collection.getSortedByPriority();
            (0, globals_1.expect)(sortedFragments).toHaveLength(3);
            (0, globals_1.expect)(sortedFragments[0]).toBe(criticalFragment);
            (0, globals_1.expect)(sortedFragments[1]).toBe(highFragment);
            (0, globals_1.expect)(sortedFragments[2]).toBe(mediumFragment);
        });
    });
    (0, globals_1.describe)('Collection Maintenance', () => {
        (0, globals_1.test)('should remove expired fragments', () => {
            const expiredFragment = factory.createTaskFragment('task-1', 'implementation', 'context', 'Expired content', context_types_1.ContextPriority.MEDIUM);
            // Manually set created time to make it expired
            expiredFragment.metadata.created = Date.now() - (2 * 60 * 60 * 1000); // 2 hours ago
            expiredFragment.metadata.ttl = 60 * 60 * 1000; // 1 hour TTL
            const validFragment = factory.createGlobalFragment('rules', 'Valid content');
            collection.add(expiredFragment);
            collection.add(validFragment);
            (0, globals_1.expect)(collection.size()).toBe(2);
            const removedCount = collection.removeExpired(factory);
            (0, globals_1.expect)(removedCount).toBe(1);
            (0, globals_1.expect)(collection.size()).toBe(1);
            (0, globals_1.expect)(collection.get(validFragment.id)).toBe(validFragment);
            (0, globals_1.expect)(collection.get(expiredFragment.id)).toBeUndefined();
        });
        (0, globals_1.test)('should calculate total tokens', () => {
            const fragment1 = factory.createGlobalFragment('rules', 'Content 1');
            const fragment2 = factory.createGlobalFragment('config', 'Content 2');
            collection.add(fragment1);
            collection.add(fragment2);
            const totalTokens = collection.getTotalTokens();
            const expectedTokens = fragment1.tokenEstimate + fragment2.tokenEstimate;
            (0, globals_1.expect)(totalTokens).toBe(expectedTokens);
        });
        (0, globals_1.test)('should clear all fragments', () => {
            const fragment1 = factory.createGlobalFragment('rules', 'Content 1');
            const fragment2 = factory.createGlobalFragment('config', 'Content 2');
            collection.add(fragment1);
            collection.add(fragment2);
            (0, globals_1.expect)(collection.size()).toBe(2);
            collection.clear();
            (0, globals_1.expect)(collection.size()).toBe(0);
            (0, globals_1.expect)(collection.getAll()).toHaveLength(0);
        });
    });
    (0, globals_1.describe)('Edge Cases', () => {
        (0, globals_1.test)('should handle empty collection operations', () => {
            (0, globals_1.expect)(collection.size()).toBe(0);
            (0, globals_1.expect)(collection.getAll()).toHaveLength(0);
            (0, globals_1.expect)(collection.getByType('global-rules')).toHaveLength(0);
            (0, globals_1.expect)(collection.getByPriority(context_types_1.ContextPriority.HIGH)).toHaveLength(0);
            (0, globals_1.expect)(collection.getTotalTokens()).toBe(0);
            (0, globals_1.expect)(collection.removeExpired(factory)).toBe(0);
        });
        (0, globals_1.test)('should handle duplicate additions', () => {
            const fragment = factory.createGlobalFragment('rules', 'Test content');
            collection.add(fragment);
            collection.add(fragment); // Add same fragment again
            (0, globals_1.expect)(collection.size()).toBe(1); // Should still be 1, not 2
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,