754db38e43b321965bdb77feb0f0009d
"use strict";

/**
 * Context Assembler - Intelligent Context Selection and Assembly
 * Implements priority-based selection with token budget management
 */
/* istanbul ignore next */
function cov_1k45k240p6() {
  var path = "/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/assembly/context-assembler.ts";
  var hash = "450abe2897e95e7b28eb1c335cd7cb2e9690d19b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/assembly/context-assembler.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 62
        }
      },
      "1": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 61
        }
      },
      "2": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 8,
          column: 57
        }
      },
      "3": {
        start: {
          line: 9,
          column: 27
        },
        end: {
          line: 9,
          column: 56
        }
      },
      "4": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 44
        }
      },
      "5": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 42
        }
      },
      "6": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 40
        }
      },
      "7": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 79
        }
      },
      "8": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 70
        }
      },
      "9": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 54
        }
      },
      "10": {
        start: {
          line: 27,
          column: 26
        },
        end: {
          line: 27,
          column: 36
        }
      },
      "11": {
        start: {
          line: 29,
          column: 29
        },
        end: {
          line: 29,
          column: 72
        }
      },
      "12": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "13": {
        start: {
          line: 32,
          column: 31
        },
        end: {
          line: 32,
          column: 72
        }
      },
      "14": {
        start: {
          line: 34,
          column: 34
        },
        end: {
          line: 34,
          column: 70
        }
      },
      "15": {
        start: {
          line: 36,
          column: 29
        },
        end: {
          line: 36,
          column: 69
        }
      },
      "16": {
        start: {
          line: 38,
          column: 23
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "17": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 64
        }
      },
      "18": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 22
        }
      },
      "19": {
        start: {
          line: 56,
          column: 31
        },
        end: {
          line: 56,
          column: 66
        }
      },
      "20": {
        start: {
          line: 58,
          column: 32
        },
        end: {
          line: 58,
          column: 174
        }
      },
      "21": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 68
        }
      },
      "22": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 53
        }
      },
      "23": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 34
        }
      },
      "24": {
        start: {
          line: 78,
          column: 26
        },
        end: {
          line: 78,
          column: 28
        }
      },
      "25": {
        start: {
          line: 80,
          column: 30
        },
        end: {
          line: 80,
          column: 72
        }
      },
      "26": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "27": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 74
        }
      },
      "28": {
        start: {
          line: 85,
          column: 29
        },
        end: {
          line: 85,
          column: 74
        }
      },
      "29": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "30": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 72
        }
      },
      "31": {
        start: {
          line: 90,
          column: 28
        },
        end: {
          line: 90,
          column: 70
        }
      },
      "32": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "33": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 83
        }
      },
      "34": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 25
        }
      },
      "35": {
        start: {
          line: 100,
          column: 26
        },
        end: {
          line: 100,
          column: 28
        }
      },
      "36": {
        start: {
          line: 102,
          column: 29
        },
        end: {
          line: 105,
          column: 23
        }
      },
      "37": {
        start: {
          line: 103,
          column: 30
        },
        end: {
          line: 103,
          column: 42
        }
      },
      "38": {
        start: {
          line: 104,
          column: 27
        },
        end: {
          line: 104,
          column: 55
        }
      },
      "39": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "40": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 135
        }
      },
      "41": {
        start: {
          line: 110,
          column: 30
        },
        end: {
          line: 110,
          column: 74
        }
      },
      "42": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "43": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 133
        }
      },
      "44": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 25
        }
      },
      "45": {
        start: {
          line: 120,
          column: 26
        },
        end: {
          line: 120,
          column: 28
        }
      },
      "46": {
        start: {
          line: 122,
          column: 29
        },
        end: {
          line: 122,
          column: 74
        }
      },
      "47": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 178
        }
      },
      "48": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "49": {
        start: {
          line: 126,
          column: 35
        },
        end: {
          line: 126,
          column: 78
        }
      },
      "50": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 186
        }
      },
      "51": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 25
        }
      },
      "52": {
        start: {
          line: 135,
          column: 26
        },
        end: {
          line: 135,
          column: 28
        }
      },
      "53": {
        start: {
          line: 137,
          column: 28
        },
        end: {
          line: 137,
          column: 70
        }
      },
      "54": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 168
        }
      },
      "55": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "56": {
        start: {
          line: 141,
          column: 35
        },
        end: {
          line: 141,
          column: 94
        }
      },
      "57": {
        start: {
          line: 142,
          column: 33
        },
        end: {
          line: 142,
          column: 75
        }
      },
      "58": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 173
        }
      },
      "59": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 25
        }
      },
      "60": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 87
        }
      },
      "61": {
        start: {
          line: 151,
          column: 44
        },
        end: {
          line: 151,
          column: 85
        }
      },
      "62": {
        start: {
          line: 158,
          column: 23
        },
        end: {
          line: 165,
          column: 10
        }
      },
      "63": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "64": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 47
        }
      },
      "65": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 69
        }
      },
      "66": {
        start: {
          line: 167,
          column: 25
        },
        end: {
          line: 167,
          column: 58
        }
      },
      "67": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 24
        }
      },
      "68": {
        start: {
          line: 174,
          column: 24
        },
        end: {
          line: 174,
          column: 51
        }
      },
      "69": {
        start: {
          line: 175,
          column: 25
        },
        end: {
          line: 175,
          column: 27
        }
      },
      "70": {
        start: {
          line: 177,
          column: 28
        },
        end: {
          line: 177,
          column: 61
        }
      },
      "71": {
        start: {
          line: 178,
          column: 28
        },
        end: {
          line: 178,
          column: 74
        }
      },
      "72": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "73": {
        start: {
          line: 187,
          column: 38
        },
        end: {
          line: 187,
          column: 84
        }
      },
      "74": {
        start: {
          line: 187,
          column: 60
        },
        end: {
          line: 187,
          column: 83
        }
      },
      "75": {
        start: {
          line: 188,
          column: 31
        },
        end: {
          line: 188,
          column: 57
        }
      },
      "76": {
        start: {
          line: 189,
          column: 39
        },
        end: {
          line: 189,
          column: 93
        }
      },
      "77": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 49
        }
      },
      "78": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 24
        }
      },
      "79": {
        start: {
          line: 198,
          column: 23
        },
        end: {
          line: 198,
          column: 46
        }
      },
      "80": {
        start: {
          line: 199,
          column: 33
        },
        end: {
          line: 199,
          column: 35
        }
      },
      "81": {
        start: {
          line: 200,
          column: 25
        },
        end: {
          line: 200,
          column: 27
        }
      },
      "82": {
        start: {
          line: 201,
          column: 31
        },
        end: {
          line: 201,
          column: 45
        }
      },
      "83": {
        start: {
          line: 203,
          column: 26
        },
        end: {
          line: 203,
          column: 77
        }
      },
      "84": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "85": {
        start: {
          line: 206,
          column: 35
        },
        end: {
          line: 206,
          column: 99
        }
      },
      "86": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 56
        }
      },
      "87": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 53
        }
      },
      "88": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 70
        }
      },
      "89": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 54
        }
      },
      "90": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 218,
          column: 10
        }
      },
      "91": {
        start: {
          line: 224,
          column: 31
        },
        end: {
          line: 224,
          column: 45
        }
      },
      "92": {
        start: {
          line: 225,
          column: 26
        },
        end: {
          line: 225,
          column: 77
        }
      },
      "93": {
        start: {
          line: 226,
          column: 33
        },
        end: {
          line: 226,
          column: 35
        }
      },
      "94": {
        start: {
          line: 227,
          column: 25
        },
        end: {
          line: 227,
          column: 27
        }
      },
      "95": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "96": {
        start: {
          line: 229,
          column: 29
        },
        end: {
          line: 229,
          column: 57
        }
      },
      "97": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 271,
          column: 13
        }
      },
      "98": {
        start: {
          line: 232,
          column: 36
        },
        end: {
          line: 232,
          column: 88
        }
      },
      "99": {
        start: {
          line: 233,
          column: 20
        },
        end: {
          line: 233,
          column: 57
        }
      },
      "100": {
        start: {
          line: 234,
          column: 20
        },
        end: {
          line: 241,
          column: 21
        }
      },
      "101": {
        start: {
          line: 235,
          column: 24
        },
        end: {
          line: 240,
          column: 27
        }
      },
      "102": {
        start: {
          line: 237,
          column: 72
        },
        end: {
          line: 237,
          column: 76
        }
      },
      "103": {
        start: {
          line: 242,
          column: 20
        },
        end: {
          line: 242,
          column: 26
        }
      },
      "104": {
        start: {
          line: 244,
          column: 39
        },
        end: {
          line: 244,
          column: 87
        }
      },
      "105": {
        start: {
          line: 245,
          column: 20
        },
        end: {
          line: 245,
          column: 60
        }
      },
      "106": {
        start: {
          line: 246,
          column: 20
        },
        end: {
          line: 251,
          column: 23
        }
      },
      "107": {
        start: {
          line: 252,
          column: 20
        },
        end: {
          line: 252,
          column: 26
        }
      },
      "108": {
        start: {
          line: 254,
          column: 35
        },
        end: {
          line: 254,
          column: 82
        }
      },
      "109": {
        start: {
          line: 255,
          column: 20
        },
        end: {
          line: 255,
          column: 56
        }
      },
      "110": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 263,
          column: 21
        }
      },
      "111": {
        start: {
          line: 257,
          column: 24
        },
        end: {
          line: 262,
          column: 27
        }
      },
      "112": {
        start: {
          line: 259,
          column: 71
        },
        end: {
          line: 259,
          column: 75
        }
      },
      "113": {
        start: {
          line: 264,
          column: 20
        },
        end: {
          line: 264,
          column: 26
        }
      },
      "114": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 266,
          column: 87
        }
      },
      "115": {
        start: {
          line: 267,
          column: 20
        },
        end: {
          line: 267,
          column: 26
        }
      },
      "116": {
        start: {
          line: 269,
          column: 20
        },
        end: {
          line: 269,
          column: 76
        }
      },
      "117": {
        start: {
          line: 270,
          column: 20
        },
        end: {
          line: 270,
          column: 26
        }
      },
      "118": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 78
        }
      },
      "119": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 279,
          column: 10
        }
      },
      "120": {
        start: {
          line: 283,
          column: 23
        },
        end: {
          line: 283,
          column: 77
        }
      },
      "121": {
        start: {
          line: 283,
          column: 53
        },
        end: {
          line: 283,
          column: 76
        }
      },
      "122": {
        start: {
          line: 284,
          column: 24
        },
        end: {
          line: 284,
          column: 47
        }
      },
      "123": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 46
        }
      },
      "124": {
        start: {
          line: 288,
          column: 40
        },
        end: {
          line: 288,
          column: 77
        }
      },
      "125": {
        start: {
          line: 289,
          column: 26
        },
        end: {
          line: 289,
          column: 27
        }
      },
      "126": {
        start: {
          line: 290,
          column: 28
        },
        end: {
          line: 290,
          column: 30
        }
      },
      "127": {
        start: {
          line: 291,
          column: 27
        },
        end: {
          line: 300,
          column: 10
        }
      },
      "128": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 298,
          column: 13
        }
      },
      "129": {
        start: {
          line: 293,
          column: 39
        },
        end: {
          line: 293,
          column: 61
        }
      },
      "130": {
        start: {
          line: 294,
          column: 43
        },
        end: {
          line: 294,
          column: 115
        }
      },
      "131": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 295,
          column: 81
        }
      },
      "132": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 296,
          column: 46
        }
      },
      "133": {
        start: {
          line: 297,
          column: 16
        },
        end: {
          line: 297,
          column: 42
        }
      },
      "134": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 28
        }
      },
      "135": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 301,
          column: 67
        }
      },
      "136": {
        start: {
          line: 304,
          column: 23
        },
        end: {
          line: 304,
          column: 93
        }
      },
      "137": {
        start: {
          line: 304,
          column: 53
        },
        end: {
          line: 304,
          column: 92
        }
      },
      "138": {
        start: {
          line: 305,
          column: 24
        },
        end: {
          line: 305,
          column: 47
        }
      },
      "139": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 306,
          column: 46
        }
      },
      "140": {
        start: {
          line: 310,
          column: 30
        },
        end: {
          line: 322,
          column: 9
        }
      },
      "141": {
        start: {
          line: 323,
          column: 31
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "142": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 340,
          column: 10
        }
      },
      "143": {
        start: {
          line: 343,
          column: 24
        },
        end: {
          line: 343,
          column: 51
        }
      },
      "144": {
        start: {
          line: 344,
          column: 28
        },
        end: {
          line: 344,
          column: 91
        }
      },
      "145": {
        start: {
          line: 344,
          column: 75
        },
        end: {
          line: 344,
          column: 87
        }
      },
      "146": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 351,
          column: 10
        }
      },
      "147": {
        start: {
          line: 354,
          column: 25
        },
        end: {
          line: 354,
          column: 27
        }
      },
      "148": {
        start: {
          line: 355,
          column: 25
        },
        end: {
          line: 355,
          column: 26
        }
      },
      "149": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 361,
          column: 9
        }
      },
      "150": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 360,
          column: 13
        }
      },
      "151": {
        start: {
          line: 358,
          column: 16
        },
        end: {
          line: 358,
          column: 40
        }
      },
      "152": {
        start: {
          line: 359,
          column: 16
        },
        end: {
          line: 359,
          column: 53
        }
      },
      "153": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 362,
          column: 24
        }
      },
      "154": {
        start: {
          line: 365,
          column: 26
        },
        end: {
          line: 371,
          column: 9
        }
      },
      "155": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 374,
          column: 11
        }
      },
      "156": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 67
        }
      },
      "157": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 375,
          column: 25
        }
      },
      "158": {
        start: {
          line: 378,
          column: 32
        },
        end: {
          line: 387,
          column: 9
        }
      },
      "159": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 388,
          column: 107
        }
      },
      "160": {
        start: {
          line: 391,
          column: 25
        },
        end: {
          line: 394,
          column: 23
        }
      },
      "161": {
        start: {
          line: 392,
          column: 30
        },
        end: {
          line: 392,
          column: 42
        }
      },
      "162": {
        start: {
          line: 393,
          column: 27
        },
        end: {
          line: 393,
          column: 70
        }
      },
      "163": {
        start: {
          line: 395,
          column: 33
        },
        end: {
          line: 397,
          column: 23
        }
      },
      "164": {
        start: {
          line: 396,
          column: 31
        },
        end: {
          line: 396,
          column: 73
        }
      },
      "165": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 398,
          column: 80
        }
      },
      "166": {
        start: {
          line: 401,
          column: 45
        },
        end: {
          line: 401,
          column: 68
        }
      },
      "167": {
        start: {
          line: 402,
          column: 28
        },
        end: {
          line: 402,
          column: 63
        }
      },
      "168": {
        start: {
          line: 403,
          column: 31
        },
        end: {
          line: 403,
          column: 75
        }
      },
      "169": {
        start: {
          line: 403,
          column: 54
        },
        end: {
          line: 403,
          column: 67
        }
      },
      "170": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 404,
          column: 145
        }
      },
      "171": {
        start: {
          line: 407,
          column: 23
        },
        end: {
          line: 409,
          column: 23
        }
      },
      "172": {
        start: {
          line: 408,
          column: 24
        },
        end: {
          line: 408,
          column: 47
        }
      },
      "173": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 410,
          column: 113
        }
      },
      "174": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 419,
          column: 38
        }
      },
      "175": {
        start: {
          line: 422,
          column: 0
        },
        end: {
          line: 422,
          column: 44
        }
      },
      "176": {
        start: {
          line: 426,
          column: 0
        },
        end: {
          line: 426,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 24
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 18
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 65
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 26
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 42
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 54
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 26
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 64
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 16
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 70
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 43
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 77
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 42
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 99
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 103,
            column: 20
          },
          end: {
            line: 103,
            column: 21
          }
        },
        loc: {
          start: {
            line: 103,
            column: 30
          },
          end: {
            line: 103,
            column: 42
          }
        },
        line: 103
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 104,
            column: 17
          },
          end: {
            line: 104,
            column: 18
          }
        },
        loc: {
          start: {
            line: 104,
            column: 27
          },
          end: {
            line: 104,
            column: 55
          }
        },
        line: 104
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 40
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 119
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 51
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 134
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        loc: {
          start: {
            line: 150,
            column: 38
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 150
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 151,
            column: 32
          },
          end: {
            line: 151,
            column: 33
          }
        },
        loc: {
          start: {
            line: 151,
            column: 44
          },
          end: {
            line: 151,
            column: 85
          }
        },
        line: 151
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 31
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 156
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 158,
            column: 38
          },
          end: {
            line: 158,
            column: 39
          }
        },
        loc: {
          start: {
            line: 158,
            column: 48
          },
          end: {
            line: 165,
            column: 9
          }
        },
        line: 158
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 173,
            column: 5
          }
        },
        loc: {
          start: {
            line: 173,
            column: 36
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 173
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 187,
            column: 55
          },
          end: {
            line: 187,
            column: 56
          }
        },
        loc: {
          start: {
            line: 187,
            column: 60
          },
          end: {
            line: 187,
            column: 83
          }
        },
        line: 187
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        },
        loc: {
          start: {
            line: 197,
            column: 32
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 197
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 223,
            column: 4
          },
          end: {
            line: 223,
            column: 5
          }
        },
        loc: {
          start: {
            line: 223,
            column: 47
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 223
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 237,
            column: 67
          },
          end: {
            line: 237,
            column: 68
          }
        },
        loc: {
          start: {
            line: 237,
            column: 72
          },
          end: {
            line: 237,
            column: 76
          }
        },
        line: 237
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 259,
            column: 66
          },
          end: {
            line: 259,
            column: 67
          }
        },
        loc: {
          start: {
            line: 259,
            column: 71
          },
          end: {
            line: 259,
            column: 75
          }
        },
        line: 259
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 282,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        loc: {
          start: {
            line: 282,
            column: 49
          },
          end: {
            line: 286,
            column: 5
          }
        },
        line: 282
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 283,
            column: 43
          },
          end: {
            line: 283,
            column: 44
          }
        },
        loc: {
          start: {
            line: 283,
            column: 53
          },
          end: {
            line: 283,
            column: 76
          }
        },
        line: 283
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 287,
            column: 4
          },
          end: {
            line: 287,
            column: 5
          }
        },
        loc: {
          start: {
            line: 287,
            column: 41
          },
          end: {
            line: 302,
            column: 5
          }
        },
        line: 287
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 291,
            column: 41
          },
          end: {
            line: 291,
            column: 42
          }
        },
        loc: {
          start: {
            line: 291,
            column: 53
          },
          end: {
            line: 300,
            column: 9
          }
        },
        line: 291
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 303,
            column: 4
          },
          end: {
            line: 303,
            column: 5
          }
        },
        loc: {
          start: {
            line: 303,
            column: 44
          },
          end: {
            line: 307,
            column: 5
          }
        },
        line: 303
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 304,
            column: 43
          },
          end: {
            line: 304,
            column: 44
          }
        },
        loc: {
          start: {
            line: 304,
            column: 53
          },
          end: {
            line: 304,
            column: 92
          }
        },
        line: 304
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 309,
            column: 4
          },
          end: {
            line: 309,
            column: 5
          }
        },
        loc: {
          start: {
            line: 309,
            column: 31
          },
          end: {
            line: 341,
            column: 5
          }
        },
        line: 309
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 342,
            column: 4
          },
          end: {
            line: 342,
            column: 5
          }
        },
        loc: {
          start: {
            line: 342,
            column: 46
          },
          end: {
            line: 352,
            column: 5
          }
        },
        line: 342
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 344,
            column: 58
          },
          end: {
            line: 344,
            column: 59
          }
        },
        loc: {
          start: {
            line: 344,
            column: 75
          },
          end: {
            line: 344,
            column: 87
          }
        },
        line: 344
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 353,
            column: 4
          },
          end: {
            line: 353,
            column: 5
          }
        },
        loc: {
          start: {
            line: 353,
            column: 42
          },
          end: {
            line: 363,
            column: 5
          }
        },
        line: 353
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 364,
            column: 4
          },
          end: {
            line: 364,
            column: 5
          }
        },
        loc: {
          start: {
            line: 364,
            column: 42
          },
          end: {
            line: 376,
            column: 5
          }
        },
        line: 364
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 372,
            column: 26
          },
          end: {
            line: 372,
            column: 27
          }
        },
        loc: {
          start: {
            line: 372,
            column: 38
          },
          end: {
            line: 374,
            column: 9
          }
        },
        line: 372
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 377,
            column: 4
          },
          end: {
            line: 377,
            column: 5
          }
        },
        loc: {
          start: {
            line: 377,
            column: 35
          },
          end: {
            line: 389,
            column: 5
          }
        },
        line: 377
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 390,
            column: 4
          },
          end: {
            line: 390,
            column: 5
          }
        },
        loc: {
          start: {
            line: 390,
            column: 44
          },
          end: {
            line: 399,
            column: 5
          }
        },
        line: 390
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 392,
            column: 20
          },
          end: {
            line: 392,
            column: 21
          }
        },
        loc: {
          start: {
            line: 392,
            column: 30
          },
          end: {
            line: 392,
            column: 42
          }
        },
        line: 392
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 393,
            column: 17
          },
          end: {
            line: 393,
            column: 18
          }
        },
        loc: {
          start: {
            line: 393,
            column: 27
          },
          end: {
            line: 393,
            column: 70
          }
        },
        line: 393
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 396,
            column: 17
          },
          end: {
            line: 396,
            column: 18
          }
        },
        loc: {
          start: {
            line: 396,
            column: 31
          },
          end: {
            line: 396,
            column: 73
          }
        },
        line: 396
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 400,
            column: 4
          },
          end: {
            line: 400,
            column: 5
          }
        },
        loc: {
          start: {
            line: 400,
            column: 43
          },
          end: {
            line: 405,
            column: 5
          }
        },
        line: 400
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 403,
            column: 47
          },
          end: {
            line: 403,
            column: 48
          }
        },
        loc: {
          start: {
            line: 403,
            column: 54
          },
          end: {
            line: 403,
            column: 67
          }
        },
        line: 403
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 406,
            column: 5
          }
        },
        loc: {
          start: {
            line: 406,
            column: 42
          },
          end: {
            line: 411,
            column: 5
          }
        },
        line: 406
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 408,
            column: 17
          },
          end: {
            line: 408,
            column: 18
          }
        },
        loc: {
          start: {
            line: 408,
            column: 24
          },
          end: {
            line: 408,
            column: 47
          }
        },
        line: 408
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 412,
            column: 4
          },
          end: {
            line: 412,
            column: 5
          }
        },
        loc: {
          start: {
            line: 412,
            column: 45
          },
          end: {
            line: 420,
            column: 5
          }
        },
        line: 412
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 39
          },
          end: {
            line: 26,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 26,
            column: 61
          },
          end: {
            line: 26,
            column: 63
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "2": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "3": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "4": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "5": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "6": {
        loc: {
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "7": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "8": {
        loc: {
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "9": {
        loc: {
          start: {
            line: 188,
            column: 31
          },
          end: {
            line: 188,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 31
          },
          end: {
            line: 188,
            column: 52
          }
        }, {
          start: {
            line: 188,
            column: 56
          },
          end: {
            line: 188,
            column: 57
          }
        }],
        line: 188
      },
      "10": {
        loc: {
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "11": {
        loc: {
          start: {
            line: 228,
            column: 15
          },
          end: {
            line: 228,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 15
          },
          end: {
            line: 228,
            column: 35
          }
        }, {
          start: {
            line: 228,
            column: 39
          },
          end: {
            line: 228,
            column: 66
          }
        }],
        line: 228
      },
      "12": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 271,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 242,
            column: 26
          }
        }, {
          start: {
            line: 243,
            column: 16
          },
          end: {
            line: 252,
            column: 26
          }
        }, {
          start: {
            line: 253,
            column: 16
          },
          end: {
            line: 264,
            column: 26
          }
        }, {
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 267,
            column: 26
          }
        }, {
          start: {
            line: 268,
            column: 16
          },
          end: {
            line: 270,
            column: 26
          }
        }],
        line: 230
      },
      "13": {
        loc: {
          start: {
            line: 234,
            column: 20
          },
          end: {
            line: 241,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 20
          },
          end: {
            line: 241,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "14": {
        loc: {
          start: {
            line: 256,
            column: 20
          },
          end: {
            line: 263,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 20
          },
          end: {
            line: 263,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "15": {
        loc: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 298,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 298,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "16": {
        loc: {
          start: {
            line: 331,
            column: 25
          },
          end: {
            line: 331,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 331,
            column: 25
          },
          end: {
            line: 331,
            column: 44
          }
        }, {
          start: {
            line: 331,
            column: 48
          },
          end: {
            line: 331,
            column: 61
          }
        }],
        line: 331
      },
      "17": {
        loc: {
          start: {
            line: 332,
            column: 29
          },
          end: {
            line: 332,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 332,
            column: 29
          },
          end: {
            line: 332,
            column: 52
          }
        }, {
          start: {
            line: 332,
            column: 56
          },
          end: {
            line: 332,
            column: 70
          }
        }],
        line: 332
      },
      "18": {
        loc: {
          start: {
            line: 333,
            column: 30
          },
          end: {
            line: 333,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 333,
            column: 30
          },
          end: {
            line: 333,
            column: 54
          }
        }, {
          start: {
            line: 333,
            column: 58
          },
          end: {
            line: 333,
            column: 84
          }
        }],
        line: 333
      },
      "19": {
        loc: {
          start: {
            line: 334,
            column: 25
          },
          end: {
            line: 339,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 25
          },
          end: {
            line: 334,
            column: 44
          }
        }, {
          start: {
            line: 334,
            column: 48
          },
          end: {
            line: 339,
            column: 13
          }
        }],
        line: 334
      },
      "20": {
        loc: {
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 360,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 360,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "21": {
        loc: {
          start: {
            line: 388,
            column: 15
          },
          end: {
            line: 388,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 388,
            column: 15
          },
          end: {
            line: 388,
            column: 43
          }
        }, {
          start: {
            line: 388,
            column: 47
          },
          end: {
            line: 388,
            column: 106
          }
        }],
        line: 388
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/assembly/context-assembler.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/assembly/context-assembler.ts"],
      sourcesContent: ["/**\n * Context Assembler - Intelligent Context Selection and Assembly\n * Implements priority-based selection with token budget management\n */\n\nimport {\n  ContextFragment,\n  ContextPriority,\n  TokenBudget,\n  TokenAllocation,\n  ContextAssemblyConfig,\n  PriorityWeights,\n  FallbackStrategy,\n  ContextLayers\n} from '../types/context.types';\n\nimport { \n  ContextFragmentFactory, \n  FragmentCollection, \n  TokenEstimator \n} from './context-fragment';\n\nimport { globalContextManager } from '../layers/global';\nimport { phaseContextManager } from '../layers/phase';\nimport { taskContextManager } from '../layers/task';\n\n/**\n * Context Assembly Result\n */\nexport interface ContextAssemblyResult {\n  fragments: ContextFragment[];\n  totalTokens: number;\n  budgetUsed: number;\n  budgetRemaining: number;\n  priorityBreakdown: Record<ContextPriority, number>;\n  fallbacksApplied: FallbackApplication[];\n  warnings: string[];\n}\n\nexport interface FallbackApplication {\n  strategy: FallbackStrategy;\n  fragmentsAffected: string[];\n  tokensSaved: number;\n  description: string;\n}\n\n/**\n * Context Assembler\n * Main class for assembling context with intelligent selection and budget management\n */\nexport class ContextAssembler {\n  private config: ContextAssemblyConfig;\n  private fragmentFactory: ContextFragmentFactory;\n  private tokenEstimator: TokenEstimator;\n\n  constructor(config?: Partial<ContextAssemblyConfig>) {\n    this.fragmentFactory = new ContextFragmentFactory();\n    this.tokenEstimator = new TokenEstimator();\n    this.config = this.buildDefaultConfig(config);\n  }\n\n  /**\n   * Assemble context with intelligent selection and budget management\n   */\n  public async assembleContext(\n    commandName?: string,\n    additionalFragments: ContextFragment[] = []\n  ): Promise<ContextAssemblyResult> {\n    const startTime = Date.now();\n    \n    // Collect fragments from all layers\n    const allFragments = await this.collectAllFragments(commandName);\n    allFragments.push(...additionalFragments);\n\n    // Remove expired fragments\n    const validFragments = this.removeExpiredFragments(allFragments);\n\n    // Apply intelligent selection\n    const selectedFragments = this.selectFragments(validFragments);\n\n    // Apply token budget management\n    const budgetResult = this.applyTokenBudget(selectedFragments);\n\n    // Build assembly result\n    const result: ContextAssemblyResult = {\n      fragments: budgetResult.fragments,\n      totalTokens: budgetResult.totalTokens,\n      budgetUsed: budgetResult.budgetUsed,\n      budgetRemaining: this.config.tokenBudget.total - budgetResult.budgetUsed,\n      priorityBreakdown: this.calculatePriorityBreakdown(budgetResult.fragments),\n      fallbacksApplied: budgetResult.fallbacksApplied,\n      warnings: budgetResult.warnings\n    };\n\n    // Log assembly metrics\n    this.logAssemblyMetrics(result, Date.now() - startTime);\n\n    return result;\n  }\n\n  /**\n   * Assemble context for specific command\n   */\n  public async assembleForCommand(commandName: string): Promise<ContextAssemblyResult> {\n    // Get command-specific context requirements\n    const commandContext = this.getCommandContext(commandName);\n    \n    // Create command fragment\n    const commandFragment = this.fragmentFactory.createCommandFragment(\n      commandName,\n      commandContext.type,\n      commandContext.description,\n      ContextPriority.HIGH\n    );\n\n    return this.assembleContext(commandName, [commandFragment]);\n  }\n\n  /**\n   * Update assembly configuration\n   */\n  public updateConfig(updates: Partial<ContextAssemblyConfig>): void {\n    this.config = { ...this.config, ...updates };\n  }\n\n  /**\n   * Get current configuration\n   */\n  public getConfig(): ContextAssemblyConfig {\n    return { ...this.config };\n  }\n\n  // Private implementation methods\n\n  /**\n   * Collect fragments from all context layers\n   */\n  private async collectAllFragments(commandName?: string): Promise<ContextFragment[]> {\n    const fragments: ContextFragment[] = [];\n\n    // L1: Global Context Fragments\n    const globalContext = globalContextManager.getContext();\n    if (globalContext) {\n      fragments.push(...this.extractGlobalFragments(globalContext));\n    }\n\n    // L2: Phase Context Fragments\n    const phaseContext = phaseContextManager.getCurrentPhase();\n    if (phaseContext) {\n      fragments.push(...this.extractPhaseFragments(phaseContext));\n    }\n\n    // L3: Task Context Fragments\n    const taskContext = taskContextManager.getCurrentTask();\n    if (taskContext) {\n      fragments.push(...this.extractTaskFragments(taskContext, commandName));\n    }\n\n    return fragments;\n  }\n\n  /**\n   * Extract fragments from global context\n   */\n  private extractGlobalFragments(globalContext: any): ContextFragment[] {\n    const fragments: ContextFragment[] = [];\n\n    // Global rules fragment\n    const rulesContent = globalContext.rules\n      .filter((rule: any) => rule.enabled)\n      .map((rule: any) => `${rule.name}: ${rule.rule}`)\n      .join('\\n');\n\n    if (rulesContent) {\n      fragments.push(\n        this.fragmentFactory.createGlobalFragment('rules', rulesContent, ContextPriority.CRITICAL)\n      );\n    }\n\n    // Global configuration fragment\n    const configContent = this.buildGlobalConfigContent(globalContext);\n    if (configContent) {\n      fragments.push(\n        this.fragmentFactory.createGlobalFragment('config', configContent, ContextPriority.HIGH)\n      );\n    }\n\n    return fragments;\n  }\n\n  /**\n   * Extract fragments from phase context\n   */\n  private extractPhaseFragments(phaseContext: any): ContextFragment[] {\n    const fragments: ContextFragment[] = [];\n\n    // Phase context fragment\n    const phaseContent = phaseContextManager.getPhaseSummary();\n    fragments.push(\n      this.fragmentFactory.createPhaseFragment(\n        phaseContext.phaseNumber,\n        phaseContext.phaseName,\n        'context',\n        phaseContent,\n        ContextPriority.HIGH\n      )\n    );\n\n    // Phase history fragment (if significant progress)\n    if (phaseContext.data.progress.completionPercentage > 10) {\n      const historyContent = this.buildPhaseHistoryContent(phaseContext);\n      fragments.push(\n        this.fragmentFactory.createPhaseFragment(\n          phaseContext.phaseNumber,\n          phaseContext.phaseName,\n          'history',\n          historyContent,\n          ContextPriority.MEDIUM\n        )\n      );\n    }\n\n    return fragments;\n  }\n\n  /**\n   * Extract fragments from task context\n   */\n  private extractTaskFragments(taskContext: any, commandName?: string): ContextFragment[] {\n    const fragments: ContextFragment[] = [];\n\n    // Current task fragment\n    const taskContent = taskContextManager.getTaskSummary();\n    fragments.push(\n      this.fragmentFactory.createTaskFragment(\n        taskContext.taskId,\n        taskContext.taskType,\n        'context',\n        taskContent,\n        ContextPriority.HIGH\n      )\n    );\n\n    // Command-specific task state\n    if (commandName) {\n      const commandContext = taskContextManager.getContextForCommand(commandName);\n      const stateContent = this.buildTaskStateContent(commandContext);\n      fragments.push(\n        this.fragmentFactory.createTaskFragment(\n          taskContext.taskId,\n          taskContext.taskType,\n          'state',\n          stateContent,\n          ContextPriority.MEDIUM\n        )\n      );\n    }\n\n    return fragments;\n  }\n\n  /**\n   * Remove expired fragments\n   */\n  private removeExpiredFragments(fragments: ContextFragment[]): ContextFragment[] {\n    return fragments.filter(fragment => !this.fragmentFactory.isExpired(fragment));\n  }\n\n  /**\n   * Select fragments using intelligent algorithm\n   */\n  private selectFragments(fragments: ContextFragment[]): ContextFragment[] {\n    // Sort by priority and relevance\n    const sorted = fragments.sort((a, b) => {\n      // Primary sort: priority\n      if (a.priority !== b.priority) {\n        return b.priority - a.priority;\n      }\n      \n      // Secondary sort: freshness (newer first)\n      return b.metadata.lastModified - a.metadata.lastModified;\n    });\n\n    // Apply priority weights\n    const weighted = this.applyPriorityWeights(sorted);\n\n    return weighted;\n  }\n\n  /**\n   * Apply priority weights to fragment selection\n   */\n  private applyPriorityWeights(fragments: ContextFragment[]): ContextFragment[] {\n    const weights = this.config.priorityWeights;\n    const selected: ContextFragment[] = [];\n\n    // Calculate token allocation per priority\n    const totalBudget = this.config.tokenBudget.available;\n    const allocations = this.calculatePriorityAllocations(totalBudget);\n\n    // Select fragments within each priority allocation\n    for (const priority of [\n      ContextPriority.CRITICAL,\n      ContextPriority.HIGH,\n      ContextPriority.MEDIUM,\n      ContextPriority.LOW,\n      ContextPriority.MINIMAL\n    ]) {\n      const priorityFragments = fragments.filter(f => f.priority === priority);\n      const allocation = allocations[priority] || 0;\n      \n      const selectedInPriority = this.selectWithinBudget(priorityFragments, allocation);\n      selected.push(...selectedInPriority);\n    }\n\n    return selected;\n  }\n\n  /**\n   * Apply token budget management\n   */\n  private applyTokenBudget(fragments: ContextFragment[]): BudgetResult {\n    const budget = this.config.tokenBudget;\n    const fallbacksApplied: FallbackApplication[] = [];\n    const warnings: string[] = [];\n    let currentFragments = [...fragments];\n\n    // Calculate initial token usage\n    let totalTokens = this.tokenEstimator.estimateTotal(currentFragments);\n\n    // Apply fallback strategies if over budget\n    if (totalTokens > budget.available) {\n      const fallbackResult = this.applyFallbackStrategies(currentFragments, budget.available);\n      currentFragments = fallbackResult.fragments;\n      totalTokens = fallbackResult.totalTokens;\n      fallbacksApplied.push(...fallbackResult.fallbacksApplied);\n      warnings.push(...fallbackResult.warnings);\n    }\n\n    return {\n      fragments: currentFragments,\n      totalTokens,\n      budgetUsed: totalTokens,\n      fallbacksApplied,\n      warnings\n    };\n  }\n\n  /**\n   * Apply fallback strategies when over budget\n   */\n  private applyFallbackStrategies(\n    fragments: ContextFragment[],\n    budget: number\n  ): FallbackResult {\n    let currentFragments = [...fragments];\n    let totalTokens = this.tokenEstimator.estimateTotal(currentFragments);\n    const fallbacksApplied: FallbackApplication[] = [];\n    const warnings: string[] = [];\n\n    while (totalTokens > budget && currentFragments.length > 0) {\n      const strategy = this.config.fallbackStrategy;\n      \n      switch (strategy) {\n        case 'truncate-lowest-priority':\n          const removed = this.removeLowPriorityFragments(currentFragments, 1);\n          currentFragments = removed.remaining;\n          if (removed.removed.length > 0) {\n            fallbacksApplied.push({\n              strategy,\n              fragmentsAffected: removed.removed.map(f => f.id),\n              tokensSaved: this.tokenEstimator.estimateTotal(removed.removed),\n              description: `Removed ${removed.removed.length} low priority fragments`\n            });\n          }\n          break;\n\n        case 'compress-content':\n          const compressed = this.compressFragments(currentFragments, budget);\n          currentFragments = compressed.fragments;\n          fallbacksApplied.push({\n            strategy,\n            fragmentsAffected: compressed.affectedIds,\n            tokensSaved: compressed.tokensSaved,\n            description: `Compressed ${compressed.affectedIds.length} fragments`\n          });\n          break;\n\n        case 'truncate-oldest':\n          const oldest = this.removeOldestFragments(currentFragments, 1);\n          currentFragments = oldest.remaining;\n          if (oldest.removed.length > 0) {\n            fallbacksApplied.push({\n              strategy,\n              fragmentsAffected: oldest.removed.map(f => f.id),\n              tokensSaved: this.tokenEstimator.estimateTotal(oldest.removed),\n              description: `Removed ${oldest.removed.length} oldest fragments`\n            });\n          }\n          break;\n\n        case 'fail-fast':\n          warnings.push(`Token budget exceeded: ${totalTokens} > ${budget}`);\n          break;\n\n        default:\n          warnings.push(`Unknown fallback strategy: ${strategy}`);\n          break;\n      }\n\n      totalTokens = this.tokenEstimator.estimateTotal(currentFragments);\n    }\n\n    return {\n      fragments: currentFragments,\n      totalTokens,\n      fallbacksApplied,\n      warnings\n    };\n  }\n\n  // Helper methods for fallback strategies\n\n  private removeLowPriorityFragments(\n    fragments: ContextFragment[],\n    count: number\n  ): { remaining: ContextFragment[]; removed: ContextFragment[] } {\n    const sorted = [...fragments].sort((a, b) => a.priority - b.priority);\n    const removed = sorted.splice(0, count);\n    return { remaining: sorted, removed };\n  }\n\n  private compressFragments(\n    fragments: ContextFragment[],\n    budget: number\n  ): { fragments: ContextFragment[]; affectedIds: string[]; tokensSaved: number } {\n    const targetTokensPerFragment = Math.floor(budget / fragments.length);\n    let tokensSaved = 0;\n    const affectedIds: string[] = [];\n\n    const compressed = fragments.map(fragment => {\n      if (fragment.tokenEstimate > targetTokensPerFragment) {\n        const originalTokens = fragment.tokenEstimate;\n        const compressedFragment = this.fragmentFactory.compressFragment(\n          fragment,\n          targetTokensPerFragment\n        );\n        tokensSaved += originalTokens - compressedFragment.tokenEstimate;\n        affectedIds.push(fragment.id);\n        return compressedFragment;\n      }\n      return fragment;\n    });\n\n    return { fragments: compressed, affectedIds, tokensSaved };\n  }\n\n  private removeOldestFragments(\n    fragments: ContextFragment[],\n    count: number\n  ): { remaining: ContextFragment[]; removed: ContextFragment[] } {\n    const sorted = [...fragments].sort((a, b) => a.metadata.created - b.metadata.created);\n    const removed = sorted.splice(0, count);\n    return { remaining: sorted, removed };\n  }\n\n  // Utility and configuration methods\n\n  private buildDefaultConfig(config?: Partial<ContextAssemblyConfig>): ContextAssemblyConfig {\n    const defaultBudget: TokenBudget = {\n      total: 8000,\n      reserved: 1000,\n      available: 7000,\n      used: 0,\n      allocation: {\n        global: 2000,\n        phase: 2000,\n        task: 2000,\n        memory: 500,\n        buffer: 500\n      }\n    };\n\n    const defaultWeights: PriorityWeights = {\n      [ContextPriority.CRITICAL]: 1.0,\n      [ContextPriority.HIGH]: 0.8,\n      [ContextPriority.MEDIUM]: 0.6,\n      [ContextPriority.LOW]: 0.4,\n      [ContextPriority.MINIMAL]: 0.2\n    };\n\n    return {\n      tokenBudget: config?.tokenBudget || defaultBudget,\n      priorityWeights: config?.priorityWeights || defaultWeights,\n      fallbackStrategy: config?.fallbackStrategy || 'truncate-lowest-priority',\n      cacheConfig: config?.cacheConfig || {\n        maxSize: 1000,\n        ttl: 3600000, // 1 hour\n        strategy: 'lru',\n        persistToDisk: false\n      }\n    };\n  }\n\n  private calculatePriorityAllocations(totalBudget: number): Record<ContextPriority, number> {\n    const weights = this.config.priorityWeights;\n    const totalWeight = Object.values(weights).reduce((sum, weight) => sum + weight, 0);\n\n    return {\n      [ContextPriority.CRITICAL]: Math.floor((totalBudget * weights[ContextPriority.CRITICAL]) / totalWeight),\n      [ContextPriority.HIGH]: Math.floor((totalBudget * weights[ContextPriority.HIGH]) / totalWeight),\n      [ContextPriority.MEDIUM]: Math.floor((totalBudget * weights[ContextPriority.MEDIUM]) / totalWeight),\n      [ContextPriority.LOW]: Math.floor((totalBudget * weights[ContextPriority.LOW]) / totalWeight),\n      [ContextPriority.MINIMAL]: Math.floor((totalBudget * weights[ContextPriority.MINIMAL]) / totalWeight)\n    };\n  }\n\n  private selectWithinBudget(fragments: ContextFragment[], budget: number): ContextFragment[] {\n    const selected: ContextFragment[] = [];\n    let usedTokens = 0;\n\n    for (const fragment of fragments) {\n      if (usedTokens + fragment.tokenEstimate <= budget) {\n        selected.push(fragment);\n        usedTokens += fragment.tokenEstimate;\n      }\n    }\n\n    return selected;\n  }\n\n  private calculatePriorityBreakdown(fragments: ContextFragment[]): Record<ContextPriority, number> {\n    const breakdown: Record<ContextPriority, number> = {\n      [ContextPriority.CRITICAL]: 0,\n      [ContextPriority.HIGH]: 0,\n      [ContextPriority.MEDIUM]: 0,\n      [ContextPriority.LOW]: 0,\n      [ContextPriority.MINIMAL]: 0\n    };\n\n    fragments.forEach(fragment => {\n      breakdown[fragment.priority] += fragment.tokenEstimate;\n    });\n\n    return breakdown;\n  }\n\n  private getCommandContext(commandName: string): { type: string; description: string } {\n    const commandContexts: Record<string, { type: string; description: string }> = {\n      'Read': { type: 'file-operation', description: 'Reading file content for analysis or processing' },\n      'Write': { type: 'file-operation', description: 'Writing content to file with validation' },\n      'Edit': { type: 'file-operation', description: 'Editing existing file with precise modifications' },\n      'Bash': { type: 'system-operation', description: 'Executing system command with safety checks' },\n      'TodoWrite': { type: 'task-management', description: 'Managing task list and progress tracking' },\n      'UltraThink': { type: 'analysis', description: 'Deep analysis and planning with multiple perspectives' },\n      'WebFetch': { type: 'research', description: 'Fetching and analyzing web content' },\n      'WebSearch': { type: 'research', description: 'Searching for relevant information online' }\n    };\n\n    return commandContexts[commandName] || { type: 'unknown', description: 'Unknown command context' };\n  }\n\n  private buildGlobalConfigContent(globalContext: any): string {\n    const mcpTools = globalContext.configuration.mcpTools\n      .filter((tool: any) => tool.enabled)\n      .map((tool: any) => `${tool.name} (Priority: ${tool.priority})`)\n      .join(', ');\n\n    const qualityStandards = globalContext.configuration.qualityStandards\n      .map((standard: any) => `${standard.name}: ${standard.threshold}%`)\n      .join(', ');\n\n    return `MCP Tools: ${mcpTools}\\nQuality Standards: ${qualityStandards}`;\n  }\n\n  private buildPhaseHistoryContent(phaseContext: any): string {\n    const { completedTasks, blockers } = phaseContext.phaseState;\n    const recentTasks = completedTasks.slice(-5).join(', ');\n    const activeBlockers = blockers.filter((b: any) => !b.resolution).length;\n\n    return `Recent Tasks: ${recentTasks}\\nActive Blockers: ${activeBlockers}\\nProgress: ${phaseContext.data.progress.completionPercentage}%`;\n  }\n\n  private buildTaskStateContent(commandContext: any): string {\n    const params = commandContext.relevantParameters\n      .map((p: any) => `${p.name}: ${p.value}`)\n      .join(', ');\n\n    return `Command: ${commandContext.commandName}\\nType: ${commandContext.taskType}\\nParameters: ${params}`;\n  }\n\n  private logAssemblyMetrics(result: ContextAssemblyResult, assemblyTime: number): void {\n    console.log(`Context Assembly Metrics:\nFragments: ${result.fragments.length}\nTokens Used: ${result.totalTokens}\nBudget Utilization: ${((result.budgetUsed / (result.budgetUsed + result.budgetRemaining)) * 100).toFixed(1)}%\nAssembly Time: ${assemblyTime}ms\nFallbacks Applied: ${result.fallbacksApplied.length}\nWarnings: ${result.warnings.length}`);\n  }\n}\n\n// Supporting interfaces\ninterface BudgetResult {\n  fragments: ContextFragment[];\n  totalTokens: number;\n  budgetUsed: number;\n  fallbacksApplied: FallbackApplication[];\n  warnings: string[];\n}\n\ninterface FallbackResult {\n  fragments: ContextFragment[];\n  totalTokens: number;\n  fallbacksApplied: FallbackApplication[];\n  warnings: string[];\n}\n\n/**\n * Singleton instance\n */\nexport const contextAssembler = new ContextAssembler();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "450abe2897e95e7b28eb1c335cd7cb2e9690d19b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1k45k240p6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1k45k240p6();
cov_1k45k240p6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1k45k240p6().s[1]++;
exports.contextAssembler = exports.ContextAssembler = void 0;
const context_types_1 =
/* istanbul ignore next */
(cov_1k45k240p6().s[2]++, require("../types/context.types"));
const context_fragment_1 =
/* istanbul ignore next */
(cov_1k45k240p6().s[3]++, require("./context-fragment"));
const global_1 =
/* istanbul ignore next */
(cov_1k45k240p6().s[4]++, require("../layers/global"));
const phase_1 =
/* istanbul ignore next */
(cov_1k45k240p6().s[5]++, require("../layers/phase"));
const task_1 =
/* istanbul ignore next */
(cov_1k45k240p6().s[6]++, require("../layers/task"));
/**
 * Context Assembler
 * Main class for assembling context with intelligent selection and budget management
 */
class ContextAssembler {
  constructor(config) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[0]++;
    cov_1k45k240p6().s[7]++;
    this.fragmentFactory = new context_fragment_1.ContextFragmentFactory();
    /* istanbul ignore next */
    cov_1k45k240p6().s[8]++;
    this.tokenEstimator = new context_fragment_1.TokenEstimator();
    /* istanbul ignore next */
    cov_1k45k240p6().s[9]++;
    this.config = this.buildDefaultConfig(config);
  }
  /**
   * Assemble context with intelligent selection and budget management
   */
  async assembleContext(commandName, additionalFragments =
  /* istanbul ignore next */
  (cov_1k45k240p6().b[0][0]++, [])) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[1]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[10]++, Date.now());
    // Collect fragments from all layers
    const allFragments =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[11]++, await this.collectAllFragments(commandName));
    /* istanbul ignore next */
    cov_1k45k240p6().s[12]++;
    allFragments.push(...additionalFragments);
    // Remove expired fragments
    const validFragments =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[13]++, this.removeExpiredFragments(allFragments));
    // Apply intelligent selection
    const selectedFragments =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[14]++, this.selectFragments(validFragments));
    // Apply token budget management
    const budgetResult =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[15]++, this.applyTokenBudget(selectedFragments));
    // Build assembly result
    const result =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[16]++, {
      fragments: budgetResult.fragments,
      totalTokens: budgetResult.totalTokens,
      budgetUsed: budgetResult.budgetUsed,
      budgetRemaining: this.config.tokenBudget.total - budgetResult.budgetUsed,
      priorityBreakdown: this.calculatePriorityBreakdown(budgetResult.fragments),
      fallbacksApplied: budgetResult.fallbacksApplied,
      warnings: budgetResult.warnings
    });
    // Log assembly metrics
    /* istanbul ignore next */
    cov_1k45k240p6().s[17]++;
    this.logAssemblyMetrics(result, Date.now() - startTime);
    /* istanbul ignore next */
    cov_1k45k240p6().s[18]++;
    return result;
  }
  /**
   * Assemble context for specific command
   */
  async assembleForCommand(commandName) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[2]++;
    // Get command-specific context requirements
    const commandContext =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[19]++, this.getCommandContext(commandName));
    // Create command fragment
    const commandFragment =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[20]++, this.fragmentFactory.createCommandFragment(commandName, commandContext.type, commandContext.description, context_types_1.ContextPriority.HIGH));
    /* istanbul ignore next */
    cov_1k45k240p6().s[21]++;
    return this.assembleContext(commandName, [commandFragment]);
  }
  /**
   * Update assembly configuration
   */
  updateConfig(updates) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[3]++;
    cov_1k45k240p6().s[22]++;
    this.config = {
      ...this.config,
      ...updates
    };
  }
  /**
   * Get current configuration
   */
  getConfig() {
    /* istanbul ignore next */
    cov_1k45k240p6().f[4]++;
    cov_1k45k240p6().s[23]++;
    return {
      ...this.config
    };
  }
  // Private implementation methods
  /**
   * Collect fragments from all context layers
   */
  async collectAllFragments(commandName) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[5]++;
    const fragments =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[24]++, []);
    // L1: Global Context Fragments
    const globalContext =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[25]++, global_1.globalContextManager.getContext());
    /* istanbul ignore next */
    cov_1k45k240p6().s[26]++;
    if (globalContext) {
      /* istanbul ignore next */
      cov_1k45k240p6().b[1][0]++;
      cov_1k45k240p6().s[27]++;
      fragments.push(...this.extractGlobalFragments(globalContext));
    } else
    /* istanbul ignore next */
    {
      cov_1k45k240p6().b[1][1]++;
    }
    // L2: Phase Context Fragments
    const phaseContext =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[28]++, phase_1.phaseContextManager.getCurrentPhase());
    /* istanbul ignore next */
    cov_1k45k240p6().s[29]++;
    if (phaseContext) {
      /* istanbul ignore next */
      cov_1k45k240p6().b[2][0]++;
      cov_1k45k240p6().s[30]++;
      fragments.push(...this.extractPhaseFragments(phaseContext));
    } else
    /* istanbul ignore next */
    {
      cov_1k45k240p6().b[2][1]++;
    }
    // L3: Task Context Fragments
    const taskContext =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[31]++, task_1.taskContextManager.getCurrentTask());
    /* istanbul ignore next */
    cov_1k45k240p6().s[32]++;
    if (taskContext) {
      /* istanbul ignore next */
      cov_1k45k240p6().b[3][0]++;
      cov_1k45k240p6().s[33]++;
      fragments.push(...this.extractTaskFragments(taskContext, commandName));
    } else
    /* istanbul ignore next */
    {
      cov_1k45k240p6().b[3][1]++;
    }
    cov_1k45k240p6().s[34]++;
    return fragments;
  }
  /**
   * Extract fragments from global context
   */
  extractGlobalFragments(globalContext) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[6]++;
    const fragments =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[35]++, []);
    // Global rules fragment
    const rulesContent =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[36]++, globalContext.rules.filter(rule => {
      /* istanbul ignore next */
      cov_1k45k240p6().f[7]++;
      cov_1k45k240p6().s[37]++;
      return rule.enabled;
    }).map(rule => {
      /* istanbul ignore next */
      cov_1k45k240p6().f[8]++;
      cov_1k45k240p6().s[38]++;
      return `${rule.name}: ${rule.rule}`;
    }).join('\n'));
    /* istanbul ignore next */
    cov_1k45k240p6().s[39]++;
    if (rulesContent) {
      /* istanbul ignore next */
      cov_1k45k240p6().b[4][0]++;
      cov_1k45k240p6().s[40]++;
      fragments.push(this.fragmentFactory.createGlobalFragment('rules', rulesContent, context_types_1.ContextPriority.CRITICAL));
    } else
    /* istanbul ignore next */
    {
      cov_1k45k240p6().b[4][1]++;
    }
    // Global configuration fragment
    const configContent =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[41]++, this.buildGlobalConfigContent(globalContext));
    /* istanbul ignore next */
    cov_1k45k240p6().s[42]++;
    if (configContent) {
      /* istanbul ignore next */
      cov_1k45k240p6().b[5][0]++;
      cov_1k45k240p6().s[43]++;
      fragments.push(this.fragmentFactory.createGlobalFragment('config', configContent, context_types_1.ContextPriority.HIGH));
    } else
    /* istanbul ignore next */
    {
      cov_1k45k240p6().b[5][1]++;
    }
    cov_1k45k240p6().s[44]++;
    return fragments;
  }
  /**
   * Extract fragments from phase context
   */
  extractPhaseFragments(phaseContext) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[9]++;
    const fragments =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[45]++, []);
    // Phase context fragment
    const phaseContent =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[46]++, phase_1.phaseContextManager.getPhaseSummary());
    /* istanbul ignore next */
    cov_1k45k240p6().s[47]++;
    fragments.push(this.fragmentFactory.createPhaseFragment(phaseContext.phaseNumber, phaseContext.phaseName, 'context', phaseContent, context_types_1.ContextPriority.HIGH));
    // Phase history fragment (if significant progress)
    /* istanbul ignore next */
    cov_1k45k240p6().s[48]++;
    if (phaseContext.data.progress.completionPercentage > 10) {
      /* istanbul ignore next */
      cov_1k45k240p6().b[6][0]++;
      const historyContent =
      /* istanbul ignore next */
      (cov_1k45k240p6().s[49]++, this.buildPhaseHistoryContent(phaseContext));
      /* istanbul ignore next */
      cov_1k45k240p6().s[50]++;
      fragments.push(this.fragmentFactory.createPhaseFragment(phaseContext.phaseNumber, phaseContext.phaseName, 'history', historyContent, context_types_1.ContextPriority.MEDIUM));
    } else
    /* istanbul ignore next */
    {
      cov_1k45k240p6().b[6][1]++;
    }
    cov_1k45k240p6().s[51]++;
    return fragments;
  }
  /**
   * Extract fragments from task context
   */
  extractTaskFragments(taskContext, commandName) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[10]++;
    const fragments =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[52]++, []);
    // Current task fragment
    const taskContent =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[53]++, task_1.taskContextManager.getTaskSummary());
    /* istanbul ignore next */
    cov_1k45k240p6().s[54]++;
    fragments.push(this.fragmentFactory.createTaskFragment(taskContext.taskId, taskContext.taskType, 'context', taskContent, context_types_1.ContextPriority.HIGH));
    // Command-specific task state
    /* istanbul ignore next */
    cov_1k45k240p6().s[55]++;
    if (commandName) {
      /* istanbul ignore next */
      cov_1k45k240p6().b[7][0]++;
      const commandContext =
      /* istanbul ignore next */
      (cov_1k45k240p6().s[56]++, task_1.taskContextManager.getContextForCommand(commandName));
      const stateContent =
      /* istanbul ignore next */
      (cov_1k45k240p6().s[57]++, this.buildTaskStateContent(commandContext));
      /* istanbul ignore next */
      cov_1k45k240p6().s[58]++;
      fragments.push(this.fragmentFactory.createTaskFragment(taskContext.taskId, taskContext.taskType, 'state', stateContent, context_types_1.ContextPriority.MEDIUM));
    } else
    /* istanbul ignore next */
    {
      cov_1k45k240p6().b[7][1]++;
    }
    cov_1k45k240p6().s[59]++;
    return fragments;
  }
  /**
   * Remove expired fragments
   */
  removeExpiredFragments(fragments) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[11]++;
    cov_1k45k240p6().s[60]++;
    return fragments.filter(fragment => {
      /* istanbul ignore next */
      cov_1k45k240p6().f[12]++;
      cov_1k45k240p6().s[61]++;
      return !this.fragmentFactory.isExpired(fragment);
    });
  }
  /**
   * Select fragments using intelligent algorithm
   */
  selectFragments(fragments) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[13]++;
    // Sort by priority and relevance
    const sorted =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[62]++, fragments.sort((a, b) => {
      /* istanbul ignore next */
      cov_1k45k240p6().f[14]++;
      cov_1k45k240p6().s[63]++;
      // Primary sort: priority
      if (a.priority !== b.priority) {
        /* istanbul ignore next */
        cov_1k45k240p6().b[8][0]++;
        cov_1k45k240p6().s[64]++;
        return b.priority - a.priority;
      } else
      /* istanbul ignore next */
      {
        cov_1k45k240p6().b[8][1]++;
      }
      // Secondary sort: freshness (newer first)
      cov_1k45k240p6().s[65]++;
      return b.metadata.lastModified - a.metadata.lastModified;
    }));
    // Apply priority weights
    const weighted =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[66]++, this.applyPriorityWeights(sorted));
    /* istanbul ignore next */
    cov_1k45k240p6().s[67]++;
    return weighted;
  }
  /**
   * Apply priority weights to fragment selection
   */
  applyPriorityWeights(fragments) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[15]++;
    const weights =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[68]++, this.config.priorityWeights);
    const selected =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[69]++, []);
    // Calculate token allocation per priority
    const totalBudget =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[70]++, this.config.tokenBudget.available);
    const allocations =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[71]++, this.calculatePriorityAllocations(totalBudget));
    // Select fragments within each priority allocation
    /* istanbul ignore next */
    cov_1k45k240p6().s[72]++;
    for (const priority of [context_types_1.ContextPriority.CRITICAL, context_types_1.ContextPriority.HIGH, context_types_1.ContextPriority.MEDIUM, context_types_1.ContextPriority.LOW, context_types_1.ContextPriority.MINIMAL]) {
      const priorityFragments =
      /* istanbul ignore next */
      (cov_1k45k240p6().s[73]++, fragments.filter(f => {
        /* istanbul ignore next */
        cov_1k45k240p6().f[16]++;
        cov_1k45k240p6().s[74]++;
        return f.priority === priority;
      }));
      const allocation =
      /* istanbul ignore next */
      (cov_1k45k240p6().s[75]++,
      /* istanbul ignore next */
      (cov_1k45k240p6().b[9][0]++, allocations[priority]) ||
      /* istanbul ignore next */
      (cov_1k45k240p6().b[9][1]++, 0));
      const selectedInPriority =
      /* istanbul ignore next */
      (cov_1k45k240p6().s[76]++, this.selectWithinBudget(priorityFragments, allocation));
      /* istanbul ignore next */
      cov_1k45k240p6().s[77]++;
      selected.push(...selectedInPriority);
    }
    /* istanbul ignore next */
    cov_1k45k240p6().s[78]++;
    return selected;
  }
  /**
   * Apply token budget management
   */
  applyTokenBudget(fragments) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[17]++;
    const budget =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[79]++, this.config.tokenBudget);
    const fallbacksApplied =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[80]++, []);
    const warnings =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[81]++, []);
    let currentFragments =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[82]++, [...fragments]);
    // Calculate initial token usage
    let totalTokens =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[83]++, this.tokenEstimator.estimateTotal(currentFragments));
    // Apply fallback strategies if over budget
    /* istanbul ignore next */
    cov_1k45k240p6().s[84]++;
    if (totalTokens > budget.available) {
      /* istanbul ignore next */
      cov_1k45k240p6().b[10][0]++;
      const fallbackResult =
      /* istanbul ignore next */
      (cov_1k45k240p6().s[85]++, this.applyFallbackStrategies(currentFragments, budget.available));
      /* istanbul ignore next */
      cov_1k45k240p6().s[86]++;
      currentFragments = fallbackResult.fragments;
      /* istanbul ignore next */
      cov_1k45k240p6().s[87]++;
      totalTokens = fallbackResult.totalTokens;
      /* istanbul ignore next */
      cov_1k45k240p6().s[88]++;
      fallbacksApplied.push(...fallbackResult.fallbacksApplied);
      /* istanbul ignore next */
      cov_1k45k240p6().s[89]++;
      warnings.push(...fallbackResult.warnings);
    } else
    /* istanbul ignore next */
    {
      cov_1k45k240p6().b[10][1]++;
    }
    cov_1k45k240p6().s[90]++;
    return {
      fragments: currentFragments,
      totalTokens,
      budgetUsed: totalTokens,
      fallbacksApplied,
      warnings
    };
  }
  /**
   * Apply fallback strategies when over budget
   */
  applyFallbackStrategies(fragments, budget) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[18]++;
    let currentFragments =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[91]++, [...fragments]);
    let totalTokens =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[92]++, this.tokenEstimator.estimateTotal(currentFragments));
    const fallbacksApplied =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[93]++, []);
    const warnings =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[94]++, []);
    /* istanbul ignore next */
    cov_1k45k240p6().s[95]++;
    while (
    /* istanbul ignore next */
    (cov_1k45k240p6().b[11][0]++, totalTokens > budget) &&
    /* istanbul ignore next */
    (cov_1k45k240p6().b[11][1]++, currentFragments.length > 0)) {
      const strategy =
      /* istanbul ignore next */
      (cov_1k45k240p6().s[96]++, this.config.fallbackStrategy);
      /* istanbul ignore next */
      cov_1k45k240p6().s[97]++;
      switch (strategy) {
        case 'truncate-lowest-priority':
          /* istanbul ignore next */
          cov_1k45k240p6().b[12][0]++;
          const removed =
          /* istanbul ignore next */
          (cov_1k45k240p6().s[98]++, this.removeLowPriorityFragments(currentFragments, 1));
          /* istanbul ignore next */
          cov_1k45k240p6().s[99]++;
          currentFragments = removed.remaining;
          /* istanbul ignore next */
          cov_1k45k240p6().s[100]++;
          if (removed.removed.length > 0) {
            /* istanbul ignore next */
            cov_1k45k240p6().b[13][0]++;
            cov_1k45k240p6().s[101]++;
            fallbacksApplied.push({
              strategy,
              fragmentsAffected: removed.removed.map(f => {
                /* istanbul ignore next */
                cov_1k45k240p6().f[19]++;
                cov_1k45k240p6().s[102]++;
                return f.id;
              }),
              tokensSaved: this.tokenEstimator.estimateTotal(removed.removed),
              description: `Removed ${removed.removed.length} low priority fragments`
            });
          } else
          /* istanbul ignore next */
          {
            cov_1k45k240p6().b[13][1]++;
          }
          cov_1k45k240p6().s[103]++;
          break;
        case 'compress-content':
          /* istanbul ignore next */
          cov_1k45k240p6().b[12][1]++;
          const compressed =
          /* istanbul ignore next */
          (cov_1k45k240p6().s[104]++, this.compressFragments(currentFragments, budget));
          /* istanbul ignore next */
          cov_1k45k240p6().s[105]++;
          currentFragments = compressed.fragments;
          /* istanbul ignore next */
          cov_1k45k240p6().s[106]++;
          fallbacksApplied.push({
            strategy,
            fragmentsAffected: compressed.affectedIds,
            tokensSaved: compressed.tokensSaved,
            description: `Compressed ${compressed.affectedIds.length} fragments`
          });
          /* istanbul ignore next */
          cov_1k45k240p6().s[107]++;
          break;
        case 'truncate-oldest':
          /* istanbul ignore next */
          cov_1k45k240p6().b[12][2]++;
          const oldest =
          /* istanbul ignore next */
          (cov_1k45k240p6().s[108]++, this.removeOldestFragments(currentFragments, 1));
          /* istanbul ignore next */
          cov_1k45k240p6().s[109]++;
          currentFragments = oldest.remaining;
          /* istanbul ignore next */
          cov_1k45k240p6().s[110]++;
          if (oldest.removed.length > 0) {
            /* istanbul ignore next */
            cov_1k45k240p6().b[14][0]++;
            cov_1k45k240p6().s[111]++;
            fallbacksApplied.push({
              strategy,
              fragmentsAffected: oldest.removed.map(f => {
                /* istanbul ignore next */
                cov_1k45k240p6().f[20]++;
                cov_1k45k240p6().s[112]++;
                return f.id;
              }),
              tokensSaved: this.tokenEstimator.estimateTotal(oldest.removed),
              description: `Removed ${oldest.removed.length} oldest fragments`
            });
          } else
          /* istanbul ignore next */
          {
            cov_1k45k240p6().b[14][1]++;
          }
          cov_1k45k240p6().s[113]++;
          break;
        case 'fail-fast':
          /* istanbul ignore next */
          cov_1k45k240p6().b[12][3]++;
          cov_1k45k240p6().s[114]++;
          warnings.push(`Token budget exceeded: ${totalTokens} > ${budget}`);
          /* istanbul ignore next */
          cov_1k45k240p6().s[115]++;
          break;
        default:
          /* istanbul ignore next */
          cov_1k45k240p6().b[12][4]++;
          cov_1k45k240p6().s[116]++;
          warnings.push(`Unknown fallback strategy: ${strategy}`);
          /* istanbul ignore next */
          cov_1k45k240p6().s[117]++;
          break;
      }
      /* istanbul ignore next */
      cov_1k45k240p6().s[118]++;
      totalTokens = this.tokenEstimator.estimateTotal(currentFragments);
    }
    /* istanbul ignore next */
    cov_1k45k240p6().s[119]++;
    return {
      fragments: currentFragments,
      totalTokens,
      fallbacksApplied,
      warnings
    };
  }
  // Helper methods for fallback strategies
  removeLowPriorityFragments(fragments, count) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[21]++;
    const sorted =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[120]++, [...fragments].sort((a, b) => {
      /* istanbul ignore next */
      cov_1k45k240p6().f[22]++;
      cov_1k45k240p6().s[121]++;
      return a.priority - b.priority;
    }));
    const removed =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[122]++, sorted.splice(0, count));
    /* istanbul ignore next */
    cov_1k45k240p6().s[123]++;
    return {
      remaining: sorted,
      removed
    };
  }
  compressFragments(fragments, budget) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[23]++;
    const targetTokensPerFragment =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[124]++, Math.floor(budget / fragments.length));
    let tokensSaved =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[125]++, 0);
    const affectedIds =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[126]++, []);
    const compressed =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[127]++, fragments.map(fragment => {
      /* istanbul ignore next */
      cov_1k45k240p6().f[24]++;
      cov_1k45k240p6().s[128]++;
      if (fragment.tokenEstimate > targetTokensPerFragment) {
        /* istanbul ignore next */
        cov_1k45k240p6().b[15][0]++;
        const originalTokens =
        /* istanbul ignore next */
        (cov_1k45k240p6().s[129]++, fragment.tokenEstimate);
        const compressedFragment =
        /* istanbul ignore next */
        (cov_1k45k240p6().s[130]++, this.fragmentFactory.compressFragment(fragment, targetTokensPerFragment));
        /* istanbul ignore next */
        cov_1k45k240p6().s[131]++;
        tokensSaved += originalTokens - compressedFragment.tokenEstimate;
        /* istanbul ignore next */
        cov_1k45k240p6().s[132]++;
        affectedIds.push(fragment.id);
        /* istanbul ignore next */
        cov_1k45k240p6().s[133]++;
        return compressedFragment;
      } else
      /* istanbul ignore next */
      {
        cov_1k45k240p6().b[15][1]++;
      }
      cov_1k45k240p6().s[134]++;
      return fragment;
    }));
    /* istanbul ignore next */
    cov_1k45k240p6().s[135]++;
    return {
      fragments: compressed,
      affectedIds,
      tokensSaved
    };
  }
  removeOldestFragments(fragments, count) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[25]++;
    const sorted =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[136]++, [...fragments].sort((a, b) => {
      /* istanbul ignore next */
      cov_1k45k240p6().f[26]++;
      cov_1k45k240p6().s[137]++;
      return a.metadata.created - b.metadata.created;
    }));
    const removed =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[138]++, sorted.splice(0, count));
    /* istanbul ignore next */
    cov_1k45k240p6().s[139]++;
    return {
      remaining: sorted,
      removed
    };
  }
  // Utility and configuration methods
  buildDefaultConfig(config) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[27]++;
    const defaultBudget =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[140]++, {
      total: 8000,
      reserved: 1000,
      available: 7000,
      used: 0,
      allocation: {
        global: 2000,
        phase: 2000,
        task: 2000,
        memory: 500,
        buffer: 500
      }
    });
    const defaultWeights =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[141]++, {
      [context_types_1.ContextPriority.CRITICAL]: 1.0,
      [context_types_1.ContextPriority.HIGH]: 0.8,
      [context_types_1.ContextPriority.MEDIUM]: 0.6,
      [context_types_1.ContextPriority.LOW]: 0.4,
      [context_types_1.ContextPriority.MINIMAL]: 0.2
    });
    /* istanbul ignore next */
    cov_1k45k240p6().s[142]++;
    return {
      tokenBudget:
      /* istanbul ignore next */
      (cov_1k45k240p6().b[16][0]++, config?.tokenBudget) ||
      /* istanbul ignore next */
      (cov_1k45k240p6().b[16][1]++, defaultBudget),
      priorityWeights:
      /* istanbul ignore next */
      (cov_1k45k240p6().b[17][0]++, config?.priorityWeights) ||
      /* istanbul ignore next */
      (cov_1k45k240p6().b[17][1]++, defaultWeights),
      fallbackStrategy:
      /* istanbul ignore next */
      (cov_1k45k240p6().b[18][0]++, config?.fallbackStrategy) ||
      /* istanbul ignore next */
      (cov_1k45k240p6().b[18][1]++, 'truncate-lowest-priority'),
      cacheConfig:
      /* istanbul ignore next */
      (cov_1k45k240p6().b[19][0]++, config?.cacheConfig) ||
      /* istanbul ignore next */
      (cov_1k45k240p6().b[19][1]++, {
        maxSize: 1000,
        ttl: 3600000,
        // 1 hour
        strategy: 'lru',
        persistToDisk: false
      })
    };
  }
  calculatePriorityAllocations(totalBudget) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[28]++;
    const weights =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[143]++, this.config.priorityWeights);
    const totalWeight =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[144]++, Object.values(weights).reduce((sum, weight) => {
      /* istanbul ignore next */
      cov_1k45k240p6().f[29]++;
      cov_1k45k240p6().s[145]++;
      return sum + weight;
    }, 0));
    /* istanbul ignore next */
    cov_1k45k240p6().s[146]++;
    return {
      [context_types_1.ContextPriority.CRITICAL]: Math.floor(totalBudget * weights[context_types_1.ContextPriority.CRITICAL] / totalWeight),
      [context_types_1.ContextPriority.HIGH]: Math.floor(totalBudget * weights[context_types_1.ContextPriority.HIGH] / totalWeight),
      [context_types_1.ContextPriority.MEDIUM]: Math.floor(totalBudget * weights[context_types_1.ContextPriority.MEDIUM] / totalWeight),
      [context_types_1.ContextPriority.LOW]: Math.floor(totalBudget * weights[context_types_1.ContextPriority.LOW] / totalWeight),
      [context_types_1.ContextPriority.MINIMAL]: Math.floor(totalBudget * weights[context_types_1.ContextPriority.MINIMAL] / totalWeight)
    };
  }
  selectWithinBudget(fragments, budget) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[30]++;
    const selected =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[147]++, []);
    let usedTokens =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[148]++, 0);
    /* istanbul ignore next */
    cov_1k45k240p6().s[149]++;
    for (const fragment of fragments) {
      /* istanbul ignore next */
      cov_1k45k240p6().s[150]++;
      if (usedTokens + fragment.tokenEstimate <= budget) {
        /* istanbul ignore next */
        cov_1k45k240p6().b[20][0]++;
        cov_1k45k240p6().s[151]++;
        selected.push(fragment);
        /* istanbul ignore next */
        cov_1k45k240p6().s[152]++;
        usedTokens += fragment.tokenEstimate;
      } else
      /* istanbul ignore next */
      {
        cov_1k45k240p6().b[20][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1k45k240p6().s[153]++;
    return selected;
  }
  calculatePriorityBreakdown(fragments) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[31]++;
    const breakdown =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[154]++, {
      [context_types_1.ContextPriority.CRITICAL]: 0,
      [context_types_1.ContextPriority.HIGH]: 0,
      [context_types_1.ContextPriority.MEDIUM]: 0,
      [context_types_1.ContextPriority.LOW]: 0,
      [context_types_1.ContextPriority.MINIMAL]: 0
    });
    /* istanbul ignore next */
    cov_1k45k240p6().s[155]++;
    fragments.forEach(fragment => {
      /* istanbul ignore next */
      cov_1k45k240p6().f[32]++;
      cov_1k45k240p6().s[156]++;
      breakdown[fragment.priority] += fragment.tokenEstimate;
    });
    /* istanbul ignore next */
    cov_1k45k240p6().s[157]++;
    return breakdown;
  }
  getCommandContext(commandName) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[33]++;
    const commandContexts =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[158]++, {
      'Read': {
        type: 'file-operation',
        description: 'Reading file content for analysis or processing'
      },
      'Write': {
        type: 'file-operation',
        description: 'Writing content to file with validation'
      },
      'Edit': {
        type: 'file-operation',
        description: 'Editing existing file with precise modifications'
      },
      'Bash': {
        type: 'system-operation',
        description: 'Executing system command with safety checks'
      },
      'TodoWrite': {
        type: 'task-management',
        description: 'Managing task list and progress tracking'
      },
      'UltraThink': {
        type: 'analysis',
        description: 'Deep analysis and planning with multiple perspectives'
      },
      'WebFetch': {
        type: 'research',
        description: 'Fetching and analyzing web content'
      },
      'WebSearch': {
        type: 'research',
        description: 'Searching for relevant information online'
      }
    });
    /* istanbul ignore next */
    cov_1k45k240p6().s[159]++;
    return /* istanbul ignore next */(cov_1k45k240p6().b[21][0]++, commandContexts[commandName]) ||
    /* istanbul ignore next */
    (cov_1k45k240p6().b[21][1]++, {
      type: 'unknown',
      description: 'Unknown command context'
    });
  }
  buildGlobalConfigContent(globalContext) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[34]++;
    const mcpTools =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[160]++, globalContext.configuration.mcpTools.filter(tool => {
      /* istanbul ignore next */
      cov_1k45k240p6().f[35]++;
      cov_1k45k240p6().s[161]++;
      return tool.enabled;
    }).map(tool => {
      /* istanbul ignore next */
      cov_1k45k240p6().f[36]++;
      cov_1k45k240p6().s[162]++;
      return `${tool.name} (Priority: ${tool.priority})`;
    }).join(', '));
    const qualityStandards =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[163]++, globalContext.configuration.qualityStandards.map(standard => {
      /* istanbul ignore next */
      cov_1k45k240p6().f[37]++;
      cov_1k45k240p6().s[164]++;
      return `${standard.name}: ${standard.threshold}%`;
    }).join(', '));
    /* istanbul ignore next */
    cov_1k45k240p6().s[165]++;
    return `MCP Tools: ${mcpTools}\nQuality Standards: ${qualityStandards}`;
  }
  buildPhaseHistoryContent(phaseContext) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[38]++;
    const {
      completedTasks,
      blockers
    } =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[166]++, phaseContext.phaseState);
    const recentTasks =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[167]++, completedTasks.slice(-5).join(', '));
    const activeBlockers =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[168]++, blockers.filter(b => {
      /* istanbul ignore next */
      cov_1k45k240p6().f[39]++;
      cov_1k45k240p6().s[169]++;
      return !b.resolution;
    }).length);
    /* istanbul ignore next */
    cov_1k45k240p6().s[170]++;
    return `Recent Tasks: ${recentTasks}\nActive Blockers: ${activeBlockers}\nProgress: ${phaseContext.data.progress.completionPercentage}%`;
  }
  buildTaskStateContent(commandContext) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[40]++;
    const params =
    /* istanbul ignore next */
    (cov_1k45k240p6().s[171]++, commandContext.relevantParameters.map(p => {
      /* istanbul ignore next */
      cov_1k45k240p6().f[41]++;
      cov_1k45k240p6().s[172]++;
      return `${p.name}: ${p.value}`;
    }).join(', '));
    /* istanbul ignore next */
    cov_1k45k240p6().s[173]++;
    return `Command: ${commandContext.commandName}\nType: ${commandContext.taskType}\nParameters: ${params}`;
  }
  logAssemblyMetrics(result, assemblyTime) {
    /* istanbul ignore next */
    cov_1k45k240p6().f[42]++;
    cov_1k45k240p6().s[174]++;
    console.log(`Context Assembly Metrics:
Fragments: ${result.fragments.length}
Tokens Used: ${result.totalTokens}
Budget Utilization: ${(result.budgetUsed / (result.budgetUsed + result.budgetRemaining) * 100).toFixed(1)}%
Assembly Time: ${assemblyTime}ms
Fallbacks Applied: ${result.fallbacksApplied.length}
Warnings: ${result.warnings.length}`);
  }
}
/* istanbul ignore next */
cov_1k45k240p6().s[175]++;
exports.ContextAssembler = ContextAssembler;
/**
 * Singleton instance
 */
/* istanbul ignore next */
cov_1k45k240p6().s[176]++;
exports.contextAssembler = new ContextAssembler();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,