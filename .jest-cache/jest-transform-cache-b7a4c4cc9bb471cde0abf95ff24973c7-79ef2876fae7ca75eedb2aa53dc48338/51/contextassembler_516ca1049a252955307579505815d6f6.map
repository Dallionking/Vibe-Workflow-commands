{"version":3,"names":["cov_1k45k240p6","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","context_types_1","require","context_fragment_1","global_1","phase_1","task_1","ContextAssembler","constructor","config","fragmentFactory","ContextFragmentFactory","tokenEstimator","TokenEstimator","buildDefaultConfig","assembleContext","commandName","additionalFragments","startTime","Date","now","allFragments","collectAllFragments","push","validFragments","removeExpiredFragments","selectedFragments","selectFragments","budgetResult","applyTokenBudget","result","fragments","totalTokens","budgetUsed","budgetRemaining","tokenBudget","total","priorityBreakdown","calculatePriorityBreakdown","fallbacksApplied","warnings","logAssemblyMetrics","assembleForCommand","commandContext","getCommandContext","commandFragment","createCommandFragment","description","ContextPriority","HIGH","updateConfig","updates","getConfig","globalContext","globalContextManager","getContext","extractGlobalFragments","phaseContext","phaseContextManager","getCurrentPhase","extractPhaseFragments","taskContext","taskContextManager","getCurrentTask","extractTaskFragments","rulesContent","rules","filter","rule","enabled","map","join","createGlobalFragment","CRITICAL","configContent","buildGlobalConfigContent","phaseContent","getPhaseSummary","createPhaseFragment","phaseNumber","phaseName","data","progress","completionPercentage","historyContent","buildPhaseHistoryContent","MEDIUM","taskContent","getTaskSummary","createTaskFragment","taskId","taskType","getContextForCommand","stateContent","buildTaskStateContent","fragment","isExpired","sorted","sort","a","priority","metadata","lastModified","weighted","applyPriorityWeights","weights","priorityWeights","selected","totalBudget","available","allocations","calculatePriorityAllocations","LOW","MINIMAL","priorityFragments","allocation","selectedInPriority","selectWithinBudget","budget","currentFragments","estimateTotal","fallbackResult","applyFallbackStrategies","length","strategy","fallbackStrategy","removed","removeLowPriorityFragments","remaining","fragmentsAffected","id","tokensSaved","compressed","compressFragments","affectedIds","oldest","removeOldestFragments","count","splice","targetTokensPerFragment","Math","floor","tokenEstimate","originalTokens","compressedFragment","compressFragment","created","defaultBudget","reserved","used","phase","task","memory","buffer","defaultWeights","cacheConfig","maxSize","ttl","persistToDisk","totalWeight","Object","values","reduce","sum","weight","usedTokens","breakdown","forEach","commandContexts","mcpTools","configuration","tool","qualityStandards","standard","threshold","completedTasks","blockers","phaseState","recentTasks","slice","activeBlockers","resolution","params","relevantParameters","p","value","assemblyTime","console","log","toFixed","exports","contextAssembler"],"sources":["/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/assembly/context-assembler.ts"],"sourcesContent":["/**\n * Context Assembler - Intelligent Context Selection and Assembly\n * Implements priority-based selection with token budget management\n */\n\nimport {\n  ContextFragment,\n  ContextPriority,\n  TokenBudget,\n  TokenAllocation,\n  ContextAssemblyConfig,\n  PriorityWeights,\n  FallbackStrategy,\n  ContextLayers\n} from '../types/context.types';\n\nimport { \n  ContextFragmentFactory, \n  FragmentCollection, \n  TokenEstimator \n} from './context-fragment';\n\nimport { globalContextManager } from '../layers/global';\nimport { phaseContextManager } from '../layers/phase';\nimport { taskContextManager } from '../layers/task';\n\n/**\n * Context Assembly Result\n */\nexport interface ContextAssemblyResult {\n  fragments: ContextFragment[];\n  totalTokens: number;\n  budgetUsed: number;\n  budgetRemaining: number;\n  priorityBreakdown: Record<ContextPriority, number>;\n  fallbacksApplied: FallbackApplication[];\n  warnings: string[];\n}\n\nexport interface FallbackApplication {\n  strategy: FallbackStrategy;\n  fragmentsAffected: string[];\n  tokensSaved: number;\n  description: string;\n}\n\n/**\n * Context Assembler\n * Main class for assembling context with intelligent selection and budget management\n */\nexport class ContextAssembler {\n  private config: ContextAssemblyConfig;\n  private fragmentFactory: ContextFragmentFactory;\n  private tokenEstimator: TokenEstimator;\n\n  constructor(config?: Partial<ContextAssemblyConfig>) {\n    this.fragmentFactory = new ContextFragmentFactory();\n    this.tokenEstimator = new TokenEstimator();\n    this.config = this.buildDefaultConfig(config);\n  }\n\n  /**\n   * Assemble context with intelligent selection and budget management\n   */\n  public async assembleContext(\n    commandName?: string,\n    additionalFragments: ContextFragment[] = []\n  ): Promise<ContextAssemblyResult> {\n    const startTime = Date.now();\n    \n    // Collect fragments from all layers\n    const allFragments = await this.collectAllFragments(commandName);\n    allFragments.push(...additionalFragments);\n\n    // Remove expired fragments\n    const validFragments = this.removeExpiredFragments(allFragments);\n\n    // Apply intelligent selection\n    const selectedFragments = this.selectFragments(validFragments);\n\n    // Apply token budget management\n    const budgetResult = this.applyTokenBudget(selectedFragments);\n\n    // Build assembly result\n    const result: ContextAssemblyResult = {\n      fragments: budgetResult.fragments,\n      totalTokens: budgetResult.totalTokens,\n      budgetUsed: budgetResult.budgetUsed,\n      budgetRemaining: this.config.tokenBudget.total - budgetResult.budgetUsed,\n      priorityBreakdown: this.calculatePriorityBreakdown(budgetResult.fragments),\n      fallbacksApplied: budgetResult.fallbacksApplied,\n      warnings: budgetResult.warnings\n    };\n\n    // Log assembly metrics\n    this.logAssemblyMetrics(result, Date.now() - startTime);\n\n    return result;\n  }\n\n  /**\n   * Assemble context for specific command\n   */\n  public async assembleForCommand(commandName: string): Promise<ContextAssemblyResult> {\n    // Get command-specific context requirements\n    const commandContext = this.getCommandContext(commandName);\n    \n    // Create command fragment\n    const commandFragment = this.fragmentFactory.createCommandFragment(\n      commandName,\n      commandContext.type,\n      commandContext.description,\n      ContextPriority.HIGH\n    );\n\n    return this.assembleContext(commandName, [commandFragment]);\n  }\n\n  /**\n   * Update assembly configuration\n   */\n  public updateConfig(updates: Partial<ContextAssemblyConfig>): void {\n    this.config = { ...this.config, ...updates };\n  }\n\n  /**\n   * Get current configuration\n   */\n  public getConfig(): ContextAssemblyConfig {\n    return { ...this.config };\n  }\n\n  // Private implementation methods\n\n  /**\n   * Collect fragments from all context layers\n   */\n  private async collectAllFragments(commandName?: string): Promise<ContextFragment[]> {\n    const fragments: ContextFragment[] = [];\n\n    // L1: Global Context Fragments\n    const globalContext = globalContextManager.getContext();\n    if (globalContext) {\n      fragments.push(...this.extractGlobalFragments(globalContext));\n    }\n\n    // L2: Phase Context Fragments\n    const phaseContext = phaseContextManager.getCurrentPhase();\n    if (phaseContext) {\n      fragments.push(...this.extractPhaseFragments(phaseContext));\n    }\n\n    // L3: Task Context Fragments\n    const taskContext = taskContextManager.getCurrentTask();\n    if (taskContext) {\n      fragments.push(...this.extractTaskFragments(taskContext, commandName));\n    }\n\n    return fragments;\n  }\n\n  /**\n   * Extract fragments from global context\n   */\n  private extractGlobalFragments(globalContext: any): ContextFragment[] {\n    const fragments: ContextFragment[] = [];\n\n    // Global rules fragment\n    const rulesContent = globalContext.rules\n      .filter((rule: any) => rule.enabled)\n      .map((rule: any) => `${rule.name}: ${rule.rule}`)\n      .join('\\n');\n\n    if (rulesContent) {\n      fragments.push(\n        this.fragmentFactory.createGlobalFragment('rules', rulesContent, ContextPriority.CRITICAL)\n      );\n    }\n\n    // Global configuration fragment\n    const configContent = this.buildGlobalConfigContent(globalContext);\n    if (configContent) {\n      fragments.push(\n        this.fragmentFactory.createGlobalFragment('config', configContent, ContextPriority.HIGH)\n      );\n    }\n\n    return fragments;\n  }\n\n  /**\n   * Extract fragments from phase context\n   */\n  private extractPhaseFragments(phaseContext: any): ContextFragment[] {\n    const fragments: ContextFragment[] = [];\n\n    // Phase context fragment\n    const phaseContent = phaseContextManager.getPhaseSummary();\n    fragments.push(\n      this.fragmentFactory.createPhaseFragment(\n        phaseContext.phaseNumber,\n        phaseContext.phaseName,\n        'context',\n        phaseContent,\n        ContextPriority.HIGH\n      )\n    );\n\n    // Phase history fragment (if significant progress)\n    if (phaseContext.data.progress.completionPercentage > 10) {\n      const historyContent = this.buildPhaseHistoryContent(phaseContext);\n      fragments.push(\n        this.fragmentFactory.createPhaseFragment(\n          phaseContext.phaseNumber,\n          phaseContext.phaseName,\n          'history',\n          historyContent,\n          ContextPriority.MEDIUM\n        )\n      );\n    }\n\n    return fragments;\n  }\n\n  /**\n   * Extract fragments from task context\n   */\n  private extractTaskFragments(taskContext: any, commandName?: string): ContextFragment[] {\n    const fragments: ContextFragment[] = [];\n\n    // Current task fragment\n    const taskContent = taskContextManager.getTaskSummary();\n    fragments.push(\n      this.fragmentFactory.createTaskFragment(\n        taskContext.taskId,\n        taskContext.taskType,\n        'context',\n        taskContent,\n        ContextPriority.HIGH\n      )\n    );\n\n    // Command-specific task state\n    if (commandName) {\n      const commandContext = taskContextManager.getContextForCommand(commandName);\n      const stateContent = this.buildTaskStateContent(commandContext);\n      fragments.push(\n        this.fragmentFactory.createTaskFragment(\n          taskContext.taskId,\n          taskContext.taskType,\n          'state',\n          stateContent,\n          ContextPriority.MEDIUM\n        )\n      );\n    }\n\n    return fragments;\n  }\n\n  /**\n   * Remove expired fragments\n   */\n  private removeExpiredFragments(fragments: ContextFragment[]): ContextFragment[] {\n    return fragments.filter(fragment => !this.fragmentFactory.isExpired(fragment));\n  }\n\n  /**\n   * Select fragments using intelligent algorithm\n   */\n  private selectFragments(fragments: ContextFragment[]): ContextFragment[] {\n    // Sort by priority and relevance\n    const sorted = fragments.sort((a, b) => {\n      // Primary sort: priority\n      if (a.priority !== b.priority) {\n        return b.priority - a.priority;\n      }\n      \n      // Secondary sort: freshness (newer first)\n      return b.metadata.lastModified - a.metadata.lastModified;\n    });\n\n    // Apply priority weights\n    const weighted = this.applyPriorityWeights(sorted);\n\n    return weighted;\n  }\n\n  /**\n   * Apply priority weights to fragment selection\n   */\n  private applyPriorityWeights(fragments: ContextFragment[]): ContextFragment[] {\n    const weights = this.config.priorityWeights;\n    const selected: ContextFragment[] = [];\n\n    // Calculate token allocation per priority\n    const totalBudget = this.config.tokenBudget.available;\n    const allocations = this.calculatePriorityAllocations(totalBudget);\n\n    // Select fragments within each priority allocation\n    for (const priority of [\n      ContextPriority.CRITICAL,\n      ContextPriority.HIGH,\n      ContextPriority.MEDIUM,\n      ContextPriority.LOW,\n      ContextPriority.MINIMAL\n    ]) {\n      const priorityFragments = fragments.filter(f => f.priority === priority);\n      const allocation = allocations[priority] || 0;\n      \n      const selectedInPriority = this.selectWithinBudget(priorityFragments, allocation);\n      selected.push(...selectedInPriority);\n    }\n\n    return selected;\n  }\n\n  /**\n   * Apply token budget management\n   */\n  private applyTokenBudget(fragments: ContextFragment[]): BudgetResult {\n    const budget = this.config.tokenBudget;\n    const fallbacksApplied: FallbackApplication[] = [];\n    const warnings: string[] = [];\n    let currentFragments = [...fragments];\n\n    // Calculate initial token usage\n    let totalTokens = this.tokenEstimator.estimateTotal(currentFragments);\n\n    // Apply fallback strategies if over budget\n    if (totalTokens > budget.available) {\n      const fallbackResult = this.applyFallbackStrategies(currentFragments, budget.available);\n      currentFragments = fallbackResult.fragments;\n      totalTokens = fallbackResult.totalTokens;\n      fallbacksApplied.push(...fallbackResult.fallbacksApplied);\n      warnings.push(...fallbackResult.warnings);\n    }\n\n    return {\n      fragments: currentFragments,\n      totalTokens,\n      budgetUsed: totalTokens,\n      fallbacksApplied,\n      warnings\n    };\n  }\n\n  /**\n   * Apply fallback strategies when over budget\n   */\n  private applyFallbackStrategies(\n    fragments: ContextFragment[],\n    budget: number\n  ): FallbackResult {\n    let currentFragments = [...fragments];\n    let totalTokens = this.tokenEstimator.estimateTotal(currentFragments);\n    const fallbacksApplied: FallbackApplication[] = [];\n    const warnings: string[] = [];\n\n    while (totalTokens > budget && currentFragments.length > 0) {\n      const strategy = this.config.fallbackStrategy;\n      \n      switch (strategy) {\n        case 'truncate-lowest-priority':\n          const removed = this.removeLowPriorityFragments(currentFragments, 1);\n          currentFragments = removed.remaining;\n          if (removed.removed.length > 0) {\n            fallbacksApplied.push({\n              strategy,\n              fragmentsAffected: removed.removed.map(f => f.id),\n              tokensSaved: this.tokenEstimator.estimateTotal(removed.removed),\n              description: `Removed ${removed.removed.length} low priority fragments`\n            });\n          }\n          break;\n\n        case 'compress-content':\n          const compressed = this.compressFragments(currentFragments, budget);\n          currentFragments = compressed.fragments;\n          fallbacksApplied.push({\n            strategy,\n            fragmentsAffected: compressed.affectedIds,\n            tokensSaved: compressed.tokensSaved,\n            description: `Compressed ${compressed.affectedIds.length} fragments`\n          });\n          break;\n\n        case 'truncate-oldest':\n          const oldest = this.removeOldestFragments(currentFragments, 1);\n          currentFragments = oldest.remaining;\n          if (oldest.removed.length > 0) {\n            fallbacksApplied.push({\n              strategy,\n              fragmentsAffected: oldest.removed.map(f => f.id),\n              tokensSaved: this.tokenEstimator.estimateTotal(oldest.removed),\n              description: `Removed ${oldest.removed.length} oldest fragments`\n            });\n          }\n          break;\n\n        case 'fail-fast':\n          warnings.push(`Token budget exceeded: ${totalTokens} > ${budget}`);\n          break;\n\n        default:\n          warnings.push(`Unknown fallback strategy: ${strategy}`);\n          break;\n      }\n\n      totalTokens = this.tokenEstimator.estimateTotal(currentFragments);\n    }\n\n    return {\n      fragments: currentFragments,\n      totalTokens,\n      fallbacksApplied,\n      warnings\n    };\n  }\n\n  // Helper methods for fallback strategies\n\n  private removeLowPriorityFragments(\n    fragments: ContextFragment[],\n    count: number\n  ): { remaining: ContextFragment[]; removed: ContextFragment[] } {\n    const sorted = [...fragments].sort((a, b) => a.priority - b.priority);\n    const removed = sorted.splice(0, count);\n    return { remaining: sorted, removed };\n  }\n\n  private compressFragments(\n    fragments: ContextFragment[],\n    budget: number\n  ): { fragments: ContextFragment[]; affectedIds: string[]; tokensSaved: number } {\n    const targetTokensPerFragment = Math.floor(budget / fragments.length);\n    let tokensSaved = 0;\n    const affectedIds: string[] = [];\n\n    const compressed = fragments.map(fragment => {\n      if (fragment.tokenEstimate > targetTokensPerFragment) {\n        const originalTokens = fragment.tokenEstimate;\n        const compressedFragment = this.fragmentFactory.compressFragment(\n          fragment,\n          targetTokensPerFragment\n        );\n        tokensSaved += originalTokens - compressedFragment.tokenEstimate;\n        affectedIds.push(fragment.id);\n        return compressedFragment;\n      }\n      return fragment;\n    });\n\n    return { fragments: compressed, affectedIds, tokensSaved };\n  }\n\n  private removeOldestFragments(\n    fragments: ContextFragment[],\n    count: number\n  ): { remaining: ContextFragment[]; removed: ContextFragment[] } {\n    const sorted = [...fragments].sort((a, b) => a.metadata.created - b.metadata.created);\n    const removed = sorted.splice(0, count);\n    return { remaining: sorted, removed };\n  }\n\n  // Utility and configuration methods\n\n  private buildDefaultConfig(config?: Partial<ContextAssemblyConfig>): ContextAssemblyConfig {\n    const defaultBudget: TokenBudget = {\n      total: 8000,\n      reserved: 1000,\n      available: 7000,\n      used: 0,\n      allocation: {\n        global: 2000,\n        phase: 2000,\n        task: 2000,\n        memory: 500,\n        buffer: 500\n      }\n    };\n\n    const defaultWeights: PriorityWeights = {\n      [ContextPriority.CRITICAL]: 1.0,\n      [ContextPriority.HIGH]: 0.8,\n      [ContextPriority.MEDIUM]: 0.6,\n      [ContextPriority.LOW]: 0.4,\n      [ContextPriority.MINIMAL]: 0.2\n    };\n\n    return {\n      tokenBudget: config?.tokenBudget || defaultBudget,\n      priorityWeights: config?.priorityWeights || defaultWeights,\n      fallbackStrategy: config?.fallbackStrategy || 'truncate-lowest-priority',\n      cacheConfig: config?.cacheConfig || {\n        maxSize: 1000,\n        ttl: 3600000, // 1 hour\n        strategy: 'lru',\n        persistToDisk: false\n      }\n    };\n  }\n\n  private calculatePriorityAllocations(totalBudget: number): Record<ContextPriority, number> {\n    const weights = this.config.priorityWeights;\n    const totalWeight = Object.values(weights).reduce((sum, weight) => sum + weight, 0);\n\n    return {\n      [ContextPriority.CRITICAL]: Math.floor((totalBudget * weights[ContextPriority.CRITICAL]) / totalWeight),\n      [ContextPriority.HIGH]: Math.floor((totalBudget * weights[ContextPriority.HIGH]) / totalWeight),\n      [ContextPriority.MEDIUM]: Math.floor((totalBudget * weights[ContextPriority.MEDIUM]) / totalWeight),\n      [ContextPriority.LOW]: Math.floor((totalBudget * weights[ContextPriority.LOW]) / totalWeight),\n      [ContextPriority.MINIMAL]: Math.floor((totalBudget * weights[ContextPriority.MINIMAL]) / totalWeight)\n    };\n  }\n\n  private selectWithinBudget(fragments: ContextFragment[], budget: number): ContextFragment[] {\n    const selected: ContextFragment[] = [];\n    let usedTokens = 0;\n\n    for (const fragment of fragments) {\n      if (usedTokens + fragment.tokenEstimate <= budget) {\n        selected.push(fragment);\n        usedTokens += fragment.tokenEstimate;\n      }\n    }\n\n    return selected;\n  }\n\n  private calculatePriorityBreakdown(fragments: ContextFragment[]): Record<ContextPriority, number> {\n    const breakdown: Record<ContextPriority, number> = {\n      [ContextPriority.CRITICAL]: 0,\n      [ContextPriority.HIGH]: 0,\n      [ContextPriority.MEDIUM]: 0,\n      [ContextPriority.LOW]: 0,\n      [ContextPriority.MINIMAL]: 0\n    };\n\n    fragments.forEach(fragment => {\n      breakdown[fragment.priority] += fragment.tokenEstimate;\n    });\n\n    return breakdown;\n  }\n\n  private getCommandContext(commandName: string): { type: string; description: string } {\n    const commandContexts: Record<string, { type: string; description: string }> = {\n      'Read': { type: 'file-operation', description: 'Reading file content for analysis or processing' },\n      'Write': { type: 'file-operation', description: 'Writing content to file with validation' },\n      'Edit': { type: 'file-operation', description: 'Editing existing file with precise modifications' },\n      'Bash': { type: 'system-operation', description: 'Executing system command with safety checks' },\n      'TodoWrite': { type: 'task-management', description: 'Managing task list and progress tracking' },\n      'UltraThink': { type: 'analysis', description: 'Deep analysis and planning with multiple perspectives' },\n      'WebFetch': { type: 'research', description: 'Fetching and analyzing web content' },\n      'WebSearch': { type: 'research', description: 'Searching for relevant information online' }\n    };\n\n    return commandContexts[commandName] || { type: 'unknown', description: 'Unknown command context' };\n  }\n\n  private buildGlobalConfigContent(globalContext: any): string {\n    const mcpTools = globalContext.configuration.mcpTools\n      .filter((tool: any) => tool.enabled)\n      .map((tool: any) => `${tool.name} (Priority: ${tool.priority})`)\n      .join(', ');\n\n    const qualityStandards = globalContext.configuration.qualityStandards\n      .map((standard: any) => `${standard.name}: ${standard.threshold}%`)\n      .join(', ');\n\n    return `MCP Tools: ${mcpTools}\\nQuality Standards: ${qualityStandards}`;\n  }\n\n  private buildPhaseHistoryContent(phaseContext: any): string {\n    const { completedTasks, blockers } = phaseContext.phaseState;\n    const recentTasks = completedTasks.slice(-5).join(', ');\n    const activeBlockers = blockers.filter((b: any) => !b.resolution).length;\n\n    return `Recent Tasks: ${recentTasks}\\nActive Blockers: ${activeBlockers}\\nProgress: ${phaseContext.data.progress.completionPercentage}%`;\n  }\n\n  private buildTaskStateContent(commandContext: any): string {\n    const params = commandContext.relevantParameters\n      .map((p: any) => `${p.name}: ${p.value}`)\n      .join(', ');\n\n    return `Command: ${commandContext.commandName}\\nType: ${commandContext.taskType}\\nParameters: ${params}`;\n  }\n\n  private logAssemblyMetrics(result: ContextAssemblyResult, assemblyTime: number): void {\n    console.log(`Context Assembly Metrics:\nFragments: ${result.fragments.length}\nTokens Used: ${result.totalTokens}\nBudget Utilization: ${((result.budgetUsed / (result.budgetUsed + result.budgetRemaining)) * 100).toFixed(1)}%\nAssembly Time: ${assemblyTime}ms\nFallbacks Applied: ${result.fallbacksApplied.length}\nWarnings: ${result.warnings.length}`);\n  }\n}\n\n// Supporting interfaces\ninterface BudgetResult {\n  fragments: ContextFragment[];\n  totalTokens: number;\n  budgetUsed: number;\n  fallbacksApplied: FallbackApplication[];\n  warnings: string[];\n}\n\ninterface FallbackResult {\n  fragments: ContextFragment[];\n  totalTokens: number;\n  fallbacksApplied: FallbackApplication[];\n  warnings: string[];\n}\n\n/**\n * Singleton instance\n */\nexport const contextAssembler = new ContextAssembler();"],"mappings":"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","ignoreList":[]}