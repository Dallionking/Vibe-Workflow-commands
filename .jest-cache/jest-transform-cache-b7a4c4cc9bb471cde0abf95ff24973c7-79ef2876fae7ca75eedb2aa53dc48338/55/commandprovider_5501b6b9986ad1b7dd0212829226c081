5eef05510505f6eadb79b5b29fd6c9c2
"use strict";

/**
 * Command Provider Integration
 * Integrates context system with existing Vibe commands using composable provider architecture
 */
/* istanbul ignore next */
function cov_t2mrfjj9q() {
  var path = "/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/integration/command-provider.ts";
  var hash = "71213f624f77c084a96bb0eff4296067c9e3d9b0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/integration/command-provider.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 62
        }
      },
      "1": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 73
        }
      },
      "2": {
        start: {
          line: 8,
          column: 28
        },
        end: {
          line: 8,
          column: 68
        }
      },
      "3": {
        start: {
          line: 9,
          column: 25
        },
        end: {
          line: 9,
          column: 60
        }
      },
      "4": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 44
        }
      },
      "5": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 42
        }
      },
      "6": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 40
        }
      },
      "7": {
        start: {
          line: 13,
          column: 24
        },
        end: {
          line: 13,
          column: 57
        }
      },
      "8": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 40
        }
      },
      "9": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 28,
          column: 10
        }
      },
      "10": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 43,
          column: 11
        }
      },
      "11": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 66
        }
      },
      "12": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 65
        }
      },
      "13": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 62
        }
      },
      "14": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 59
        }
      },
      "15": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 46
        }
      },
      "16": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 46
        }
      },
      "17": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "18": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 75
        }
      },
      "19": {
        start: {
          line: 65,
          column: 26
        },
        end: {
          line: 65,
          column: 36
        }
      },
      "20": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "21": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 70
        }
      },
      "22": {
        start: {
          line: 70,
          column: 35
        },
        end: {
          line: 70,
          column: 87
        }
      },
      "23": {
        start: {
          line: 72,
          column: 36
        },
        end: {
          line: 74,
          column: 20
        }
      },
      "24": {
        start: {
          line: 76,
          column: 31
        },
        end: {
          line: 78,
          column: 60
        }
      },
      "25": {
        start: {
          line: 79,
          column: 27
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "26": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 73
        }
      },
      "27": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 26
        }
      },
      "28": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 63
        }
      },
      "29": {
        start: {
          line: 102,
          column: 26
        },
        end: {
          line: 102,
          column: 81
        }
      },
      "30": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "31": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 136
        }
      },
      "32": {
        start: {
          line: 112,
          column: 30
        },
        end: {
          line: 112,
          column: 65
        }
      },
      "33": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "34": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 122,
          column: 15
        }
      },
      "35": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 70
        }
      },
      "36": {
        start: {
          line: 131,
          column: 23
        },
        end: {
          line: 131,
          column: 54
        }
      },
      "37": {
        start: {
          line: 132,
          column: 22
        },
        end: {
          line: 132,
          column: 57
        }
      },
      "38": {
        start: {
          line: 133,
          column: 21
        },
        end: {
          line: 133,
          column: 54
        }
      },
      "39": {
        start: {
          line: 134,
          column: 23
        },
        end: {
          line: 134,
          column: 55
        }
      },
      "40": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 162,
          column: 10
        }
      },
      "41": {
        start: {
          line: 138,
          column: 53
        },
        end: {
          line: 138,
          column: 62
        }
      },
      "42": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 175,
          column: 10
        }
      },
      "43": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 182,
          column: 58
        }
      },
      "44": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 58
        }
      },
      "45": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 184,
          column: 61
        }
      },
      "46": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 61
        }
      },
      "47": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 186,
          column: 58
        }
      },
      "48": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 58
        }
      },
      "49": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 188,
          column: 50
        }
      },
      "50": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 50
        }
      },
      "51": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 57
        }
      },
      "52": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "53": {
        start: {
          line: 195,
          column: 35
        },
        end: {
          line: 195,
          column: 52
        }
      },
      "54": {
        start: {
          line: 198,
          column: 34
        },
        end: {
          line: 198,
          column: 66
        }
      },
      "55": {
        start: {
          line: 199,
          column: 31
        },
        end: {
          line: 199,
          column: 70
        }
      },
      "56": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 204,
          column: 13
        }
      },
      "57": {
        start: {
          line: 201,
          column: 36
        },
        end: {
          line: 201,
          column: 59
        }
      },
      "58": {
        start: {
          line: 202,
          column: 34
        },
        end: {
          line: 202,
          column: 66
        }
      },
      "59": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 70
        }
      },
      "60": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 209,
          column: 13
        }
      },
      "61": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 78
        }
      },
      "62": {
        start: {
          line: 213,
          column: 23
        },
        end: {
          line: 213,
          column: 57
        }
      },
      "63": {
        start: {
          line: 214,
          column: 25
        },
        end: {
          line: 214,
          column: 64
        }
      },
      "64": {
        start: {
          line: 215,
          column: 29
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "65": {
        start: {
          line: 220,
          column: 31
        },
        end: {
          line: 226,
          column: 11
        }
      },
      "66": {
        start: {
          line: 220,
          column: 82
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "67": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 143
        }
      },
      "68": {
        start: {
          line: 230,
          column: 31
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "69": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 63
        }
      },
      "70": {
        start: {
          line: 244,
          column: 25
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "71": {
        start: {
          line: 248,
          column: 33
        },
        end: {
          line: 248,
          column: 42
        }
      },
      "72": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 254,
          column: 11
        }
      },
      "73": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "74": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 60
        }
      },
      "75": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 67
        }
      },
      "76": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "77": {
        start: {
          line: 257,
          column: 30
        },
        end: {
          line: 257,
          column: 60
        }
      },
      "78": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 263,
          column: 13
        }
      },
      "79": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 259,
          column: 82
        }
      },
      "80": {
        start: {
          line: 260,
          column: 16
        },
        end: {
          line: 262,
          column: 19
        }
      },
      "81": {
        start: {
          line: 261,
          column: 20
        },
        end: {
          line: 261,
          column: 81
        }
      },
      "82": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 51
        }
      },
      "83": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 71
        }
      },
      "84": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 131
        }
      },
      "85": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 73
        }
      },
      "86": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "87": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 92
        }
      },
      "88": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 35
        }
      },
      "89": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "90": {
        start: {
          line: 277,
          column: 59
        },
        end: {
          line: 277,
          column: 77
        }
      },
      "91": {
        start: {
          line: 278,
          column: 55
        },
        end: {
          line: 278,
          column: 69
        }
      },
      "92": {
        start: {
          line: 279,
          column: 57
        },
        end: {
          line: 279,
          column: 73
        }
      },
      "93": {
        start: {
          line: 280,
          column: 54
        },
        end: {
          line: 280,
          column: 67
        }
      },
      "94": {
        start: {
          line: 281,
          column: 58
        },
        end: {
          line: 281,
          column: 75
        }
      },
      "95": {
        start: {
          line: 282,
          column: 21
        },
        end: {
          line: 282,
          column: 38
        }
      },
      "96": {
        start: {
          line: 286,
          column: 23
        },
        end: {
          line: 286,
          column: 25
        }
      },
      "97": {
        start: {
          line: 287,
          column: 25
        },
        end: {
          line: 287,
          column: 27
        }
      },
      "98": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "99": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 61
        }
      },
      "100": {
        start: {
          line: 293,
          column: 26
        },
        end: {
          line: 293,
          column: 89
        }
      },
      "101": {
        start: {
          line: 293,
          column: 61
        },
        end: {
          line: 293,
          column: 88
        }
      },
      "102": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "103": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 50
        }
      },
      "104": {
        start: {
          line: 298,
          column: 36
        },
        end: {
          line: 298,
          column: 76
        }
      },
      "105": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 304,
          column: 11
        }
      },
      "106": {
        start: {
          line: 300,
          column: 32
        },
        end: {
          line: 300,
          column: 130
        }
      },
      "107": {
        start: {
          line: 300,
          column: 67
        },
        end: {
          line: 300,
          column: 129
        }
      },
      "108": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 303,
          column: 13
        }
      },
      "109": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 76
        }
      },
      "110": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 309,
          column: 10
        }
      },
      "111": {
        start: {
          line: 312,
          column: 29
        },
        end: {
          line: 323,
          column: 9
        }
      },
      "112": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 324,
          column: 47
        }
      },
      "113": {
        start: {
          line: 327,
          column: 32
        },
        end: {
          line: 327,
          column: 70
        }
      },
      "114": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 337,
          column: 10
        }
      },
      "115": {
        start: {
          line: 340,
          column: 26
        },
        end: {
          line: 348,
          column: 9
        }
      },
      "116": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 349,
          column: 36
        }
      },
      "117": {
        start: {
          line: 352,
          column: 26
        },
        end: {
          line: 360,
          column: 9
        }
      },
      "118": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 361,
          column: 64
        }
      },
      "119": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 367,
          column: 9
        }
      },
      "120": {
        start: {
          line: 364,
          column: 27
        },
        end: {
          line: 365,
          column: 69
        }
      },
      "121": {
        start: {
          line: 365,
          column: 40
        },
        end: {
          line: 365,
          column: 65
        }
      },
      "122": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 50
        }
      },
      "123": {
        start: {
          line: 370,
          column: 27
        },
        end: {
          line: 370,
          column: 67
        }
      },
      "124": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 372,
          column: 21
        }
      },
      "125": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 372,
          column: 21
        }
      },
      "126": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 18
        }
      },
      "127": {
        start: {
          line: 377,
          column: 0
        },
        end: {
          line: 377,
          column: 56
        }
      },
      "128": {
        start: {
          line: 381,
          column: 0
        },
        end: {
          line: 381,
          column: 62
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 29
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 19
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 23
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 52
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 58
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 64
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        loc: {
          start: {
            line: 101,
            column: 53
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 101
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 87
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 110
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 24
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 130
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 138,
            column: 48
          },
          end: {
            line: 138,
            column: 49
          }
        },
        loc: {
          start: {
            line: 138,
            column: 53
          },
          end: {
            line: 138,
            column: 62
          }
        },
        line: 138
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 167,
            column: 5
          }
        },
        loc: {
          start: {
            line: 167,
            column: 25
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 167
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 29
          },
          end: {
            line: 190,
            column: 5
          }
        },
        line: 180
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 192,
            column: 4
          },
          end: {
            line: 192,
            column: 5
          }
        },
        loc: {
          start: {
            line: 192,
            column: 37
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 192
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 57
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 212
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 220,
            column: 62
          },
          end: {
            line: 220,
            column: 63
          }
        },
        loc: {
          start: {
            line: 220,
            column: 82
          },
          end: {
            line: 226,
            column: 9
          }
        },
        line: 220
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 229,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        loc: {
          start: {
            line: 229,
            column: 39
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 229
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 243,
            column: 39
          },
          end: {
            line: 274,
            column: 5
          }
        },
        line: 243
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 249,
            column: 41
          },
          end: {
            line: 249,
            column: 42
          }
        },
        loc: {
          start: {
            line: 249,
            column: 53
          },
          end: {
            line: 254,
            column: 9
          }
        },
        line: 249
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 260,
            column: 34
          },
          end: {
            line: 260,
            column: 35
          }
        },
        loc: {
          start: {
            line: 260,
            column: 46
          },
          end: {
            line: 262,
            column: 17
          }
        },
        line: 260
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        },
        loc: {
          start: {
            line: 275,
            column: 31
          },
          end: {
            line: 284,
            column: 5
          }
        },
        line: 275
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 285,
            column: 4
          },
          end: {
            line: 285,
            column: 5
          }
        },
        loc: {
          start: {
            line: 285,
            column: 56
          },
          end: {
            line: 310,
            column: 5
          }
        },
        line: 285
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 293,
            column: 56
          },
          end: {
            line: 293,
            column: 57
          }
        },
        loc: {
          start: {
            line: 293,
            column: 61
          },
          end: {
            line: 293,
            column: 88
          }
        },
        line: 293
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 299,
            column: 36
          },
          end: {
            line: 299,
            column: 37
          }
        },
        loc: {
          start: {
            line: 299,
            column: 43
          },
          end: {
            line: 304,
            column: 9
          }
        },
        line: 299
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 300,
            column: 62
          },
          end: {
            line: 300,
            column: 63
          }
        },
        loc: {
          start: {
            line: 300,
            column: 67
          },
          end: {
            line: 300,
            column: 129
          }
        },
        line: 300
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 311,
            column: 4
          },
          end: {
            line: 311,
            column: 5
          }
        },
        loc: {
          start: {
            line: 311,
            column: 40
          },
          end: {
            line: 325,
            column: 5
          }
        },
        line: 311
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 326,
            column: 4
          },
          end: {
            line: 326,
            column: 5
          }
        },
        loc: {
          start: {
            line: 326,
            column: 43
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 326
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 339,
            column: 4
          },
          end: {
            line: 339,
            column: 5
          }
        },
        loc: {
          start: {
            line: 339,
            column: 38
          },
          end: {
            line: 350,
            column: 5
          }
        },
        line: 339
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 5
          }
        },
        loc: {
          start: {
            line: 351,
            column: 60
          },
          end: {
            line: 368,
            column: 5
          }
        },
        line: 351
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 365,
            column: 22
          },
          end: {
            line: 365,
            column: 23
          }
        },
        loc: {
          start: {
            line: 365,
            column: 40
          },
          end: {
            line: 365,
            column: 65
          }
        },
        line: 365
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 369,
            column: 4
          },
          end: {
            line: 369,
            column: 5
          }
        },
        loc: {
          start: {
            line: 369,
            column: 35
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 369
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 19,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 25
          },
          end: {
            line: 19,
            column: 27
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 34
          },
          end: {
            line: 22,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 34
          },
          end: {
            line: 22,
            column: 61
          }
        }, {
          start: {
            line: 22,
            column: 65
          },
          end: {
            line: 22,
            column: 69
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 27
          },
          end: {
            line: 23,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 27
          },
          end: {
            line: 23,
            column: 47
          }
        }, {
          start: {
            line: 23,
            column: 51
          },
          end: {
            line: 23,
            column: 55
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 24,
            column: 30
          },
          end: {
            line: 24,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 30
          },
          end: {
            line: 24,
            column: 53
          }
        }, {
          start: {
            line: 24,
            column: 57
          },
          end: {
            line: 24,
            column: 61
          }
        }],
        line: 24
      },
      "4": {
        loc: {
          start: {
            line: 25,
            column: 30
          },
          end: {
            line: 25,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 30
          },
          end: {
            line: 25,
            column: 53
          }
        }, {
          start: {
            line: 25,
            column: 57
          },
          end: {
            line: 25,
            column: 61
          }
        }],
        line: 25
      },
      "5": {
        loc: {
          start: {
            line: 26,
            column: 30
          },
          end: {
            line: 26,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 30
          },
          end: {
            line: 26,
            column: 53
          }
        }, {
          start: {
            line: 26,
            column: 57
          },
          end: {
            line: 26,
            column: 68
          }
        }],
        line: 26
      },
      "6": {
        loc: {
          start: {
            line: 27,
            column: 23
          },
          end: {
            line: 27,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 23
          },
          end: {
            line: 27,
            column: 39
          }
        }, {
          start: {
            line: 27,
            column: 43
          },
          end: {
            line: 27,
            column: 48
          }
        }],
        line: 27
      },
      "7": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "8": {
        loc: {
          start: {
            line: 64,
            column: 41
          },
          end: {
            line: 64,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 64,
            column: 54
          },
          end: {
            line: 64,
            column: 56
          }
        }],
        line: 64
      },
      "9": {
        loc: {
          start: {
            line: 72,
            column: 36
          },
          end: {
            line: 74,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 73,
            column: 18
          },
          end: {
            line: 73,
            column: 74
          }
        }, {
          start: {
            line: 74,
            column: 18
          },
          end: {
            line: 74,
            column: 20
          }
        }],
        line: 72
      },
      "10": {
        loc: {
          start: {
            line: 76,
            column: 31
          },
          end: {
            line: 78,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 77,
            column: 18
          },
          end: {
            line: 77,
            column: 74
          }
        }, {
          start: {
            line: 78,
            column: 18
          },
          end: {
            line: 78,
            column: 60
          }
        }],
        line: 76
      },
      "11": {
        loc: {
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "12": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 103,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 103,
            column: 21
          }
        }, {
          start: {
            line: 103,
            column: 25
          },
          end: {
            line: 103,
            column: 57
          }
        }],
        line: 103
      },
      "13": {
        loc: {
          start: {
            line: 110,
            column: 53
          },
          end: {
            line: 110,
            column: 72
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 110,
            column: 70
          },
          end: {
            line: 110,
            column: 72
          }
        }],
        line: 110
      },
      "14": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "15": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 26
          }
        }, {
          start: {
            line: 113,
            column: 30
          },
          end: {
            line: 113,
            column: 71
          }
        }],
        line: 113
      },
      "16": {
        loc: {
          start: {
            line: 136,
            column: 20
          },
          end: {
            line: 140,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 136,
            column: 29
          },
          end: {
            line: 140,
            column: 13
          }
        }, {
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 140,
            column: 66
          }
        }],
        line: 136
      },
      "17": {
        loc: {
          start: {
            line: 141,
            column: 19
          },
          end: {
            line: 146,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 141,
            column: 27
          },
          end: {
            line: 146,
            column: 13
          }
        }, {
          start: {
            line: 146,
            column: 16
          },
          end: {
            line: 146,
            column: 20
          }
        }],
        line: 141
      },
      "18": {
        loc: {
          start: {
            line: 147,
            column: 18
          },
          end: {
            line: 151,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 147,
            column: 25
          },
          end: {
            line: 151,
            column: 13
          }
        }, {
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 151,
            column: 20
          }
        }],
        line: 147
      },
      "19": {
        loc: {
          start: {
            line: 159,
            column: 30
          },
          end: {
            line: 159,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 159,
            column: 66
          },
          end: {
            line: 159,
            column: 68
          }
        }, {
          start: {
            line: 159,
            column: 71
          },
          end: {
            line: 159,
            column: 72
          }
        }],
        line: 159
      },
      "20": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 182,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 182,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "21": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 184,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 184,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "22": {
        loc: {
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 186,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 186,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "23": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 188,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 188,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "24": {
        loc: {
          start: {
            line: 198,
            column: 34
          },
          end: {
            line: 198,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 34
          },
          end: {
            line: 198,
            column: 56
          }
        }, {
          start: {
            line: 198,
            column: 60
          },
          end: {
            line: 198,
            column: 66
          }
        }],
        line: 198
      },
      "25": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "26": {
        loc: {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "27": {
        loc: {
          start: {
            line: 241,
            column: 15
          },
          end: {
            line: 241,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 241,
            column: 15
          },
          end: {
            line: 241,
            column: 42
          }
        }, {
          start: {
            line: 241,
            column: 46
          },
          end: {
            line: 241,
            column: 62
          }
        }],
        line: 241
      },
      "28": {
        loc: {
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "29": {
        loc: {
          start: {
            line: 258,
            column: 12
          },
          end: {
            line: 263,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 12
          },
          end: {
            line: 263,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "30": {
        loc: {
          start: {
            line: 258,
            column: 16
          },
          end: {
            line: 258,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 16
          },
          end: {
            line: 258,
            column: 25
          }
        }, {
          start: {
            line: 258,
            column: 29
          },
          end: {
            line: 258,
            column: 49
          }
        }],
        line: 258
      },
      "31": {
        loc: {
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "32": {
        loc: {
          start: {
            line: 276,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 277,
            column: 77
          }
        }, {
          start: {
            line: 278,
            column: 12
          },
          end: {
            line: 278,
            column: 69
          }
        }, {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 279,
            column: 73
          }
        }, {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 280,
            column: 67
          }
        }, {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 281,
            column: 75
          }
        }, {
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 282,
            column: 38
          }
        }],
        line: 276
      },
      "33": {
        loc: {
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "34": {
        loc: {
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "35": {
        loc: {
          start: {
            line: 300,
            column: 67
          },
          end: {
            line: 300,
            column: 129
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 300,
            column: 67
          },
          end: {
            line: 300,
            column: 94
          }
        }, {
          start: {
            line: 300,
            column: 98
          },
          end: {
            line: 300,
            column: 129
          }
        }],
        line: 300
      },
      "36": {
        loc: {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "37": {
        loc: {
          start: {
            line: 301,
            column: 16
          },
          end: {
            line: 301,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 301,
            column: 16
          },
          end: {
            line: 301,
            column: 28
          }
        }, {
          start: {
            line: 301,
            column: 32
          },
          end: {
            line: 301,
            column: 44
          }
        }],
        line: 301
      },
      "38": {
        loc: {
          start: {
            line: 324,
            column: 15
          },
          end: {
            line: 324,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 324,
            column: 15
          },
          end: {
            line: 324,
            column: 40
          }
        }, {
          start: {
            line: 324,
            column: 44
          },
          end: {
            line: 324,
            column: 46
          }
        }],
        line: 324
      },
      "39": {
        loc: {
          start: {
            line: 363,
            column: 8
          },
          end: {
            line: 367,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 363,
            column: 8
          },
          end: {
            line: 367,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 363
      },
      "40": {
        loc: {
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 372,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 372,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0, 0, 0, 0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/integration/command-provider.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/integration/command-provider.ts"],
      sourcesContent: ["/**\n * Command Provider Integration\n * Integrates context system with existing Vibe commands using composable provider architecture\n */\n\nimport { ContextAssembler, ContextAssemblyResult } from '../assembly/context-assembler';\nimport { ContextMemoryManager } from '../memory/context-memory';\nimport { GlobalContextManager } from '../layers/global';\nimport { PhaseContextManager } from '../layers/phase';\nimport { TaskContextManager } from '../layers/task';\nimport {\n  ContextFragment,\n  ContextPriority,\n  BaseContext,\n  ValidationRule,\n  TaskType\n} from '../types/context.types';\n\n/**\n * Command Context Provider Configuration\n */\nexport interface CommandProviderConfig {\n  enableMemoryLearning: boolean;\n  enableCaching: boolean;\n  enableValidation: boolean;\n  maxContextTokens: number;\n  fallbackStrategy: 'minimal' | 'essential' | 'degraded';\n  debugMode: boolean;\n}\n\n/**\n * Command Context Provider\n * Main integration point for context-aware commands\n */\nexport class CommandContextProvider {\n  private assembler: ContextAssembler;\n  private memory: ContextMemoryManager;\n  private globalManager: GlobalContextManager;\n  private phaseManager: PhaseContextManager;\n  private taskManager: TaskContextManager;\n  private config: CommandProviderConfig;\n  private commandHistory: Map<string, CommandExecution> = new Map();\n\n  constructor(config: Partial<CommandProviderConfig> = {}) {\n    this.config = {\n      enableMemoryLearning: config.enableMemoryLearning ?? true,\n      enableCaching: config.enableCaching ?? true,\n      enableValidation: config.enableValidation ?? true,\n      maxContextTokens: config.maxContextTokens ?? 8000,\n      fallbackStrategy: config.fallbackStrategy ?? 'essential',\n      debugMode: config.debugMode ?? false\n    };\n\n    this.assembler = new ContextAssembler({\n      tokenBudget: {\n        total: this.config.maxContextTokens,\n        reserved: Math.floor(this.config.maxContextTokens * 0.1),\n        available: Math.floor(this.config.maxContextTokens * 0.9),\n        used: 0,\n        allocation: {\n          global: Math.floor(this.config.maxContextTokens * 0.25),\n          phase: Math.floor(this.config.maxContextTokens * 0.25),\n          task: Math.floor(this.config.maxContextTokens * 0.25),\n          memory: Math.floor(this.config.maxContextTokens * 0.15),\n          buffer: Math.floor(this.config.maxContextTokens * 0.1)\n        }\n      }\n    });\n\n    this.memory = new ContextMemoryManager();\n    this.globalManager = new GlobalContextManager();\n    this.phaseManager = new PhaseContextManager();\n    this.taskManager = new TaskContextManager();\n  }\n\n  /**\n   * Initialize context provider\n   */\n  public async initialize(): Promise<void> {\n    // Initialize global context with project defaults\n    await this.globalManager.initialize();\n    \n    // Load existing phase context if available\n    await this.loadExistingPhaseContext();\n    \n    if (this.config.debugMode) {\n      console.log('CommandContextProvider initialized successfully');\n    }\n  }\n\n  /**\n   * Get context for command execution\n   */\n  public async getCommandContext(\n    commandName: string,\n    parameters: Record<string, unknown> = {}\n  ): Promise<CommandContextResult> {\n    const startTime = Date.now();\n    \n    try {\n      // Initialize task context for this command\n      await this.initializeCommandTask(commandName, parameters);\n\n      // Assemble context for command\n      const assemblyResult = await this.assembler.assembleForCommand(commandName);\n\n      // Get memory recommendations\n      const recommendations = this.config.enableMemoryLearning \n        ? this.memory.getRecommendations(assemblyResult.fragments)\n        : [];\n\n      // Validate context if enabled\n      const validation = this.config.enableValidation\n        ? this.validateCommandContext(commandName, assemblyResult)\n        : { passed: true, errors: [], warnings: [] };\n\n      const result: CommandContextResult = {\n        commandName,\n        context: this.buildContextString(assemblyResult),\n        fragments: assemblyResult.fragments,\n        tokens: assemblyResult.totalTokens,\n        recommendations,\n        validation,\n        executionTime: Date.now() - startTime,\n        timestamp: Date.now()\n      };\n\n      // Store execution for learning\n      this.recordCommandExecution(commandName, result, parameters);\n\n      return result;\n\n    } catch (error) {\n      // Fallback context\n      return this.getFallbackContext(commandName, error as Error);\n    }\n  }\n\n  /**\n   * Record command execution result for learning\n   */\n  public recordCommandResult(\n    commandName: string,\n    result: 'success' | 'failure' | 'partial',\n    output?: string\n  ): void {\n    const execution = this.commandHistory.get(`${commandName}-${Date.now()}`);\n    \n    if (execution && this.config.enableMemoryLearning) {\n      this.memory.recordDecision(\n        execution.contextId,\n        `execute-${commandName}`,\n        execution.reasoning,\n        result,\n        execution.fragments\n      );\n    }\n  }\n\n  /**\n   * Update phase context\n   */\n  public async updatePhaseContext(\n    phaseNumber: number,\n    phaseName: string,\n    completedTasks: string[] = [],\n    currentTier?: number\n  ): Promise<void> {\n    // Initialize phase if not exists\n    const existingPhase = this.phaseManager.getCurrentPhase();\n    \n    if (!existingPhase || existingPhase.phaseNumber !== phaseNumber) {\n      await this.phaseManager.initializePhase(\n        phaseNumber,\n        phaseName,\n        [`Complete ${phaseName} objectives`],\n        [\n          {\n            id: `phase-${phaseNumber}-req-1`,\n            description: `Implement ${phaseName} functionality`,\n            type: 'functional',\n            priority: ContextPriority.HIGH,\n            satisfied: false\n          }\n        ]\n      );\n    }\n\n    // Update progress\n    this.phaseManager.updateProgress(completedTasks, currentTier);\n  }\n\n  /**\n   * Get current context summary\n   */\n  public getContextSummary(): ContextSummary {\n    const global = this.globalManager.getContext();\n    const phase = this.phaseManager.getCurrentPhase();\n    const task = this.taskManager.getCurrentTask();\n    const memory = this.memory.getLearningMetrics();\n\n    return {\n      global: global ? {\n        enabled: true,\n        rulesCount: global.rules.filter(r => r.enabled).length,\n        lastModified: global.metadata.lastModified\n      } : { enabled: false, rulesCount: 0, lastModified: 0 },\n      \n      phase: phase ? {\n        phaseNumber: phase.phaseNumber,\n        phaseName: phase.phaseName,\n        progress: phase.data.progress.completionPercentage,\n        status: phase.phaseState.status\n      } : null,\n      \n      task: task ? {\n        taskId: task.taskId,\n        taskType: task.taskType,\n        objective: task.data.objective\n      } : null,\n      \n      memory: {\n        patternsLearned: memory.patternsLearned,\n        accuracyRate: memory.accuracyRate,\n        lastUpdated: memory.lastUpdated\n      },\n\n      performance: {\n        averageAssemblyTime: this.calculateAverageAssemblyTime(),\n        cacheHitRate: this.assembler['fragmentFactory'] ? 95 : 0, // Placeholder\n        totalCommands: this.commandHistory.size\n      }\n    };\n  }\n\n  /**\n   * Export context state\n   */\n  public exportContextState(): ContextExport {\n    return {\n      global: this.globalManager.exportContext(),\n      phase: this.phaseManager.exportPhaseContext(),\n      task: this.taskManager.exportTaskContext(),\n      memory: this.memory.exportMemory(),\n      config: this.config,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Import context state\n   */\n  public importContextState(data: ContextExport): void {\n    if (data.global) this.globalManager.importContext(data.global);\n    if (data.phase) this.phaseManager.importPhaseContext(data.phase);\n    if (data.task) this.taskManager.importTaskContext(data.task);\n    if (data.memory) this.memory.importMemory(data.memory);\n    \n    this.config = { ...this.config, ...data.config };\n  }\n\n  // Private implementation methods\n\n  private async loadExistingPhaseContext(): Promise<void> {\n    try {\n      // Check for existing .vibe-status.md file\n      const vibeStatusPath = '.vibe-status.md';\n      // This would normally use Read tool, but keeping implementation simple\n      \n      // For now, we'll detect current phase from git branch name\n      const currentBranch = process.env.GIT_BRANCH || 'main';\n      const phaseMatch = currentBranch.match(/phase-(\\d+)-(.+)/);\n      \n      if (phaseMatch) {\n        const phaseNumber = parseInt(phaseMatch[1]);\n        const phaseName = phaseMatch[2].replace(/-/g, ' ');\n        await this.updatePhaseContext(phaseNumber, phaseName);\n      }\n    } catch (error) {\n      if (this.config.debugMode) {\n        console.warn('Could not load existing phase context:', error);\n      }\n    }\n  }\n\n  private async initializeCommandTask(\n    commandName: string,\n    parameters: Record<string, unknown>\n  ): Promise<void> {\n    const taskId = `cmd-${commandName}-${Date.now()}`;\n    const taskType = this.getTaskTypeForCommand(commandName);\n    \n    const instructions = [\n      `Execute ${commandName} command`,\n      'Maintain context preservation',\n      'Follow quality standards'\n    ];\n\n    const taskParameters = Object.entries(parameters).map(([name, value]) => ({\n      name,\n      type: typeof value,\n      value,\n      required: true,\n      description: `Parameter for ${commandName}`\n    }));\n\n    await this.taskManager.initializeTask(\n      taskId,\n      taskType,\n      `Execute ${commandName} with context awareness`,\n      instructions,\n      taskParameters\n    );\n  }\n\n  private getTaskTypeForCommand(commandName: string): TaskType {\n    const commandTypeMap: Record<string, TaskType> = {\n      'Read': 'research',\n      'Write': 'implementation',\n      'Edit': 'implementation',\n      'Bash': 'implementation',\n      'TodoWrite': 'documentation',\n      'WebFetch': 'research',\n      'WebSearch': 'research',\n      'Grep': 'research',\n      'Glob': 'research'\n    };\n\n    return commandTypeMap[commandName] || 'implementation';\n  }\n\n  private buildContextString(assemblyResult: ContextAssemblyResult): string {\n    const sections: string[] = [\n      '# Context Information\\n'\n    ];\n\n    // Group fragments by priority\n    const groupedFragments = new Map<ContextPriority, ContextFragment[]>();\n    \n    assemblyResult.fragments.forEach(fragment => {\n      if (!groupedFragments.has(fragment.priority)) {\n        groupedFragments.set(fragment.priority, []);\n      }\n      groupedFragments.get(fragment.priority)!.push(fragment);\n    });\n\n    // Add sections by priority\n    for (const priority of [ContextPriority.CRITICAL, ContextPriority.HIGH, ContextPriority.MEDIUM]) {\n      const fragments = groupedFragments.get(priority);\n      if (fragments && fragments.length > 0) {\n        sections.push(`## ${this.getPriorityLabel(priority)} Priority\\n`);\n        \n        fragments.forEach(fragment => {\n          sections.push(`### ${fragment.type}\\n${fragment.content}\\n`);\n        });\n      }\n    }\n\n    // Add token usage info\n    sections.push(`\\n## Context Statistics\\n`);\n    sections.push(`- Total Tokens: ${assemblyResult.totalTokens}`);\n    sections.push(`- Budget Used: ${assemblyResult.budgetUsed}/${assemblyResult.budgetUsed + assemblyResult.budgetRemaining}`);\n    sections.push(`- Fragments: ${assemblyResult.fragments.length}`);\n    \n    if (assemblyResult.fallbacksApplied.length > 0) {\n      sections.push(`- Fallbacks Applied: ${assemblyResult.fallbacksApplied.length}`);\n    }\n\n    return sections.join('\\n');\n  }\n\n  private getPriorityLabel(priority: ContextPriority): string {\n    switch (priority) {\n      case ContextPriority.CRITICAL: return 'Critical';\n      case ContextPriority.HIGH: return 'High';\n      case ContextPriority.MEDIUM: return 'Medium';\n      case ContextPriority.LOW: return 'Low';\n      case ContextPriority.MINIMAL: return 'Minimal';\n      default: return 'Unknown';\n    }\n  }\n\n  private validateCommandContext(\n    commandName: string,\n    assemblyResult: ContextAssemblyResult\n  ): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Check token budget\n    if (assemblyResult.totalTokens > this.config.maxContextTokens * 0.9) {\n      warnings.push('Context approaching token limit');\n    }\n\n    // Check for required context types\n    const hasGlobal = assemblyResult.fragments.some(f => f.type.startsWith('global'));\n    if (!hasGlobal) {\n      errors.push('Missing global context');\n    }\n\n    // Check command-specific requirements\n    const commandRequirements = this.getCommandRequirements(commandName);\n    commandRequirements.forEach(req => {\n      const hasRequired = assemblyResult.fragments.some(f => \n        f.type === req.fragmentType || f.content.includes(req.keyword)\n      );\n      \n      if (req.required && !hasRequired) {\n        errors.push(`Missing required context: ${req.description}`);\n      }\n    });\n\n    return {\n      passed: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  private getCommandRequirements(commandName: string): ContextRequirement[] {\n    const requirements: Record<string, ContextRequirement[]> = {\n      'Read': [\n        { fragmentType: 'global-rules', keyword: 'file', required: true, description: 'Global file handling rules' }\n      ],\n      'Write': [\n        { fragmentType: 'global-rules', keyword: 'quality', required: true, description: 'Quality standards' },\n        { fragmentType: 'task-context', keyword: 'write', required: false, description: 'Write task context' }\n      ],\n      'Bash': [\n        { fragmentType: 'global-rules', keyword: 'safety', required: true, description: 'Safety guidelines' }\n      ]\n    };\n\n    return requirements[commandName] || [];\n  }\n\n  private getFallbackContext(commandName: string, error: Error): CommandContextResult {\n    const fallbackContext = this.buildFallbackContext(commandName);\n    \n    return {\n      commandName,\n      context: fallbackContext,\n      fragments: [],\n      tokens: fallbackContext.length / 4, // Rough estimate\n      recommendations: [],\n      validation: { passed: false, errors: [error.message], warnings: ['Using fallback context'] },\n      executionTime: 0,\n      timestamp: Date.now()\n    };\n  }\n\n  private buildFallbackContext(commandName: string): string {\n    const essential = [\n      '# Fallback Context\\n',\n      '## Essential Rules',\n      '- Follow systematic development patterns',\n      '- Maintain 95%+ test coverage',\n      '- Preserve context between operations\\n',\n      `## Command: ${commandName}`,\n      `Executing ${commandName} with minimal context due to system fallback.`\n    ];\n\n    return essential.join('\\n');\n  }\n\n  private recordCommandExecution(\n    commandName: string,\n    result: CommandContextResult,\n    parameters: Record<string, unknown>\n  ): void {\n    const execution: CommandExecution = {\n      contextId: `exec-${commandName}-${Date.now()}`,\n      commandName,\n      parameters,\n      fragments: result.fragments,\n      tokens: result.tokens,\n      reasoning: `Context assembly for ${commandName}`,\n      timestamp: Date.now()\n    };\n\n    this.commandHistory.set(execution.contextId, execution);\n\n    // Cleanup old executions\n    if (this.commandHistory.size > 100) {\n      const oldest = Array.from(this.commandHistory.entries())\n        .sort(([,a], [,b]) => a.timestamp - b.timestamp)[0];\n      this.commandHistory.delete(oldest[0]);\n    }\n  }\n\n  private calculateAverageAssemblyTime(): number {\n    const executions = Array.from(this.commandHistory.values());\n    if (executions.length === 0) return 0;\n    \n    // This would normally track assembly times\n    return 50; // Placeholder: 50ms average\n  }\n}\n\n// Supporting interfaces\n\ninterface CommandContextResult {\n  commandName: string;\n  context: string;\n  fragments: ContextFragment[];\n  tokens: number;\n  recommendations: any[];\n  validation: ValidationResult;\n  executionTime: number;\n  timestamp: number;\n}\n\ninterface ValidationResult {\n  passed: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\ninterface ContextRequirement {\n  fragmentType?: string;\n  keyword: string;\n  required: boolean;\n  description: string;\n}\n\ninterface CommandExecution {\n  contextId: string;\n  commandName: string;\n  parameters: Record<string, unknown>;\n  fragments: ContextFragment[];\n  tokens: number;\n  reasoning: string;\n  timestamp: number;\n}\n\ninterface ContextSummary {\n  global: {\n    enabled: boolean;\n    rulesCount: number;\n    lastModified: number;\n  };\n  phase: {\n    phaseNumber: number;\n    phaseName: string;\n    progress: number;\n    status: string;\n  } | null;\n  task: {\n    taskId: string;\n    taskType: string;\n    objective: string;\n  } | null;\n  memory: {\n    patternsLearned: number;\n    accuracyRate: number;\n    lastUpdated: number;\n  };\n  performance: {\n    averageAssemblyTime: number;\n    cacheHitRate: number;\n    totalCommands: number;\n  };\n}\n\ninterface ContextExport {\n  global: any;\n  phase: any;\n  task: any;\n  memory: any;\n  config: CommandProviderConfig;\n  timestamp: number;\n}\n\n/**\n * Singleton instance for command integration\n */\nexport const commandContextProvider = new CommandContextProvider();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "71213f624f77c084a96bb0eff4296067c9e3d9b0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_t2mrfjj9q = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_t2mrfjj9q();
cov_t2mrfjj9q().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_t2mrfjj9q().s[1]++;
exports.commandContextProvider = exports.CommandContextProvider = void 0;
const context_assembler_1 =
/* istanbul ignore next */
(cov_t2mrfjj9q().s[2]++, require("../assembly/context-assembler"));
const context_memory_1 =
/* istanbul ignore next */
(cov_t2mrfjj9q().s[3]++, require("../memory/context-memory"));
const global_1 =
/* istanbul ignore next */
(cov_t2mrfjj9q().s[4]++, require("../layers/global"));
const phase_1 =
/* istanbul ignore next */
(cov_t2mrfjj9q().s[5]++, require("../layers/phase"));
const task_1 =
/* istanbul ignore next */
(cov_t2mrfjj9q().s[6]++, require("../layers/task"));
const context_types_1 =
/* istanbul ignore next */
(cov_t2mrfjj9q().s[7]++, require("../types/context.types"));
/**
 * Command Context Provider
 * Main integration point for context-aware commands
 */
class CommandContextProvider {
  constructor(config =
  /* istanbul ignore next */
  (cov_t2mrfjj9q().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[0]++;
    cov_t2mrfjj9q().s[8]++;
    this.commandHistory = new Map();
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[9]++;
    this.config = {
      enableMemoryLearning:
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[1][0]++, config.enableMemoryLearning) ??
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[1][1]++, true),
      enableCaching:
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[2][0]++, config.enableCaching) ??
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[2][1]++, true),
      enableValidation:
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[3][0]++, config.enableValidation) ??
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[3][1]++, true),
      maxContextTokens:
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[4][0]++, config.maxContextTokens) ??
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[4][1]++, 8000),
      fallbackStrategy:
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[5][0]++, config.fallbackStrategy) ??
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[5][1]++, 'essential'),
      debugMode:
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[6][0]++, config.debugMode) ??
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[6][1]++, false)
    };
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[10]++;
    this.assembler = new context_assembler_1.ContextAssembler({
      tokenBudget: {
        total: this.config.maxContextTokens,
        reserved: Math.floor(this.config.maxContextTokens * 0.1),
        available: Math.floor(this.config.maxContextTokens * 0.9),
        used: 0,
        allocation: {
          global: Math.floor(this.config.maxContextTokens * 0.25),
          phase: Math.floor(this.config.maxContextTokens * 0.25),
          task: Math.floor(this.config.maxContextTokens * 0.25),
          memory: Math.floor(this.config.maxContextTokens * 0.15),
          buffer: Math.floor(this.config.maxContextTokens * 0.1)
        }
      }
    });
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[11]++;
    this.memory = new context_memory_1.ContextMemoryManager();
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[12]++;
    this.globalManager = new global_1.GlobalContextManager();
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[13]++;
    this.phaseManager = new phase_1.PhaseContextManager();
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[14]++;
    this.taskManager = new task_1.TaskContextManager();
  }
  /**
   * Initialize context provider
   */
  async initialize() {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[1]++;
    cov_t2mrfjj9q().s[15]++;
    // Initialize global context with project defaults
    await this.globalManager.initialize();
    // Load existing phase context if available
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[16]++;
    await this.loadExistingPhaseContext();
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[17]++;
    if (this.config.debugMode) {
      /* istanbul ignore next */
      cov_t2mrfjj9q().b[7][0]++;
      cov_t2mrfjj9q().s[18]++;
      console.log('CommandContextProvider initialized successfully');
    } else
    /* istanbul ignore next */
    {
      cov_t2mrfjj9q().b[7][1]++;
    }
  }
  /**
   * Get context for command execution
   */
  async getCommandContext(commandName, parameters =
  /* istanbul ignore next */
  (cov_t2mrfjj9q().b[8][0]++, {})) {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[2]++;
    const startTime =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[19]++, Date.now());
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[20]++;
    try {
      /* istanbul ignore next */
      cov_t2mrfjj9q().s[21]++;
      // Initialize task context for this command
      await this.initializeCommandTask(commandName, parameters);
      // Assemble context for command
      const assemblyResult =
      /* istanbul ignore next */
      (cov_t2mrfjj9q().s[22]++, await this.assembler.assembleForCommand(commandName));
      // Get memory recommendations
      const recommendations =
      /* istanbul ignore next */
      (cov_t2mrfjj9q().s[23]++, this.config.enableMemoryLearning ?
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[9][0]++, this.memory.getRecommendations(assemblyResult.fragments)) :
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[9][1]++, []));
      // Validate context if enabled
      const validation =
      /* istanbul ignore next */
      (cov_t2mrfjj9q().s[24]++, this.config.enableValidation ?
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[10][0]++, this.validateCommandContext(commandName, assemblyResult)) :
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[10][1]++, {
        passed: true,
        errors: [],
        warnings: []
      }));
      const result =
      /* istanbul ignore next */
      (cov_t2mrfjj9q().s[25]++, {
        commandName,
        context: this.buildContextString(assemblyResult),
        fragments: assemblyResult.fragments,
        tokens: assemblyResult.totalTokens,
        recommendations,
        validation,
        executionTime: Date.now() - startTime,
        timestamp: Date.now()
      });
      // Store execution for learning
      /* istanbul ignore next */
      cov_t2mrfjj9q().s[26]++;
      this.recordCommandExecution(commandName, result, parameters);
      /* istanbul ignore next */
      cov_t2mrfjj9q().s[27]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_t2mrfjj9q().s[28]++;
      // Fallback context
      return this.getFallbackContext(commandName, error);
    }
  }
  /**
   * Record command execution result for learning
   */
  recordCommandResult(commandName, result, output) {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[3]++;
    const execution =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[29]++, this.commandHistory.get(`${commandName}-${Date.now()}`));
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[30]++;
    if (
    /* istanbul ignore next */
    (cov_t2mrfjj9q().b[12][0]++, execution) &&
    /* istanbul ignore next */
    (cov_t2mrfjj9q().b[12][1]++, this.config.enableMemoryLearning)) {
      /* istanbul ignore next */
      cov_t2mrfjj9q().b[11][0]++;
      cov_t2mrfjj9q().s[31]++;
      this.memory.recordDecision(execution.contextId, `execute-${commandName}`, execution.reasoning, result, execution.fragments);
    } else
    /* istanbul ignore next */
    {
      cov_t2mrfjj9q().b[11][1]++;
    }
  }
  /**
   * Update phase context
   */
  async updatePhaseContext(phaseNumber, phaseName, completedTasks =
  /* istanbul ignore next */
  (cov_t2mrfjj9q().b[13][0]++, []), currentTier) {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[4]++;
    // Initialize phase if not exists
    const existingPhase =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[32]++, this.phaseManager.getCurrentPhase());
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[33]++;
    if (
    /* istanbul ignore next */
    (cov_t2mrfjj9q().b[15][0]++, !existingPhase) ||
    /* istanbul ignore next */
    (cov_t2mrfjj9q().b[15][1]++, existingPhase.phaseNumber !== phaseNumber)) {
      /* istanbul ignore next */
      cov_t2mrfjj9q().b[14][0]++;
      cov_t2mrfjj9q().s[34]++;
      await this.phaseManager.initializePhase(phaseNumber, phaseName, [`Complete ${phaseName} objectives`], [{
        id: `phase-${phaseNumber}-req-1`,
        description: `Implement ${phaseName} functionality`,
        type: 'functional',
        priority: context_types_1.ContextPriority.HIGH,
        satisfied: false
      }]);
    } else
    /* istanbul ignore next */
    {
      cov_t2mrfjj9q().b[14][1]++;
    }
    // Update progress
    cov_t2mrfjj9q().s[35]++;
    this.phaseManager.updateProgress(completedTasks, currentTier);
  }
  /**
   * Get current context summary
   */
  getContextSummary() {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[5]++;
    const global =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[36]++, this.globalManager.getContext());
    const phase =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[37]++, this.phaseManager.getCurrentPhase());
    const task =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[38]++, this.taskManager.getCurrentTask());
    const memory =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[39]++, this.memory.getLearningMetrics());
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[40]++;
    return {
      global: global ?
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[16][0]++, {
        enabled: true,
        rulesCount: global.rules.filter(r => {
          /* istanbul ignore next */
          cov_t2mrfjj9q().f[6]++;
          cov_t2mrfjj9q().s[41]++;
          return r.enabled;
        }).length,
        lastModified: global.metadata.lastModified
      }) :
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[16][1]++, {
        enabled: false,
        rulesCount: 0,
        lastModified: 0
      }),
      phase: phase ?
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[17][0]++, {
        phaseNumber: phase.phaseNumber,
        phaseName: phase.phaseName,
        progress: phase.data.progress.completionPercentage,
        status: phase.phaseState.status
      }) :
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[17][1]++, null),
      task: task ?
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[18][0]++, {
        taskId: task.taskId,
        taskType: task.taskType,
        objective: task.data.objective
      }) :
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[18][1]++, null),
      memory: {
        patternsLearned: memory.patternsLearned,
        accuracyRate: memory.accuracyRate,
        lastUpdated: memory.lastUpdated
      },
      performance: {
        averageAssemblyTime: this.calculateAverageAssemblyTime(),
        cacheHitRate: this.assembler['fragmentFactory'] ?
        /* istanbul ignore next */
        (cov_t2mrfjj9q().b[19][0]++, 95) :
        /* istanbul ignore next */
        (cov_t2mrfjj9q().b[19][1]++, 0),
        // Placeholder
        totalCommands: this.commandHistory.size
      }
    };
  }
  /**
   * Export context state
   */
  exportContextState() {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[7]++;
    cov_t2mrfjj9q().s[42]++;
    return {
      global: this.globalManager.exportContext(),
      phase: this.phaseManager.exportPhaseContext(),
      task: this.taskManager.exportTaskContext(),
      memory: this.memory.exportMemory(),
      config: this.config,
      timestamp: Date.now()
    };
  }
  /**
   * Import context state
   */
  importContextState(data) {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[8]++;
    cov_t2mrfjj9q().s[43]++;
    if (data.global) {
      /* istanbul ignore next */
      cov_t2mrfjj9q().b[20][0]++;
      cov_t2mrfjj9q().s[44]++;
      this.globalManager.importContext(data.global);
    } else
    /* istanbul ignore next */
    {
      cov_t2mrfjj9q().b[20][1]++;
    }
    cov_t2mrfjj9q().s[45]++;
    if (data.phase) {
      /* istanbul ignore next */
      cov_t2mrfjj9q().b[21][0]++;
      cov_t2mrfjj9q().s[46]++;
      this.phaseManager.importPhaseContext(data.phase);
    } else
    /* istanbul ignore next */
    {
      cov_t2mrfjj9q().b[21][1]++;
    }
    cov_t2mrfjj9q().s[47]++;
    if (data.task) {
      /* istanbul ignore next */
      cov_t2mrfjj9q().b[22][0]++;
      cov_t2mrfjj9q().s[48]++;
      this.taskManager.importTaskContext(data.task);
    } else
    /* istanbul ignore next */
    {
      cov_t2mrfjj9q().b[22][1]++;
    }
    cov_t2mrfjj9q().s[49]++;
    if (data.memory) {
      /* istanbul ignore next */
      cov_t2mrfjj9q().b[23][0]++;
      cov_t2mrfjj9q().s[50]++;
      this.memory.importMemory(data.memory);
    } else
    /* istanbul ignore next */
    {
      cov_t2mrfjj9q().b[23][1]++;
    }
    cov_t2mrfjj9q().s[51]++;
    this.config = {
      ...this.config,
      ...data.config
    };
  }
  // Private implementation methods
  async loadExistingPhaseContext() {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[9]++;
    cov_t2mrfjj9q().s[52]++;
    try {
      // Check for existing .vibe-status.md file
      const vibeStatusPath =
      /* istanbul ignore next */
      (cov_t2mrfjj9q().s[53]++, '.vibe-status.md');
      // This would normally use Read tool, but keeping implementation simple
      // For now, we'll detect current phase from git branch name
      const currentBranch =
      /* istanbul ignore next */
      (cov_t2mrfjj9q().s[54]++,
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[24][0]++, process.env.GIT_BRANCH) ||
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[24][1]++, 'main'));
      const phaseMatch =
      /* istanbul ignore next */
      (cov_t2mrfjj9q().s[55]++, currentBranch.match(/phase-(\d+)-(.+)/));
      /* istanbul ignore next */
      cov_t2mrfjj9q().s[56]++;
      if (phaseMatch) {
        /* istanbul ignore next */
        cov_t2mrfjj9q().b[25][0]++;
        const phaseNumber =
        /* istanbul ignore next */
        (cov_t2mrfjj9q().s[57]++, parseInt(phaseMatch[1]));
        const phaseName =
        /* istanbul ignore next */
        (cov_t2mrfjj9q().s[58]++, phaseMatch[2].replace(/-/g, ' '));
        /* istanbul ignore next */
        cov_t2mrfjj9q().s[59]++;
        await this.updatePhaseContext(phaseNumber, phaseName);
      } else
      /* istanbul ignore next */
      {
        cov_t2mrfjj9q().b[25][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_t2mrfjj9q().s[60]++;
      if (this.config.debugMode) {
        /* istanbul ignore next */
        cov_t2mrfjj9q().b[26][0]++;
        cov_t2mrfjj9q().s[61]++;
        console.warn('Could not load existing phase context:', error);
      } else
      /* istanbul ignore next */
      {
        cov_t2mrfjj9q().b[26][1]++;
      }
    }
  }
  async initializeCommandTask(commandName, parameters) {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[10]++;
    const taskId =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[62]++, `cmd-${commandName}-${Date.now()}`);
    const taskType =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[63]++, this.getTaskTypeForCommand(commandName));
    const instructions =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[64]++, [`Execute ${commandName} command`, 'Maintain context preservation', 'Follow quality standards']);
    const taskParameters =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[65]++, Object.entries(parameters).map(([name, value]) => {
      /* istanbul ignore next */
      cov_t2mrfjj9q().f[11]++;
      cov_t2mrfjj9q().s[66]++;
      return {
        name,
        type: typeof value,
        value,
        required: true,
        description: `Parameter for ${commandName}`
      };
    }));
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[67]++;
    await this.taskManager.initializeTask(taskId, taskType, `Execute ${commandName} with context awareness`, instructions, taskParameters);
  }
  getTaskTypeForCommand(commandName) {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[12]++;
    const commandTypeMap =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[68]++, {
      'Read': 'research',
      'Write': 'implementation',
      'Edit': 'implementation',
      'Bash': 'implementation',
      'TodoWrite': 'documentation',
      'WebFetch': 'research',
      'WebSearch': 'research',
      'Grep': 'research',
      'Glob': 'research'
    });
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[69]++;
    return /* istanbul ignore next */(cov_t2mrfjj9q().b[27][0]++, commandTypeMap[commandName]) ||
    /* istanbul ignore next */
    (cov_t2mrfjj9q().b[27][1]++, 'implementation');
  }
  buildContextString(assemblyResult) {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[13]++;
    const sections =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[70]++, ['# Context Information\n']);
    // Group fragments by priority
    const groupedFragments =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[71]++, new Map());
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[72]++;
    assemblyResult.fragments.forEach(fragment => {
      /* istanbul ignore next */
      cov_t2mrfjj9q().f[14]++;
      cov_t2mrfjj9q().s[73]++;
      if (!groupedFragments.has(fragment.priority)) {
        /* istanbul ignore next */
        cov_t2mrfjj9q().b[28][0]++;
        cov_t2mrfjj9q().s[74]++;
        groupedFragments.set(fragment.priority, []);
      } else
      /* istanbul ignore next */
      {
        cov_t2mrfjj9q().b[28][1]++;
      }
      cov_t2mrfjj9q().s[75]++;
      groupedFragments.get(fragment.priority).push(fragment);
    });
    // Add sections by priority
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[76]++;
    for (const priority of [context_types_1.ContextPriority.CRITICAL, context_types_1.ContextPriority.HIGH, context_types_1.ContextPriority.MEDIUM]) {
      const fragments =
      /* istanbul ignore next */
      (cov_t2mrfjj9q().s[77]++, groupedFragments.get(priority));
      /* istanbul ignore next */
      cov_t2mrfjj9q().s[78]++;
      if (
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[30][0]++, fragments) &&
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[30][1]++, fragments.length > 0)) {
        /* istanbul ignore next */
        cov_t2mrfjj9q().b[29][0]++;
        cov_t2mrfjj9q().s[79]++;
        sections.push(`## ${this.getPriorityLabel(priority)} Priority\n`);
        /* istanbul ignore next */
        cov_t2mrfjj9q().s[80]++;
        fragments.forEach(fragment => {
          /* istanbul ignore next */
          cov_t2mrfjj9q().f[15]++;
          cov_t2mrfjj9q().s[81]++;
          sections.push(`### ${fragment.type}\n${fragment.content}\n`);
        });
      } else
      /* istanbul ignore next */
      {
        cov_t2mrfjj9q().b[29][1]++;
      }
    }
    // Add token usage info
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[82]++;
    sections.push(`\n## Context Statistics\n`);
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[83]++;
    sections.push(`- Total Tokens: ${assemblyResult.totalTokens}`);
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[84]++;
    sections.push(`- Budget Used: ${assemblyResult.budgetUsed}/${assemblyResult.budgetUsed + assemblyResult.budgetRemaining}`);
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[85]++;
    sections.push(`- Fragments: ${assemblyResult.fragments.length}`);
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[86]++;
    if (assemblyResult.fallbacksApplied.length > 0) {
      /* istanbul ignore next */
      cov_t2mrfjj9q().b[31][0]++;
      cov_t2mrfjj9q().s[87]++;
      sections.push(`- Fallbacks Applied: ${assemblyResult.fallbacksApplied.length}`);
    } else
    /* istanbul ignore next */
    {
      cov_t2mrfjj9q().b[31][1]++;
    }
    cov_t2mrfjj9q().s[88]++;
    return sections.join('\n');
  }
  getPriorityLabel(priority) {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[16]++;
    cov_t2mrfjj9q().s[89]++;
    switch (priority) {
      case context_types_1.ContextPriority.CRITICAL:
        /* istanbul ignore next */
        cov_t2mrfjj9q().b[32][0]++;
        cov_t2mrfjj9q().s[90]++;
        return 'Critical';
      case context_types_1.ContextPriority.HIGH:
        /* istanbul ignore next */
        cov_t2mrfjj9q().b[32][1]++;
        cov_t2mrfjj9q().s[91]++;
        return 'High';
      case context_types_1.ContextPriority.MEDIUM:
        /* istanbul ignore next */
        cov_t2mrfjj9q().b[32][2]++;
        cov_t2mrfjj9q().s[92]++;
        return 'Medium';
      case context_types_1.ContextPriority.LOW:
        /* istanbul ignore next */
        cov_t2mrfjj9q().b[32][3]++;
        cov_t2mrfjj9q().s[93]++;
        return 'Low';
      case context_types_1.ContextPriority.MINIMAL:
        /* istanbul ignore next */
        cov_t2mrfjj9q().b[32][4]++;
        cov_t2mrfjj9q().s[94]++;
        return 'Minimal';
      default:
        /* istanbul ignore next */
        cov_t2mrfjj9q().b[32][5]++;
        cov_t2mrfjj9q().s[95]++;
        return 'Unknown';
    }
  }
  validateCommandContext(commandName, assemblyResult) {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[17]++;
    const errors =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[96]++, []);
    const warnings =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[97]++, []);
    // Check token budget
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[98]++;
    if (assemblyResult.totalTokens > this.config.maxContextTokens * 0.9) {
      /* istanbul ignore next */
      cov_t2mrfjj9q().b[33][0]++;
      cov_t2mrfjj9q().s[99]++;
      warnings.push('Context approaching token limit');
    } else
    /* istanbul ignore next */
    {
      cov_t2mrfjj9q().b[33][1]++;
    }
    // Check for required context types
    const hasGlobal =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[100]++, assemblyResult.fragments.some(f => {
      /* istanbul ignore next */
      cov_t2mrfjj9q().f[18]++;
      cov_t2mrfjj9q().s[101]++;
      return f.type.startsWith('global');
    }));
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[102]++;
    if (!hasGlobal) {
      /* istanbul ignore next */
      cov_t2mrfjj9q().b[34][0]++;
      cov_t2mrfjj9q().s[103]++;
      errors.push('Missing global context');
    } else
    /* istanbul ignore next */
    {
      cov_t2mrfjj9q().b[34][1]++;
    }
    // Check command-specific requirements
    const commandRequirements =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[104]++, this.getCommandRequirements(commandName));
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[105]++;
    commandRequirements.forEach(req => {
      /* istanbul ignore next */
      cov_t2mrfjj9q().f[19]++;
      const hasRequired =
      /* istanbul ignore next */
      (cov_t2mrfjj9q().s[106]++, assemblyResult.fragments.some(f => {
        /* istanbul ignore next */
        cov_t2mrfjj9q().f[20]++;
        cov_t2mrfjj9q().s[107]++;
        return /* istanbul ignore next */(cov_t2mrfjj9q().b[35][0]++, f.type === req.fragmentType) ||
        /* istanbul ignore next */
        (cov_t2mrfjj9q().b[35][1]++, f.content.includes(req.keyword));
      }));
      /* istanbul ignore next */
      cov_t2mrfjj9q().s[108]++;
      if (
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[37][0]++, req.required) &&
      /* istanbul ignore next */
      (cov_t2mrfjj9q().b[37][1]++, !hasRequired)) {
        /* istanbul ignore next */
        cov_t2mrfjj9q().b[36][0]++;
        cov_t2mrfjj9q().s[109]++;
        errors.push(`Missing required context: ${req.description}`);
      } else
      /* istanbul ignore next */
      {
        cov_t2mrfjj9q().b[36][1]++;
      }
    });
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[110]++;
    return {
      passed: errors.length === 0,
      errors,
      warnings
    };
  }
  getCommandRequirements(commandName) {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[21]++;
    const requirements =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[111]++, {
      'Read': [{
        fragmentType: 'global-rules',
        keyword: 'file',
        required: true,
        description: 'Global file handling rules'
      }],
      'Write': [{
        fragmentType: 'global-rules',
        keyword: 'quality',
        required: true,
        description: 'Quality standards'
      }, {
        fragmentType: 'task-context',
        keyword: 'write',
        required: false,
        description: 'Write task context'
      }],
      'Bash': [{
        fragmentType: 'global-rules',
        keyword: 'safety',
        required: true,
        description: 'Safety guidelines'
      }]
    });
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[112]++;
    return /* istanbul ignore next */(cov_t2mrfjj9q().b[38][0]++, requirements[commandName]) ||
    /* istanbul ignore next */
    (cov_t2mrfjj9q().b[38][1]++, []);
  }
  getFallbackContext(commandName, error) {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[22]++;
    const fallbackContext =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[113]++, this.buildFallbackContext(commandName));
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[114]++;
    return {
      commandName,
      context: fallbackContext,
      fragments: [],
      tokens: fallbackContext.length / 4,
      // Rough estimate
      recommendations: [],
      validation: {
        passed: false,
        errors: [error.message],
        warnings: ['Using fallback context']
      },
      executionTime: 0,
      timestamp: Date.now()
    };
  }
  buildFallbackContext(commandName) {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[23]++;
    const essential =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[115]++, ['# Fallback Context\n', '## Essential Rules', '- Follow systematic development patterns', '- Maintain 95%+ test coverage', '- Preserve context between operations\n', `## Command: ${commandName}`, `Executing ${commandName} with minimal context due to system fallback.`]);
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[116]++;
    return essential.join('\n');
  }
  recordCommandExecution(commandName, result, parameters) {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[24]++;
    const execution =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[117]++, {
      contextId: `exec-${commandName}-${Date.now()}`,
      commandName,
      parameters,
      fragments: result.fragments,
      tokens: result.tokens,
      reasoning: `Context assembly for ${commandName}`,
      timestamp: Date.now()
    });
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[118]++;
    this.commandHistory.set(execution.contextId, execution);
    // Cleanup old executions
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[119]++;
    if (this.commandHistory.size > 100) {
      /* istanbul ignore next */
      cov_t2mrfjj9q().b[39][0]++;
      const oldest =
      /* istanbul ignore next */
      (cov_t2mrfjj9q().s[120]++, Array.from(this.commandHistory.entries()).sort(([, a], [, b]) => {
        /* istanbul ignore next */
        cov_t2mrfjj9q().f[25]++;
        cov_t2mrfjj9q().s[121]++;
        return a.timestamp - b.timestamp;
      })[0]);
      /* istanbul ignore next */
      cov_t2mrfjj9q().s[122]++;
      this.commandHistory.delete(oldest[0]);
    } else
    /* istanbul ignore next */
    {
      cov_t2mrfjj9q().b[39][1]++;
    }
  }
  calculateAverageAssemblyTime() {
    /* istanbul ignore next */
    cov_t2mrfjj9q().f[26]++;
    const executions =
    /* istanbul ignore next */
    (cov_t2mrfjj9q().s[123]++, Array.from(this.commandHistory.values()));
    /* istanbul ignore next */
    cov_t2mrfjj9q().s[124]++;
    if (executions.length === 0) {
      /* istanbul ignore next */
      cov_t2mrfjj9q().b[40][0]++;
      cov_t2mrfjj9q().s[125]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_t2mrfjj9q().b[40][1]++;
    }
    // This would normally track assembly times
    cov_t2mrfjj9q().s[126]++;
    return 50; // Placeholder: 50ms average
  }
}
/* istanbul ignore next */
cov_t2mrfjj9q().s[127]++;
exports.CommandContextProvider = CommandContextProvider;
/**
 * Singleton instance for command integration
 */
/* istanbul ignore next */
cov_t2mrfjj9q().s[128]++;
exports.commandContextProvider = new CommandContextProvider();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,