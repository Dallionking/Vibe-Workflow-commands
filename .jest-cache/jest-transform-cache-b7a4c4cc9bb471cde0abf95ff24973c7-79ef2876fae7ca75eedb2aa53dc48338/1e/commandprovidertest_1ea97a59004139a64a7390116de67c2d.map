{"file":"/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/__tests__/command-provider.test.ts","mappings":"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","names":[],"sources":["/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/__tests__/command-provider.test.ts"],"sourcesContent":["/**\n * Command Provider Integration Test Suite\n * Tests for CommandContextProvider integration layer\n */\n\nimport { describe, test, expect, beforeEach, jest } from '@jest/globals';\nimport { CommandContextProvider } from '../integration/command-provider';\nimport { ContextPriority } from '../types/context.types';\n\n// Mock file system operations\njest.mock('fs', () => ({\n  existsSync: jest.fn(),\n  readFileSync: jest.fn(),\n  writeFileSync: jest.fn()\n}));\n\ndescribe('CommandContextProvider', () => {\n  let provider: CommandContextProvider;\n\n  beforeEach(() => {\n    provider = new CommandContextProvider({\n      enableMemoryLearning: true,\n      enableCaching: true,\n      enableValidation: true,\n      maxContextTokens: 2000,\n      fallbackStrategy: 'essential',\n      debugMode: false\n    });\n  });\n\n  describe('Initialization', () => {\n    test('should initialize successfully', async () => {\n      await expect(provider.initialize()).resolves.not.toThrow();\n    });\n\n    test('should initialize with custom configuration', async () => {\n      const customProvider = new CommandContextProvider({\n        maxContextTokens: 5000,\n        debugMode: true\n      });\n\n      await expect(customProvider.initialize()).resolves.not.toThrow();\n    });\n\n    test('should handle initialization errors gracefully', async () => {\n      // Mock an initialization error\n      const errorProvider = new CommandContextProvider();\n      \n      // Should not throw during initialization\n      await expect(errorProvider.initialize()).resolves.not.toThrow();\n    });\n  });\n\n  describe('Command Context Generation', () => {\n    beforeEach(async () => {\n      await provider.initialize();\n    });\n\n    test('should generate context for Read command', async () => {\n      const result = await provider.getCommandContext('Read', {\n        file_path: '/test/file.ts'\n      });\n\n      expect(result).toBeDefined();\n      expect(result.commandName).toBe('Read');\n      expect(result.context).toBeDefined();\n      expect(result.fragments).toBeDefined();\n      expect(result.tokens).toBeGreaterThan(0);\n      expect(result.validation).toBeDefined();\n      expect(result.executionTime).toBeGreaterThan(0);\n    });\n\n    test('should generate context for Write command', async () => {\n      const result = await provider.getCommandContext('Write', {\n        file_path: '/test/file.ts',\n        content: 'test content'\n      });\n\n      expect(result.commandName).toBe('Write');\n      expect(result.context).toContain('Context Information');\n      expect(result.validation.passed).toBeDefined();\n    });\n\n    test('should generate context for Bash command', async () => {\n      const result = await provider.getCommandContext('Bash', {\n        command: 'npm test'\n      });\n\n      expect(result.commandName).toBe('Bash');\n      expect(result.context).toBeDefined();\n      expect(result.tokens).toBeLessThanOrEqual(2000); // Respect token limit\n    });\n\n    test('should handle unknown commands', async () => {\n      const result = await provider.getCommandContext('UnknownCommand', {});\n\n      expect(result.commandName).toBe('UnknownCommand');\n      expect(result.context).toBeDefined();\n      // Should still provide some context even for unknown commands\n    });\n\n    test('should respect token limits', async () => {\n      const smallProvider = new CommandContextProvider({\n        maxContextTokens: 500\n      });\n      await smallProvider.initialize();\n\n      const result = await smallProvider.getCommandContext('Read', {});\n\n      expect(result.tokens).toBeLessThanOrEqual(500);\n    });\n  });\n\n  describe('Context Validation', () => {\n    beforeEach(async () => {\n      await provider.initialize();\n    });\n\n    test('should validate command context', async () => {\n      const result = await provider.getCommandContext('Read', {});\n\n      expect(result.validation).toBeDefined();\n      expect(typeof result.validation.passed).toBe('boolean');\n      expect(Array.isArray(result.validation.errors)).toBe(true);\n      expect(Array.isArray(result.validation.warnings)).toBe(true);\n    });\n\n    test('should detect missing required context', async () => {\n      // Create provider with strict validation\n      const strictProvider = new CommandContextProvider({\n        enableValidation: true,\n        maxContextTokens: 100 // Very small to trigger validation issues\n      });\n      await strictProvider.initialize();\n\n      const result = await strictProvider.getCommandContext('Write', {});\n\n      // With very small token budget, validation might fail\n      if (!result.validation.passed) {\n        expect(result.validation.errors.length).toBeGreaterThan(0);\n      }\n    });\n\n    test('should provide warnings for sub-optimal context', async () => {\n      const result = await provider.getCommandContext('Bash', {});\n\n      // Should provide warnings about safety or other considerations\n      expect(result.validation.warnings).toBeDefined();\n    });\n  });\n\n  describe('Phase Context Management', () => {\n    beforeEach(async () => {\n      await provider.initialize();\n    });\n\n    test('should update phase context', async () => {\n      await provider.updatePhaseContext(\n        1,\n        'Context Engineering',\n        ['task-1', 'task-2'],\n        2\n      );\n\n      const summary = provider.getContextSummary();\n      expect(summary.phase).toBeDefined();\n      expect(summary.phase?.phaseNumber).toBe(1);\n      expect(summary.phase?.phaseName).toBe('Context Engineering');\n    });\n\n    test('should track phase progress', async () => {\n      await provider.updatePhaseContext(1, 'Test Phase', ['task-1']);\n      \n      let summary = provider.getContextSummary();\n      expect(summary.phase?.progress).toBeDefined();\n\n      // Update with more completed tasks\n      await provider.updatePhaseContext(1, 'Test Phase', ['task-1', 'task-2', 'task-3']);\n      \n      summary = provider.getContextSummary();\n      expect(summary.phase?.progress).toBeGreaterThan(0);\n    });\n\n    test('should handle phase transitions', async () => {\n      // Start with Phase 1\n      await provider.updatePhaseContext(1, 'Phase 1', ['task-1']);\n      \n      let summary = provider.getContextSummary();\n      expect(summary.phase?.phaseNumber).toBe(1);\n\n      // Transition to Phase 2\n      await provider.updatePhaseContext(2, 'Phase 2', []);\n      \n      summary = provider.getContextSummary();\n      expect(summary.phase?.phaseNumber).toBe(2);\n      expect(summary.phase?.phaseName).toBe('Phase 2');\n    });\n  });\n\n  describe('Command Result Recording', () => {\n    beforeEach(async () => {\n      await provider.initialize();\n    });\n\n    test('should record successful command results', async () => {\n      const context = await provider.getCommandContext('Read', {});\n      \n      // Record success\n      provider.recordCommandResult('Read', 'success', 'File read successfully');\n\n      // Should not throw and should update learning system\n      expect(true).toBe(true);\n    });\n\n    test('should record failed command results', async () => {\n      const context = await provider.getCommandContext('Write', {});\n      \n      // Record failure\n      provider.recordCommandResult('Write', 'failure', 'Permission denied');\n\n      // Should handle failure recording gracefully\n      expect(true).toBe(true);\n    });\n\n    test('should record partial command results', async () => {\n      const context = await provider.getCommandContext('Bash', {});\n      \n      // Record partial success\n      provider.recordCommandResult('Bash', 'partial', 'Command completed with warnings');\n\n      expect(true).toBe(true);\n    });\n  });\n\n  describe('Context Summary', () => {\n    beforeEach(async () => {\n      await provider.initialize();\n    });\n\n    test('should provide comprehensive context summary', async () => {\n      await provider.updatePhaseContext(1, 'Test Phase', ['task-1']);\n      \n      const summary = provider.getContextSummary();\n\n      expect(summary.global).toBeDefined();\n      expect(summary.global.enabled).toBeDefined();\n      expect(summary.global.rulesCount).toBeGreaterThanOrEqual(0);\n\n      expect(summary.phase).toBeDefined();\n      expect(summary.task).toBeDefined(); // May be null\n\n      expect(summary.memory).toBeDefined();\n      expect(summary.memory.patternsLearned).toBeGreaterThanOrEqual(0);\n      expect(summary.memory.accuracyRate).toBeGreaterThanOrEqual(0);\n\n      expect(summary.performance).toBeDefined();\n      expect(summary.performance.totalCommands).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should handle empty context state', async () => {\n      const summary = provider.getContextSummary();\n\n      expect(summary).toBeDefined();\n      expect(summary.global).toBeDefined();\n      expect(summary.memory).toBeDefined();\n      expect(summary.performance).toBeDefined();\n    });\n  });\n\n  describe('State Export/Import', () => {\n    beforeEach(async () => {\n      await provider.initialize();\n    });\n\n    test('should export context state', async () => {\n      await provider.updatePhaseContext(1, 'Test Phase', ['task-1']);\n      \n      const exported = provider.exportContextState();\n\n      expect(exported).toBeDefined();\n      expect(exported.global).toBeDefined();\n      expect(exported.config).toBeDefined();\n      expect(exported.timestamp).toBeDefined();\n    });\n\n    test('should import context state', async () => {\n      // First export a state\n      await provider.updatePhaseContext(1, 'Original Phase', ['task-1']);\n      const exported = provider.exportContextState();\n\n      // Create new provider and import\n      const newProvider = new CommandContextProvider();\n      await newProvider.initialize();\n      \n      newProvider.importContextState(exported);\n\n      const summary = newProvider.getContextSummary();\n      expect(summary.phase?.phaseName).toBe('Original Phase');\n    });\n\n    test('should handle partial import data', async () => {\n      const partialData = {\n        global: null,\n        phase: null,\n        task: null,\n        memory: null,\n        config: {\n          enableMemoryLearning: false,\n          enableCaching: true,\n          enableValidation: true,\n          maxContextTokens: 8000,\n          fallbackStrategy: 'minimal' as const,\n          debugMode: false\n        },\n        timestamp: Date.now()\n      };\n\n      // Should not throw with partial data\n      expect(() => provider.importContextState(partialData)).not.toThrow();\n    });\n  });\n\n  describe('Fallback Behavior', () => {\n    test('should provide fallback context on errors', async () => {\n      // Create provider that will encounter errors\n      const errorProvider = new CommandContextProvider({\n        maxContextTokens: -1 // Invalid configuration to trigger errors\n      });\n\n      await errorProvider.initialize();\n      \n      const result = await errorProvider.getCommandContext('Read', {});\n\n      expect(result).toBeDefined();\n      expect(result.context).toContain('Fallback Context');\n      expect(result.validation.passed).toBe(false);\n      expect(result.validation.warnings).toContain('Using fallback context');\n    });\n\n    test('should handle different fallback strategies', async () => {\n      const strategies = ['minimal', 'essential', 'degraded'];\n\n      for (const strategy of strategies) {\n        const strategyProvider = new CommandContextProvider({\n          fallbackStrategy: strategy as any\n        });\n\n        await strategyProvider.initialize();\n        const result = await strategyProvider.getCommandContext('Read', {});\n\n        expect(result).toBeDefined();\n        expect(result.context).toBeDefined();\n      }\n    });\n  });\n\n  describe('Performance', () => {\n    beforeEach(async () => {\n      await provider.initialize();\n    });\n\n    test('should complete context generation quickly', async () => {\n      const startTime = Date.now();\n      \n      await provider.getCommandContext('Read', {});\n      \n      const endTime = Date.now();\n      const executionTime = endTime - startTime;\n\n      // Should complete within reasonable time (1 second for tests)\n      expect(executionTime).toBeLessThan(1000);\n    });\n\n    test('should handle concurrent context requests', async () => {\n      const promises = [];\n\n      // Start multiple context requests concurrently\n      for (let i = 0; i < 5; i++) {\n        promises.push(provider.getCommandContext('Read', { file_path: `/test${i}.ts` }));\n      }\n\n      const results = await Promise.all(promises);\n\n      expect(results).toHaveLength(5);\n      results.forEach(result => {\n        expect(result).toBeDefined();\n        expect(result.commandName).toBe('Read');\n      });\n    });\n\n    test('should maintain performance with repeated calls', async () => {\n      const times = [];\n\n      // Make multiple calls and measure time\n      for (let i = 0; i < 10; i++) {\n        const startTime = Date.now();\n        await provider.getCommandContext('Read', {});\n        const endTime = Date.now();\n        \n        times.push(endTime - startTime);\n      }\n\n      // Average time should be reasonable\n      const averageTime = times.reduce((sum, time) => sum + time, 0) / times.length;\n      expect(averageTime).toBeLessThan(100); // Should average under 100ms\n    });\n  });\n\n  describe('Memory Learning Integration', () => {\n    beforeEach(async () => {\n      await provider.initialize();\n    });\n\n    test('should provide recommendations when enabled', async () => {\n      const learningProvider = new CommandContextProvider({\n        enableMemoryLearning: true\n      });\n      await learningProvider.initialize();\n\n      const result = await learningProvider.getCommandContext('Read', {});\n\n      expect(result.recommendations).toBeDefined();\n      expect(Array.isArray(result.recommendations)).toBe(true);\n    });\n\n    test('should not provide recommendations when disabled', async () => {\n      const noLearningProvider = new CommandContextProvider({\n        enableMemoryLearning: false\n      });\n      await noLearningProvider.initialize();\n\n      const result = await noLearningProvider.getCommandContext('Read', {});\n\n      expect(result.recommendations).toEqual([]);\n    });\n\n    test('should update learning metrics over time', async () => {\n      // Generate some context and record results\n      await provider.getCommandContext('Read', {});\n      provider.recordCommandResult('Read', 'success');\n\n      await provider.getCommandContext('Write', {});\n      provider.recordCommandResult('Write', 'failure');\n\n      const summary = provider.getContextSummary();\n      expect(summary.memory.patternsLearned).toBeGreaterThanOrEqual(0);\n    });\n  });\n});"],"version":3}