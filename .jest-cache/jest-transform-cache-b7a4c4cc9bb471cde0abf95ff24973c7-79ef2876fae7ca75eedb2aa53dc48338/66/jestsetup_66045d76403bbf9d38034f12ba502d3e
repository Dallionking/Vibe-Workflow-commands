4db51ae1ceb6b026874d5fdb63d5b35f
/**
 * Jest Setup File
 * Global test configuration and utilities
 */

// Global test timeout for async operations
jest.setTimeout(30000);

// Mock console methods to reduce noise in tests
const originalConsole = global.console;

beforeAll(() => {
  global.console = {
    ...originalConsole,
    // Keep error and warn for debugging
    error: originalConsole.error,
    warn: originalConsole.warn,
    // Mock info and debug to reduce noise
    info: jest.fn(),
    debug: jest.fn(),
    log: jest.fn()
  };
});

afterAll(() => {
  global.console = originalConsole;
});

// Global test utilities
global.testUtils = {
  // Helper to create mock context fragments
  createMockFragment: (id, content = 'test content', priority = 600) => ({
    id,
    type: 'test-fragment',
    content,
    priority,
    tokenEstimate: Math.ceil(content.length / 3.5),
    metadata: {
      source: { type: 'test', provider: 'jest' },
      priority,
      tags: ['test'],
      dependencies: [],
      created: Date.now(),
      lastModified: Date.now()
    },
    validation: {
      isValid: true,
      errors: [],
      warnings: [],
      lastValidated: Date.now()
    }
  }),

  // Helper to wait for async operations
  delay: (ms) => new Promise(resolve => setTimeout(resolve, ms)),

  // Helper to generate test data
  generateTestData: (count = 5) => {
    return Array.from({ length: count }, (_, i) => ({
      id: `test-${i + 1}`,
      name: `Test Item ${i + 1}`,
      value: Math.random(),
      timestamp: Date.now() + i
    }));
  },

  // Helper to mock file system operations
  mockFileSystem: () => {
    const fs = require('fs');
    
    return {
      existsSync: jest.spyOn(fs, 'existsSync').mockImplementation(() => true),
      readFileSync: jest.spyOn(fs, 'readFileSync').mockImplementation(() => 'mock file content'),
      writeFileSync: jest.spyOn(fs, 'writeFileSync').mockImplementation(() => {}),
      restore: () => {
        fs.existsSync.mockRestore();
        fs.readFileSync.mockRestore();
        fs.writeFileSync.mockRestore();
      }
    };
  }
};

// Global error handling for unhandled promises
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

// Performance monitoring for tests
let performanceMarks = new Map();

global.performance = {
  ...global.performance,
  mark: (name) => {
    performanceMarks.set(name, Date.now());
  },
  measure: (name, startMark, endMark) => {
    const start = performanceMarks.get(startMark) || 0;
    const end = performanceMarks.get(endMark) || Date.now();
    const duration = end - start;
    
    if (duration > 1000) {
      console.warn(`Performance warning: ${name} took ${duration}ms`);
    }
    
    return { duration, name };
  }
};

// Custom matchers
expect.extend({
  toBeWithinRange(received, floor, ceiling) {
    const pass = received >= floor && received <= ceiling;
    if (pass) {
      return {
        message: () => `expected ${received} not to be within range ${floor} - ${ceiling}`,
        pass: true,
      };
    } else {
      return {
        message: () => `expected ${received} to be within range ${floor} - ${ceiling}`,
        pass: false,
      };
    }
  },

  toHaveValidStructure(received, expectedKeys) {
    const receivedKeys = Object.keys(received || {});
    const hasAllKeys = expectedKeys.every(key => receivedKeys.includes(key));
    
    if (hasAllKeys) {
      return {
        message: () => `expected object not to have all required keys: ${expectedKeys.join(', ')}`,
        pass: true,
      };
    } else {
      const missingKeys = expectedKeys.filter(key => !receivedKeys.includes(key));
      return {
        message: () => `expected object to have all required keys. Missing: ${missingKeys.join(', ')}`,
        pass: false,
      };
    }
  },

  toBeValidFragment(received) {
    const requiredProperties = ['id', 'type', 'content', 'priority', 'tokenEstimate', 'metadata', 'validation'];
    const hasAllProperties = requiredProperties.every(prop => received && received.hasOwnProperty(prop));
    
    if (hasAllProperties) {
      return {
        message: () => `expected object not to be a valid context fragment`,
        pass: true,
      };
    } else {
      const missingProps = requiredProperties.filter(prop => !received || !received.hasOwnProperty(prop));
      return {
        message: () => `expected object to be a valid context fragment. Missing properties: ${missingProps.join(', ')}`,
        pass: false,
      };
    }
  }
});

// Environment checks
if (process.env.NODE_ENV !== 'test') {
  console.warn('Jest setup: NODE_ENV is not set to "test"');
}

// Memory leak detection
let initialMemoryUsage = process.memoryUsage();

afterAll(() => {
  const finalMemoryUsage = process.memoryUsage();
  const memoryIncrease = finalMemoryUsage.heapUsed - initialMemoryUsage.heapUsed;
  
  if (memoryIncrease > 50 * 1024 * 1024) { // 50MB threshold
    console.warn(`Memory usage increased by ${Math.round(memoryIncrease / 1024 / 1024)}MB during tests`);
  }
});

// Test isolation helpers
beforeEach(() => {
  // Clear any module cache to ensure test isolation
  Object.keys(require.cache).forEach(key => {
    if (key.includes('context/') && !key.includes('node_modules')) {
      delete require.cache[key];
    }
  });
});

console.log('Jest setup completed successfully');