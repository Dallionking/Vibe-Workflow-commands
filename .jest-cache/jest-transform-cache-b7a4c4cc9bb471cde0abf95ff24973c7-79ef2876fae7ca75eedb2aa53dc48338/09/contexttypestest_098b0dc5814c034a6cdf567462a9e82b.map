{"file":"/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/__tests__/context-types.test.ts","mappings":"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","names":[],"sources":["/Users/dallionking/Vibe Projects/Vibe Workflow commands /context/__tests__/context-types.test.ts"],"sourcesContent":["/**\n * Context Types Test Suite\n * Tests for TypeScript interfaces and type safety\n */\n\nimport { describe, test, expect } from '@jest/globals';\nimport {\n  ContextPriority,\n  BaseContext,\n  ContextMetadata,\n  ContextSource,\n  ContextFragment,\n  GlobalRule,\n  TaskType\n} from '../types/context.types';\n\ndescribe('Context Types', () => {\n  describe('ContextPriority Enum', () => {\n    test('should have correct priority values', () => {\n      expect(ContextPriority.CRITICAL).toBe(1000);\n      expect(ContextPriority.HIGH).toBe(800);\n      expect(ContextPriority.MEDIUM).toBe(500);\n      expect(ContextPriority.LOW).toBe(200);\n      expect(ContextPriority.MINIMAL).toBe(100);\n    });\n\n    test('should maintain correct ordering', () => {\n      expect(ContextPriority.CRITICAL > ContextPriority.HIGH).toBe(true);\n      expect(ContextPriority.HIGH > ContextPriority.MEDIUM).toBe(true);\n      expect(ContextPriority.MEDIUM > ContextPriority.LOW).toBe(true);\n      expect(ContextPriority.LOW > ContextPriority.MINIMAL).toBe(true);\n    });\n  });\n\n  describe('ContextSource Discriminated Union', () => {\n    test('should accept valid global source', () => {\n      const globalSource: ContextSource = {\n        type: 'global',\n        scope: 'system'\n      };\n      expect(globalSource.type).toBe('global');\n      expect(globalSource.scope).toBe('system');\n    });\n\n    test('should accept valid phase source', () => {\n      const phaseSource: ContextSource = {\n        type: 'phase',\n        phaseNumber: 1,\n        phaseName: 'Context Engineering'\n      };\n      expect(phaseSource.type).toBe('phase');\n      expect(phaseSource.phaseNumber).toBe(1);\n    });\n\n    test('should accept valid task source', () => {\n      const taskSource: ContextSource = {\n        type: 'task',\n        taskId: 'task-123',\n        taskType: 'implementation'\n      };\n      expect(taskSource.type).toBe('task');\n      expect(taskSource.taskId).toBe('task-123');\n    });\n\n    test('should accept valid memory source', () => {\n      const memorySource: ContextSource = {\n        type: 'memory',\n        memoryType: 'pattern'\n      };\n      expect(memorySource.type).toBe('memory');\n      expect(memorySource.memoryType).toBe('pattern');\n    });\n\n    test('should accept valid command source', () => {\n      const commandSource: ContextSource = {\n        type: 'command',\n        commandName: 'Read',\n        commandType: 'file-operation'\n      };\n      expect(commandSource.type).toBe('command');\n      expect(commandSource.commandName).toBe('Read');\n    });\n\n    test('should accept valid external source', () => {\n      const externalSource: ContextSource = {\n        type: 'external',\n        provider: 'Context7',\n        dataType: 'documentation'\n      };\n      expect(externalSource.type).toBe('external');\n      expect(externalSource.provider).toBe('Context7');\n    });\n  });\n\n  describe('BaseContext Interface', () => {\n    test('should create valid base context', () => {\n      const metadata: ContextMetadata = {\n        source: { type: 'global', scope: 'system' },\n        priority: ContextPriority.HIGH,\n        tags: ['test'],\n        dependencies: [],\n        created: Date.now(),\n        lastModified: Date.now()\n      };\n\n      const baseContext: BaseContext<string> = {\n        id: 'test-context',\n        timestamp: Date.now(),\n        version: '1.0.0',\n        data: 'test data',\n        metadata\n      };\n\n      expect(baseContext.id).toBe('test-context');\n      expect(typeof baseContext.data).toBe('string');\n      expect(baseContext.metadata.priority).toBe(ContextPriority.HIGH);\n    });\n  });\n\n  describe('ContextFragment Interface', () => {\n    test('should create valid context fragment', () => {\n      const fragment: ContextFragment = {\n        id: 'fragment-1',\n        type: 'global-rules',\n        content: 'Test rule content',\n        priority: ContextPriority.CRITICAL,\n        tokenEstimate: 150,\n        metadata: {\n          source: { type: 'global', scope: 'system' },\n          priority: ContextPriority.CRITICAL,\n          tags: ['global', 'rules'],\n          dependencies: [],\n          created: Date.now(),\n          lastModified: Date.now()\n        },\n        validation: {\n          isValid: true,\n          errors: [],\n          warnings: [],\n          lastValidated: Date.now()\n        }\n      };\n\n      expect(fragment.id).toBe('fragment-1');\n      expect(fragment.type).toBe('global-rules');\n      expect(fragment.tokenEstimate).toBe(150);\n      expect(fragment.validation.isValid).toBe(true);\n    });\n\n    test('should handle invalid fragment validation', () => {\n      const fragment: ContextFragment = {\n        id: 'invalid-fragment',\n        type: 'task-context',\n        content: '',\n        priority: ContextPriority.LOW,\n        tokenEstimate: 0,\n        metadata: {\n          source: { type: 'task', taskId: 'test', taskType: 'validation' },\n          priority: ContextPriority.LOW,\n          tags: ['task'],\n          dependencies: [],\n          created: Date.now(),\n          lastModified: Date.now()\n        },\n        validation: {\n          isValid: false,\n          errors: [\n            {\n              code: 'EMPTY_CONTENT',\n              message: 'Fragment content cannot be empty',\n              severity: 'error'\n            }\n          ],\n          warnings: [],\n          lastValidated: Date.now()\n        }\n      };\n\n      expect(fragment.validation.isValid).toBe(false);\n      expect(fragment.validation.errors).toHaveLength(1);\n      expect(fragment.validation.errors[0].code).toBe('EMPTY_CONTENT');\n    });\n  });\n\n  describe('GlobalRule Interface', () => {\n    test('should create valid global rule', () => {\n      const rule: GlobalRule = {\n        id: 'test-rule',\n        name: 'Test Rule',\n        description: 'A test rule for validation',\n        rule: 'Always test your code',\n        enabled: true,\n        priority: ContextPriority.HIGH\n      };\n\n      expect(rule.id).toBe('test-rule');\n      expect(rule.enabled).toBe(true);\n      expect(rule.priority).toBe(ContextPriority.HIGH);\n    });\n\n    test('should handle disabled rules', () => {\n      const rule: GlobalRule = {\n        id: 'disabled-rule',\n        name: 'Disabled Rule',\n        description: 'A disabled rule',\n        rule: 'This rule is disabled',\n        enabled: false,\n        priority: ContextPriority.LOW\n      };\n\n      expect(rule.enabled).toBe(false);\n    });\n  });\n\n  describe('TaskType Validation', () => {\n    const validTaskTypes: TaskType[] = [\n      'implementation',\n      'testing',\n      'research',\n      'documentation',\n      'validation',\n      'integration',\n      'optimization'\n    ];\n\n    test('should accept all valid task types', () => {\n      validTaskTypes.forEach(taskType => {\n        expect(typeof taskType).toBe('string');\n        expect(validTaskTypes).toContain(taskType);\n      });\n    });\n  });\n\n  describe('Token Budget Validation', () => {\n    test('should validate token budget structure', () => {\n      const tokenBudget = {\n        total: 8000,\n        reserved: 800,\n        available: 7200,\n        used: 0,\n        allocation: {\n          global: 2000,\n          phase: 2000,\n          task: 2000,\n          memory: 1000,\n          buffer: 200\n        }\n      };\n\n      expect(tokenBudget.total).toBe(8000);\n      expect(tokenBudget.available + tokenBudget.reserved).toBe(tokenBudget.total);\n      \n      const totalAllocation = Object.values(tokenBudget.allocation)\n        .reduce((sum, val) => sum + val, 0);\n      expect(totalAllocation).toBeLessThanOrEqual(tokenBudget.total);\n    });\n  });\n\n  describe('Type Safety Edge Cases', () => {\n    test('should handle optional properties correctly', () => {\n      const metadata: ContextMetadata = {\n        source: { type: 'global', scope: 'system' },\n        priority: ContextPriority.MEDIUM,\n        tags: [],\n        dependencies: [],\n        created: Date.now(),\n        lastModified: Date.now()\n        // ttl is optional\n      };\n\n      expect(metadata.ttl).toBeUndefined();\n    });\n\n    test('should maintain readonly properties', () => {\n      const baseContext: BaseContext = {\n        id: 'readonly-test',\n        timestamp: Date.now(),\n        version: '1.0.0',\n        data: {},\n        metadata: {\n          source: { type: 'global', scope: 'system' },\n          priority: ContextPriority.MEDIUM,\n          tags: [],\n          dependencies: [],\n          created: Date.now(),\n          lastModified: Date.now()\n        }\n      };\n\n      // These should be readonly and TypeScript would prevent modification\n      expect(baseContext.id).toBe('readonly-test');\n      expect(typeof baseContext.timestamp).toBe('number');\n    });\n  });\n\n  describe('Context Fragment Types', () => {\n    const validFragmentTypes = [\n      'global-rules',\n      'global-config', \n      'phase-context',\n      'phase-history',\n      'task-context',\n      'task-state',\n      'memory-pattern',\n      'memory-decision',\n      'command-context'\n    ];\n\n    test('should validate all fragment types', () => {\n      validFragmentTypes.forEach(type => {\n        const fragment: Partial<ContextFragment> = {\n          type: type as any,\n          content: 'test content',\n          priority: ContextPriority.MEDIUM\n        };\n        \n        expect(fragment.type).toBe(type);\n      });\n    });\n  });\n});"],"version":3}